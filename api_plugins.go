/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// PluginsAPIService PluginsAPI service
type PluginsAPIService service

type ApiPluginsBgpBgppeergroupBulkDestroyRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *[]BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupBulkDestroyRequest) BGPPeerGroupRequest(bGPPeerGroupRequest []BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupBulkDestroyRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupBulkDestroyExecute(r)
}

/*
PluginsBgpBgppeergroupBulkDestroy Method for PluginsBgpBgppeergroupBulkDestroy

Delete a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupBulkDestroy(ctx context.Context) ApiPluginsBgpBgppeergroupBulkDestroyRequest {
	return ApiPluginsBgpBgppeergroupBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpBgppeergroupBulkDestroyExecute(r ApiPluginsBgpBgppeergroupBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *[]BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest []BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest) Execute() ([]BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupBulkPartialUpdateExecute(r)
}

/*
PluginsBgpBgppeergroupBulkPartialUpdate Method for PluginsBgpBgppeergroupBulkPartialUpdate

Patch a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupBulkPartialUpdate(ctx context.Context) ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest {
	return ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupBulkPartialUpdateExecute(r ApiPluginsBgpBgppeergroupBulkPartialUpdateRequest) ([]BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupBulkUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *[]BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupBulkUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest []BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupBulkUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupBulkUpdateRequest) Execute() ([]BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupBulkUpdateExecute(r)
}

/*
PluginsBgpBgppeergroupBulkUpdate Method for PluginsBgpBgppeergroupBulkUpdate

Put a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupBulkUpdate(ctx context.Context) ApiPluginsBgpBgppeergroupBulkUpdateRequest {
	return ApiPluginsBgpBgppeergroupBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupBulkUpdateExecute(r ApiPluginsBgpBgppeergroupBulkUpdateRequest) ([]BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupCreateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupCreateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupCreateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupCreateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupCreateExecute(r)
}

/*
PluginsBgpBgppeergroupCreate Method for PluginsBgpBgppeergroupCreate

Post a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupCreate(ctx context.Context) ApiPluginsBgpBgppeergroupCreateRequest {
	return ApiPluginsBgpBgppeergroupCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupCreateExecute(r ApiPluginsBgpBgppeergroupCreateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgppeergroupDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupDestroyExecute(r)
}

/*
PluginsBgpBgppeergroupDestroy Method for PluginsBgpBgppeergroupDestroy

Delete a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupDestroy(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupDestroyRequest {
	return ApiPluginsBgpBgppeergroupDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpBgppeergroupDestroyExecute(r ApiPluginsBgpBgppeergroupDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpBgppeergroupListRequest) Created(created []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpBgppeergroupListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Description(description []string) ApiPluginsBgpBgppeergroupListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Id(id []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpBgppeergroupListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdGt(idGt []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdGte(idGte []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdLt(idLt []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdLte(idLte []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdN(idN []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpBgppeergroupListRequest) Limit(limit int32) ApiPluginsBgpBgppeergroupListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpBgppeergroupListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Name(name []string) ApiPluginsBgpBgppeergroupListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpBgppeergroupListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIc(nameIc []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIe(nameIe []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIew(nameIew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIsw(nameIsw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameN(nameN []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNic(nameNic []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNie(nameNie []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNiew(nameNiew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNisw(nameNisw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpBgppeergroupListRequest) Offset(offset int32) ApiPluginsBgpBgppeergroupListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpBgppeergroupListRequest) Ordering(ordering string) ApiPluginsBgpBgppeergroupListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpBgppeergroupListRequest) Q(q string) ApiPluginsBgpBgppeergroupListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Tag(tag []string) ApiPluginsBgpBgppeergroupListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) TagN(tagN []string) ApiPluginsBgpBgppeergroupListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpBgppeergroupListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Execute() (*PaginatedBGPPeerGroupList, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupListExecute(r)
}

/*
PluginsBgpBgppeergroupList Method for PluginsBgpBgppeergroupList

Get a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupListRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupList(ctx context.Context) ApiPluginsBgpBgppeergroupListRequest {
	return ApiPluginsBgpBgppeergroupListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPPeerGroupList
func (a *PluginsAPIService) PluginsBgpBgppeergroupListExecute(r ApiPluginsBgpBgppeergroupListRequest) (*PaginatedBGPPeerGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPPeerGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *PluginsAPIService
	id                         int32
	patchedBGPPeerGroupRequest *PatchedBGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupPartialUpdateRequest) PatchedBGPPeerGroupRequest(patchedBGPPeerGroupRequest PatchedBGPPeerGroupRequest) ApiPluginsBgpBgppeergroupPartialUpdateRequest {
	r.patchedBGPPeerGroupRequest = &patchedBGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupPartialUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupPartialUpdateExecute(r)
}

/*
PluginsBgpBgppeergroupPartialUpdate Method for PluginsBgpBgppeergroupPartialUpdate

Patch a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupPartialUpdateRequest {
	return ApiPluginsBgpBgppeergroupPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupPartialUpdateExecute(r ApiPluginsBgpBgppeergroupPartialUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgppeergroupRetrieveRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupRetrieveExecute(r)
}

/*
PluginsBgpBgppeergroupRetrieve Method for PluginsBgpBgppeergroupRetrieve

Get a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupRetrieve(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupRetrieveRequest {
	return ApiPluginsBgpBgppeergroupRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupRetrieveExecute(r ApiPluginsBgpBgppeergroupRetrieveRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	id                  int32
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupUpdateExecute(r)
}

/*
PluginsBgpBgppeergroupUpdate Method for PluginsBgpBgppeergroupUpdate

Put a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupUpdate(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupUpdateRequest {
	return ApiPluginsBgpBgppeergroupUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupUpdateExecute(r ApiPluginsBgpBgppeergroupUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	bGPSessionRequest *[]BGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionBulkDestroyRequest) BGPSessionRequest(bGPSessionRequest []BGPSessionRequest) ApiPluginsBgpBgpsessionBulkDestroyRequest {
	r.bGPSessionRequest = &bGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionBulkDestroyExecute(r)
}

/*
PluginsBgpBgpsessionBulkDestroy Method for PluginsBgpBgpsessionBulkDestroy

Delete a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionBulkDestroy(ctx context.Context) ApiPluginsBgpBgpsessionBulkDestroyRequest {
	return ApiPluginsBgpBgpsessionBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpBgpsessionBulkDestroyExecute(r ApiPluginsBgpBgpsessionBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPSessionRequest == nil {
		return nil, reportError("bGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	bGPSessionRequest *[]BGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionBulkPartialUpdateRequest) BGPSessionRequest(bGPSessionRequest []BGPSessionRequest) ApiPluginsBgpBgpsessionBulkPartialUpdateRequest {
	r.bGPSessionRequest = &bGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionBulkPartialUpdateRequest) Execute() ([]BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionBulkPartialUpdateExecute(r)
}

/*
PluginsBgpBgpsessionBulkPartialUpdate Method for PluginsBgpBgpsessionBulkPartialUpdate

Patch a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionBulkPartialUpdate(ctx context.Context) ApiPluginsBgpBgpsessionBulkPartialUpdateRequest {
	return ApiPluginsBgpBgpsessionBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionBulkPartialUpdateExecute(r ApiPluginsBgpBgpsessionBulkPartialUpdateRequest) ([]BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("bGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	bGPSessionRequest *[]BGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionBulkUpdateRequest) BGPSessionRequest(bGPSessionRequest []BGPSessionRequest) ApiPluginsBgpBgpsessionBulkUpdateRequest {
	r.bGPSessionRequest = &bGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionBulkUpdateRequest) Execute() ([]BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionBulkUpdateExecute(r)
}

/*
PluginsBgpBgpsessionBulkUpdate Method for PluginsBgpBgpsessionBulkUpdate

Put a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionBulkUpdate(ctx context.Context) ApiPluginsBgpBgpsessionBulkUpdateRequest {
	return ApiPluginsBgpBgpsessionBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionBulkUpdateExecute(r ApiPluginsBgpBgpsessionBulkUpdateRequest) ([]BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("bGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionCreateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionCreateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpBgpsessionCreateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionCreateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionCreateExecute(r)
}

/*
PluginsBgpBgpsessionCreate Method for PluginsBgpBgpsessionCreate

Post a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionCreate(ctx context.Context) ApiPluginsBgpBgpsessionCreateRequest {
	return ApiPluginsBgpBgpsessionCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionCreateExecute(r ApiPluginsBgpBgpsessionCreateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgpsessionDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionDestroyExecute(r)
}

/*
PluginsBgpBgpsessionDestroy Method for PluginsBgpBgpsessionDestroy

Delete a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionDestroy(ctx context.Context, id int32) ApiPluginsBgpBgpsessionDestroyRequest {
	return ApiPluginsBgpBgpsessionDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpBgpsessionDestroyExecute(r ApiPluginsBgpBgpsessionDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	byLocalAddress    *string
	byRemoteAddress   *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	exportPolicies    *[]int32
	exportPoliciesN   *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	importPolicies    *[]int32
	importPoliciesN   *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	localAddress      *[]string
	localAddressN     *[]string
	localAddressId    *[]int32
	localAddressIdN   *[]int32
	localAs           *[]int64
	localAsN          *[]int64
	localAsId         *[]int32
	localAsIdN        *[]int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	peerGroup         *[]int32
	peerGroupN        *[]int32
	q                 *string
	remoteAddress     *[]string
	remoteAddressN    *[]string
	remoteAddressId   *[]int32
	remoteAddressIdN  *[]int32
	remoteAs          *[]int64
	remoteAsN         *[]int64
	remoteAsId        *[]int32
	remoteAsIdN       *[]int32
	site              *[]string
	siteN             *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	status            *PluginsBgpBgpsessionListStatusParameter
	statusN           *PluginsBgpBgpsessionListStatusParameter
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	updatedByRequest  *string
}

// Local Address
func (r ApiPluginsBgpBgpsessionListRequest) ByLocalAddress(byLocalAddress string) ApiPluginsBgpBgpsessionListRequest {
	r.byLocalAddress = &byLocalAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpBgpsessionListRequest) ByRemoteAddress(byRemoteAddress string) ApiPluginsBgpBgpsessionListRequest {
	r.byRemoteAddress = &byRemoteAddress
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Created(created []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpBgpsessionListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Description(description []string) ApiPluginsBgpBgpsessionListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiPluginsBgpBgpsessionListRequest) Device(device []*string) ApiPluginsBgpBgpsessionListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiPluginsBgpBgpsessionListRequest) DeviceN(deviceN []*string) ApiPluginsBgpBgpsessionListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiPluginsBgpBgpsessionListRequest) DeviceId(deviceId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiPluginsBgpBgpsessionListRequest) DeviceIdN(deviceIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ExportPolicies(exportPolicies []int32) ApiPluginsBgpBgpsessionListRequest {
	r.exportPolicies = &exportPolicies
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ExportPoliciesN(exportPoliciesN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.exportPoliciesN = &exportPoliciesN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Id(id []int32) ApiPluginsBgpBgpsessionListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpBgpsessionListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdGt(idGt []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdGte(idGte []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdLt(idLt []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdLte(idLte []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdN(idN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ImportPolicies(importPolicies []int32) ApiPluginsBgpBgpsessionListRequest {
	r.importPolicies = &importPolicies
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ImportPoliciesN(importPoliciesN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.importPoliciesN = &importPoliciesN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpBgpsessionListRequest) Limit(limit int32) ApiPluginsBgpBgpsessionListRequest {
	r.limit = &limit
	return r
}

// Local Address
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddress(localAddress []string) ApiPluginsBgpBgpsessionListRequest {
	r.localAddress = &localAddress
	return r
}

// Local Address
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddressN(localAddressN []string) ApiPluginsBgpBgpsessionListRequest {
	r.localAddressN = &localAddressN
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddressId(localAddressId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAddressId = &localAddressId
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddressIdN(localAddressIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAddressIdN = &localAddressIdN
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAs(localAs []int64) ApiPluginsBgpBgpsessionListRequest {
	r.localAs = &localAs
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAsN(localAsN []int64) ApiPluginsBgpBgpsessionListRequest {
	r.localAsN = &localAsN
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAsId(localAsId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAsId = &localAsId
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAsIdN(localAsIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAsIdN = &localAsIdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpBgpsessionListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Name(name []string) ApiPluginsBgpBgpsessionListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpBgpsessionListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIc(nameIc []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIe(nameIe []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIew(nameIew []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIsw(nameIsw []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameN(nameN []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNic(nameNic []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNie(nameNie []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNiew(nameNiew []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNisw(nameNisw []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpBgpsessionListRequest) Offset(offset int32) ApiPluginsBgpBgpsessionListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpBgpsessionListRequest) Ordering(ordering string) ApiPluginsBgpBgpsessionListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) PeerGroup(peerGroup []int32) ApiPluginsBgpBgpsessionListRequest {
	r.peerGroup = &peerGroup
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) PeerGroupN(peerGroupN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.peerGroupN = &peerGroupN
	return r
}

// Search
func (r ApiPluginsBgpBgpsessionListRequest) Q(q string) ApiPluginsBgpBgpsessionListRequest {
	r.q = &q
	return r
}

// Remote Address
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddress(remoteAddress []string) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddress = &remoteAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddressN(remoteAddressN []string) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddressN = &remoteAddressN
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddressId(remoteAddressId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddressId = &remoteAddressId
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddressIdN(remoteAddressIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddressIdN = &remoteAddressIdN
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAs(remoteAs []int64) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAs = &remoteAs
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAsN(remoteAsN []int64) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAsN = &remoteAsN
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAsId(remoteAsId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAsId = &remoteAsId
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAsIdN(remoteAsIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAsIdN = &remoteAsIdN
	return r
}

// DSite (name)
func (r ApiPluginsBgpBgpsessionListRequest) Site(site []string) ApiPluginsBgpBgpsessionListRequest {
	r.site = &site
	return r
}

// DSite (name)
func (r ApiPluginsBgpBgpsessionListRequest) SiteN(siteN []string) ApiPluginsBgpBgpsessionListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiPluginsBgpBgpsessionListRequest) SiteId(siteId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiPluginsBgpBgpsessionListRequest) SiteIdN(siteIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.siteIdN = &siteIdN
	return r
}

// * &#x60;offline&#x60; - Offline * &#x60;active&#x60; - Active * &#x60;planned&#x60; - Planned * &#x60;failed&#x60; - Failed
func (r ApiPluginsBgpBgpsessionListRequest) Status(status PluginsBgpBgpsessionListStatusParameter) ApiPluginsBgpBgpsessionListRequest {
	r.status = &status
	return r
}

// * &#x60;offline&#x60; - Offline * &#x60;active&#x60; - Active * &#x60;planned&#x60; - Planned * &#x60;failed&#x60; - Failed
func (r ApiPluginsBgpBgpsessionListRequest) StatusN(statusN PluginsBgpBgpsessionListStatusParameter) ApiPluginsBgpBgpsessionListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Tag(tag []string) ApiPluginsBgpBgpsessionListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TagN(tagN []string) ApiPluginsBgpBgpsessionListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiPluginsBgpBgpsessionListRequest) Tenant(tenant []string) ApiPluginsBgpBgpsessionListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiPluginsBgpBgpsessionListRequest) TenantN(tenantN []string) ApiPluginsBgpBgpsessionListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TenantGroup(tenantGroup []string) ApiPluginsBgpBgpsessionListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TenantGroupN(tenantGroupN []string) ApiPluginsBgpBgpsessionListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TenantGroupId(tenantGroupId []string) ApiPluginsBgpBgpsessionListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiPluginsBgpBgpsessionListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiPluginsBgpBgpsessionListRequest) TenantId(tenantId []*int32) ApiPluginsBgpBgpsessionListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiPluginsBgpBgpsessionListRequest) TenantIdN(tenantIdN []*int32) ApiPluginsBgpBgpsessionListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpBgpsessionListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Execute() (*PaginatedBGPSessionList, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionListExecute(r)
}

/*
PluginsBgpBgpsessionList Method for PluginsBgpBgpsessionList

Get a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionListRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionList(ctx context.Context) ApiPluginsBgpBgpsessionListRequest {
	return ApiPluginsBgpBgpsessionListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPSessionList
func (a *PluginsAPIService) PluginsBgpBgpsessionListExecute(r ApiPluginsBgpBgpsessionListRequest) (*PaginatedBGPSessionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.byLocalAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_local_address", r.byLocalAddress, "")
	}
	if r.byRemoteAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_remote_address", r.byRemoteAddress, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.exportPolicies != nil {
		t := *r.exportPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", t, "multi")
		}
	}
	if r.exportPoliciesN != nil {
		t := *r.exportPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.importPolicies != nil {
		t := *r.importPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", t, "multi")
		}
	}
	if r.importPoliciesN != nil {
		t := *r.importPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localAddress != nil {
		t := *r.localAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", t, "multi")
		}
	}
	if r.localAddressN != nil {
		t := *r.localAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", t, "multi")
		}
	}
	if r.localAddressId != nil {
		t := *r.localAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", t, "multi")
		}
	}
	if r.localAddressIdN != nil {
		t := *r.localAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", t, "multi")
		}
	}
	if r.localAs != nil {
		t := *r.localAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", t, "multi")
		}
	}
	if r.localAsN != nil {
		t := *r.localAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", t, "multi")
		}
	}
	if r.localAsId != nil {
		t := *r.localAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", t, "multi")
		}
	}
	if r.localAsIdN != nil {
		t := *r.localAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.peerGroup != nil {
		t := *r.peerGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", t, "multi")
		}
	}
	if r.peerGroupN != nil {
		t := *r.peerGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.remoteAddress != nil {
		t := *r.remoteAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", t, "multi")
		}
	}
	if r.remoteAddressN != nil {
		t := *r.remoteAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", t, "multi")
		}
	}
	if r.remoteAddressId != nil {
		t := *r.remoteAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", t, "multi")
		}
	}
	if r.remoteAddressIdN != nil {
		t := *r.remoteAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", t, "multi")
		}
	}
	if r.remoteAs != nil {
		t := *r.remoteAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", t, "multi")
		}
	}
	if r.remoteAsN != nil {
		t := *r.remoteAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", t, "multi")
		}
	}
	if r.remoteAsId != nil {
		t := *r.remoteAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", t, "multi")
		}
	}
	if r.remoteAsIdN != nil {
		t := *r.remoteAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	patchedWritableBGPSessionRequest *PatchedWritableBGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionPartialUpdateRequest) PatchedWritableBGPSessionRequest(patchedWritableBGPSessionRequest PatchedWritableBGPSessionRequest) ApiPluginsBgpBgpsessionPartialUpdateRequest {
	r.patchedWritableBGPSessionRequest = &patchedWritableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionPartialUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionPartialUpdateExecute(r)
}

/*
PluginsBgpBgpsessionPartialUpdate Method for PluginsBgpBgpsessionPartialUpdate

Patch a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpBgpsessionPartialUpdateRequest {
	return ApiPluginsBgpBgpsessionPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionPartialUpdateExecute(r ApiPluginsBgpBgpsessionPartialUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgpsessionRetrieveRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionRetrieveExecute(r)
}

/*
PluginsBgpBgpsessionRetrieve Method for PluginsBgpBgpsessionRetrieve

Get a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionRetrieve(ctx context.Context, id int32) ApiPluginsBgpBgpsessionRetrieveRequest {
	return ApiPluginsBgpBgpsessionRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionRetrieveExecute(r ApiPluginsBgpBgpsessionRetrieveRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionUpdateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	id                        int32
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionUpdateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpBgpsessionUpdateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionUpdateExecute(r)
}

/*
PluginsBgpBgpsessionUpdate Method for PluginsBgpBgpsessionUpdate

Put a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionUpdate(ctx context.Context, id int32) ApiPluginsBgpBgpsessionUpdateRequest {
	return ApiPluginsBgpBgpsessionUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionUpdateExecute(r ApiPluginsBgpBgpsessionUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *PluginsAPIService
	communityRequest *[]CommunityRequest
}

func (r ApiPluginsBgpCommunityBulkDestroyRequest) CommunityRequest(communityRequest []CommunityRequest) ApiPluginsBgpCommunityBulkDestroyRequest {
	r.communityRequest = &communityRequest
	return r
}

func (r ApiPluginsBgpCommunityBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityBulkDestroyExecute(r)
}

/*
PluginsBgpCommunityBulkDestroy Method for PluginsBgpCommunityBulkDestroy

Delete a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityBulkDestroy(ctx context.Context) ApiPluginsBgpCommunityBulkDestroyRequest {
	return ApiPluginsBgpCommunityBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityBulkDestroyExecute(r ApiPluginsBgpCommunityBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityRequest == nil {
		return nil, reportError("communityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *PluginsAPIService
	communityRequest *[]CommunityRequest
}

func (r ApiPluginsBgpCommunityBulkPartialUpdateRequest) CommunityRequest(communityRequest []CommunityRequest) ApiPluginsBgpCommunityBulkPartialUpdateRequest {
	r.communityRequest = &communityRequest
	return r
}

func (r ApiPluginsBgpCommunityBulkPartialUpdateRequest) Execute() ([]Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityBulkPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityBulkPartialUpdate Method for PluginsBgpCommunityBulkPartialUpdate

Patch a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityBulkPartialUpdate(ctx context.Context) ApiPluginsBgpCommunityBulkPartialUpdateRequest {
	return ApiPluginsBgpCommunityBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Community
func (a *PluginsAPIService) PluginsBgpCommunityBulkPartialUpdateExecute(r ApiPluginsBgpCommunityBulkPartialUpdateRequest) ([]Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityRequest == nil {
		return localVarReturnValue, nil, reportError("communityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *PluginsAPIService
	communityRequest *[]CommunityRequest
}

func (r ApiPluginsBgpCommunityBulkUpdateRequest) CommunityRequest(communityRequest []CommunityRequest) ApiPluginsBgpCommunityBulkUpdateRequest {
	r.communityRequest = &communityRequest
	return r
}

func (r ApiPluginsBgpCommunityBulkUpdateRequest) Execute() ([]Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityBulkUpdateExecute(r)
}

/*
PluginsBgpCommunityBulkUpdate Method for PluginsBgpCommunityBulkUpdate

Put a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityBulkUpdate(ctx context.Context) ApiPluginsBgpCommunityBulkUpdateRequest {
	return ApiPluginsBgpCommunityBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Community
func (a *PluginsAPIService) PluginsBgpCommunityBulkUpdateExecute(r ApiPluginsBgpCommunityBulkUpdateRequest) ([]Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityRequest == nil {
		return localVarReturnValue, nil, reportError("communityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityCreateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	writableCommunityRequest *WritableCommunityRequest
}

func (r ApiPluginsBgpCommunityCreateRequest) WritableCommunityRequest(writableCommunityRequest WritableCommunityRequest) ApiPluginsBgpCommunityCreateRequest {
	r.writableCommunityRequest = &writableCommunityRequest
	return r
}

func (r ApiPluginsBgpCommunityCreateRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityCreateExecute(r)
}

/*
PluginsBgpCommunityCreate Method for PluginsBgpCommunityCreate

Post a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityCreate(ctx context.Context) ApiPluginsBgpCommunityCreateRequest {
	return ApiPluginsBgpCommunityCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityCreateExecute(r ApiPluginsBgpCommunityCreateRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCommunityRequest == nil {
		return localVarReturnValue, nil, reportError("writableCommunityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCommunityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityDestroyExecute(r)
}

/*
PluginsBgpCommunityDestroy Method for PluginsBgpCommunityDestroy

Delete a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityDestroy(ctx context.Context, id int32) ApiPluginsBgpCommunityDestroyRequest {
	return ApiPluginsBgpCommunityDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityDestroyExecute(r ApiPluginsBgpCommunityDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	q                 *string
	status            *PluginsBgpCommunityListStatusParameter
	statusN           *PluginsBgpCommunityListStatusParameter
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	updatedByRequest  *string
	value             *[]string
	valueEmpty        *bool
	valueIc           *[]string
	valueIe           *[]string
	valueIew          *[]string
	valueIsw          *[]string
	valueN            *[]string
	valueNic          *[]string
	valueNie          *[]string
	valueNiew         *[]string
	valueNisw         *[]string
}

func (r ApiPluginsBgpCommunityListRequest) Created(created []time.Time) ApiPluginsBgpCommunityListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpCommunityListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Description(description []string) ApiPluginsBgpCommunityListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpCommunityListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Id(id []int32) ApiPluginsBgpCommunityListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpCommunityListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdGt(idGt []int32) ApiPluginsBgpCommunityListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdGte(idGte []int32) ApiPluginsBgpCommunityListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdLt(idLt []int32) ApiPluginsBgpCommunityListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdLte(idLte []int32) ApiPluginsBgpCommunityListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdN(idN []int32) ApiPluginsBgpCommunityListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpCommunityListRequest) Limit(limit int32) ApiPluginsBgpCommunityListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpCommunityListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpCommunityListRequest) Offset(offset int32) ApiPluginsBgpCommunityListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpCommunityListRequest) Ordering(ordering string) ApiPluginsBgpCommunityListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpCommunityListRequest) Q(q string) ApiPluginsBgpCommunityListRequest {
	r.q = &q
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;deprecated&#x60; - Deprecated
func (r ApiPluginsBgpCommunityListRequest) Status(status PluginsBgpCommunityListStatusParameter) ApiPluginsBgpCommunityListRequest {
	r.status = &status
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;deprecated&#x60; - Deprecated
func (r ApiPluginsBgpCommunityListRequest) StatusN(statusN PluginsBgpCommunityListStatusParameter) ApiPluginsBgpCommunityListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Tag(tag []string) ApiPluginsBgpCommunityListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TagN(tagN []string) ApiPluginsBgpCommunityListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiPluginsBgpCommunityListRequest) Tenant(tenant []string) ApiPluginsBgpCommunityListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiPluginsBgpCommunityListRequest) TenantN(tenantN []string) ApiPluginsBgpCommunityListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TenantGroup(tenantGroup []string) ApiPluginsBgpCommunityListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TenantGroupN(tenantGroupN []string) ApiPluginsBgpCommunityListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TenantGroupId(tenantGroupId []string) ApiPluginsBgpCommunityListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiPluginsBgpCommunityListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiPluginsBgpCommunityListRequest) TenantId(tenantId []*int32) ApiPluginsBgpCommunityListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiPluginsBgpCommunityListRequest) TenantIdN(tenantIdN []*int32) ApiPluginsBgpCommunityListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpCommunityListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Value(value []string) ApiPluginsBgpCommunityListRequest {
	r.value = &value
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueEmpty(valueEmpty bool) ApiPluginsBgpCommunityListRequest {
	r.valueEmpty = &valueEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIc(valueIc []string) ApiPluginsBgpCommunityListRequest {
	r.valueIc = &valueIc
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIe(valueIe []string) ApiPluginsBgpCommunityListRequest {
	r.valueIe = &valueIe
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIew(valueIew []string) ApiPluginsBgpCommunityListRequest {
	r.valueIew = &valueIew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIsw(valueIsw []string) ApiPluginsBgpCommunityListRequest {
	r.valueIsw = &valueIsw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueN(valueN []string) ApiPluginsBgpCommunityListRequest {
	r.valueN = &valueN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNic(valueNic []string) ApiPluginsBgpCommunityListRequest {
	r.valueNic = &valueNic
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNie(valueNie []string) ApiPluginsBgpCommunityListRequest {
	r.valueNie = &valueNie
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNiew(valueNiew []string) ApiPluginsBgpCommunityListRequest {
	r.valueNiew = &valueNiew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNisw(valueNisw []string) ApiPluginsBgpCommunityListRequest {
	r.valueNisw = &valueNisw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Execute() (*PaginatedCommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListExecute(r)
}

/*
PluginsBgpCommunityList Method for PluginsBgpCommunityList

Get a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityList(ctx context.Context) ApiPluginsBgpCommunityListRequest {
	return ApiPluginsBgpCommunityListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListExecute(r ApiPluginsBgpCommunityListRequest) (*PaginatedCommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value", t, "multi")
		}
	}
	if r.valueEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value__empty", r.valueEmpty, "")
	}
	if r.valueIc != nil {
		t := *r.valueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", t, "multi")
		}
	}
	if r.valueIe != nil {
		t := *r.valueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", t, "multi")
		}
	}
	if r.valueIew != nil {
		t := *r.valueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", t, "multi")
		}
	}
	if r.valueIsw != nil {
		t := *r.valueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", t, "multi")
		}
	}
	if r.valueN != nil {
		t := *r.valueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", t, "multi")
		}
	}
	if r.valueNic != nil {
		t := *r.valueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", t, "multi")
		}
	}
	if r.valueNie != nil {
		t := *r.valueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", t, "multi")
		}
	}
	if r.valueNiew != nil {
		t := *r.valueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", t, "multi")
		}
	}
	if r.valueNisw != nil {
		t := *r.valueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListBulkDestroyRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	communityListRequest *[]CommunityListRequest
}

func (r ApiPluginsBgpCommunityListBulkDestroyRequest) CommunityListRequest(communityListRequest []CommunityListRequest) ApiPluginsBgpCommunityListBulkDestroyRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListBulkDestroyExecute(r)
}

/*
PluginsBgpCommunityListBulkDestroy Method for PluginsBgpCommunityListBulkDestroy

Delete a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListBulkDestroy(ctx context.Context) ApiPluginsBgpCommunityListBulkDestroyRequest {
	return ApiPluginsBgpCommunityListBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityListBulkDestroyExecute(r ApiPluginsBgpCommunityListBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListBulkPartialUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	communityListRequest *[]CommunityListRequest
}

func (r ApiPluginsBgpCommunityListBulkPartialUpdateRequest) CommunityListRequest(communityListRequest []CommunityListRequest) ApiPluginsBgpCommunityListBulkPartialUpdateRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListBulkPartialUpdateRequest) Execute() ([]CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListBulkPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityListBulkPartialUpdate Method for PluginsBgpCommunityListBulkPartialUpdate

Patch a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListBulkPartialUpdate(ctx context.Context) ApiPluginsBgpCommunityListBulkPartialUpdateRequest {
	return ApiPluginsBgpCommunityListBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListBulkPartialUpdateExecute(r ApiPluginsBgpCommunityListBulkPartialUpdateRequest) ([]CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListBulkUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	communityListRequest *[]CommunityListRequest
}

func (r ApiPluginsBgpCommunityListBulkUpdateRequest) CommunityListRequest(communityListRequest []CommunityListRequest) ApiPluginsBgpCommunityListBulkUpdateRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListBulkUpdateRequest) Execute() ([]CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListBulkUpdateExecute(r)
}

/*
PluginsBgpCommunityListBulkUpdate Method for PluginsBgpCommunityListBulkUpdate

Put a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListBulkUpdate(ctx context.Context) ApiPluginsBgpCommunityListBulkUpdateRequest {
	return ApiPluginsBgpCommunityListBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListBulkUpdateExecute(r ApiPluginsBgpCommunityListBulkUpdateRequest) ([]CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListCreateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	communityListRequest *CommunityListRequest
}

func (r ApiPluginsBgpCommunityListCreateRequest) CommunityListRequest(communityListRequest CommunityListRequest) ApiPluginsBgpCommunityListCreateRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListCreateRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListCreateExecute(r)
}

/*
PluginsBgpCommunityListCreate Method for PluginsBgpCommunityListCreate

Post a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListCreate(ctx context.Context) ApiPluginsBgpCommunityListCreateRequest {
	return ApiPluginsBgpCommunityListCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListCreateExecute(r ApiPluginsBgpCommunityListCreateRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListDestroyExecute(r)
}

/*
PluginsBgpCommunityListDestroy Method for PluginsBgpCommunityListDestroy

Delete a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListDestroy(ctx context.Context, id int32) ApiPluginsBgpCommunityListDestroyRequest {
	return ApiPluginsBgpCommunityListDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityListDestroyExecute(r ApiPluginsBgpCommunityListDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpCommunityListListRequest) Created(created []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpCommunityListListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Description(description []string) ApiPluginsBgpCommunityListListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpCommunityListListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Id(id []int32) ApiPluginsBgpCommunityListListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpCommunityListListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdGt(idGt []int32) ApiPluginsBgpCommunityListListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdGte(idGte []int32) ApiPluginsBgpCommunityListListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdLt(idLt []int32) ApiPluginsBgpCommunityListListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdLte(idLte []int32) ApiPluginsBgpCommunityListListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdN(idN []int32) ApiPluginsBgpCommunityListListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpCommunityListListRequest) Limit(limit int32) ApiPluginsBgpCommunityListListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpCommunityListListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Name(name []string) ApiPluginsBgpCommunityListListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpCommunityListListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIc(nameIc []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIe(nameIe []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIew(nameIew []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIsw(nameIsw []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameN(nameN []string) ApiPluginsBgpCommunityListListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNic(nameNic []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNie(nameNie []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNiew(nameNiew []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNisw(nameNisw []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpCommunityListListRequest) Offset(offset int32) ApiPluginsBgpCommunityListListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpCommunityListListRequest) Ordering(ordering string) ApiPluginsBgpCommunityListListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpCommunityListListRequest) Q(q string) ApiPluginsBgpCommunityListListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Tag(tag []string) ApiPluginsBgpCommunityListListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) TagN(tagN []string) ApiPluginsBgpCommunityListListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpCommunityListListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Execute() (*PaginatedCommunityListList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListListExecute(r)
}

/*
PluginsBgpCommunityListList Method for PluginsBgpCommunityListList

Get a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListListRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListList(ctx context.Context) ApiPluginsBgpCommunityListListRequest {
	return ApiPluginsBgpCommunityListListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCommunityListList
func (a *PluginsAPIService) PluginsBgpCommunityListListExecute(r ApiPluginsBgpCommunityListListRequest) (*PaginatedCommunityListList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCommunityListList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *PluginsAPIService
	id                          int32
	patchedCommunityListRequest *PatchedCommunityListRequest
}

func (r ApiPluginsBgpCommunityListPartialUpdateRequest) PatchedCommunityListRequest(patchedCommunityListRequest PatchedCommunityListRequest) ApiPluginsBgpCommunityListPartialUpdateRequest {
	r.patchedCommunityListRequest = &patchedCommunityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListPartialUpdateRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityListPartialUpdate Method for PluginsBgpCommunityListPartialUpdate

Patch a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListPartialUpdateRequest {
	return ApiPluginsBgpCommunityListPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListPartialUpdateExecute(r ApiPluginsBgpCommunityListPartialUpdateRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCommunityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListRetrieveRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRetrieveExecute(r)
}

/*
PluginsBgpCommunityListRetrieve Method for PluginsBgpCommunityListRetrieve

Get a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRetrieve(ctx context.Context, id int32) ApiPluginsBgpCommunityListRetrieveRequest {
	return ApiPluginsBgpCommunityListRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListRetrieveExecute(r ApiPluginsBgpCommunityListRetrieveRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	communityListRuleRequest *[]CommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleBulkDestroyRequest) CommunityListRuleRequest(communityListRuleRequest []CommunityListRuleRequest) ApiPluginsBgpCommunityListRuleBulkDestroyRequest {
	r.communityListRuleRequest = &communityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleBulkDestroyExecute(r)
}

/*
PluginsBgpCommunityListRuleBulkDestroy Method for PluginsBgpCommunityListRuleBulkDestroy

Delete a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleBulkDestroy(ctx context.Context) ApiPluginsBgpCommunityListRuleBulkDestroyRequest {
	return ApiPluginsBgpCommunityListRuleBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityListRuleBulkDestroyExecute(r ApiPluginsBgpCommunityListRuleBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRuleRequest == nil {
		return nil, reportError("communityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	communityListRuleRequest *[]CommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest) CommunityListRuleRequest(communityListRuleRequest []CommunityListRuleRequest) ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest {
	r.communityListRuleRequest = &communityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest) Execute() ([]CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleBulkPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityListRuleBulkPartialUpdate Method for PluginsBgpCommunityListRuleBulkPartialUpdate

Patch a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleBulkPartialUpdate(ctx context.Context) ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest {
	return ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleBulkPartialUpdateExecute(r ApiPluginsBgpCommunityListRuleBulkPartialUpdateRequest) ([]CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	communityListRuleRequest *[]CommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleBulkUpdateRequest) CommunityListRuleRequest(communityListRuleRequest []CommunityListRuleRequest) ApiPluginsBgpCommunityListRuleBulkUpdateRequest {
	r.communityListRuleRequest = &communityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleBulkUpdateRequest) Execute() ([]CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleBulkUpdateExecute(r)
}

/*
PluginsBgpCommunityListRuleBulkUpdate Method for PluginsBgpCommunityListRuleBulkUpdate

Put a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleBulkUpdate(ctx context.Context) ApiPluginsBgpCommunityListRuleBulkUpdateRequest {
	return ApiPluginsBgpCommunityListRuleBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleBulkUpdateExecute(r ApiPluginsBgpCommunityListRuleBulkUpdateRequest) ([]CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleCreateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	communityListRuleRequest *CommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleCreateRequest) CommunityListRuleRequest(communityListRuleRequest CommunityListRuleRequest) ApiPluginsBgpCommunityListRuleCreateRequest {
	r.communityListRuleRequest = &communityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleCreateRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleCreateExecute(r)
}

/*
PluginsBgpCommunityListRuleCreate Method for PluginsBgpCommunityListRuleCreate

Post a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleCreate(ctx context.Context) ApiPluginsBgpCommunityListRuleCreateRequest {
	return ApiPluginsBgpCommunityListRuleCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleCreateExecute(r ApiPluginsBgpCommunityListRuleCreateRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListRuleDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleDestroyExecute(r)
}

/*
PluginsBgpCommunityListRuleDestroy Method for PluginsBgpCommunityListRuleDestroy

Delete a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRuleDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleDestroy(ctx context.Context, id int32) ApiPluginsBgpCommunityListRuleDestroyRequest {
	return ApiPluginsBgpCommunityListRuleDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityListRuleDestroyExecute(r ApiPluginsBgpCommunityListRuleDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	action            *PluginsBgpCommunityListRuleListActionParameter
	actionN           *PluginsBgpCommunityListRuleListActionParameter
	communityList     *int32
	communityListN    *int32
	communityListId   *int32
	communityListIdN  *int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

// * &#x60;permit&#x60; - Permit * &#x60;deny&#x60; - Deny
func (r ApiPluginsBgpCommunityListRuleListRequest) Action(action PluginsBgpCommunityListRuleListActionParameter) ApiPluginsBgpCommunityListRuleListRequest {
	r.action = &action
	return r
}

// * &#x60;permit&#x60; - Permit * &#x60;deny&#x60; - Deny
func (r ApiPluginsBgpCommunityListRuleListRequest) ActionN(actionN PluginsBgpCommunityListRuleListActionParameter) ApiPluginsBgpCommunityListRuleListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityList(communityList int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityList = &communityList
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityListN(communityListN int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityListN = &communityListN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityListId(communityListId int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityListId = &communityListId
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityListIdN(communityListIdN int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityListIdN = &communityListIdN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Created(created []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Id(id []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpCommunityListRuleListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdGt(idGt []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdGte(idGte []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdLt(idLt []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdLte(idLte []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdN(idN []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpCommunityListRuleListRequest) Limit(limit int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpCommunityListRuleListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpCommunityListRuleListRequest) Offset(offset int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpCommunityListRuleListRequest) Ordering(ordering string) ApiPluginsBgpCommunityListRuleListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpCommunityListRuleListRequest) Q(q string) ApiPluginsBgpCommunityListRuleListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Tag(tag []string) ApiPluginsBgpCommunityListRuleListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) TagN(tagN []string) ApiPluginsBgpCommunityListRuleListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpCommunityListRuleListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Execute() (*PaginatedCommunityListRuleList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleListExecute(r)
}

/*
PluginsBgpCommunityListRuleList Method for PluginsBgpCommunityListRuleList

Get a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleListRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleList(ctx context.Context) ApiPluginsBgpCommunityListRuleListRequest {
	return ApiPluginsBgpCommunityListRuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCommunityListRuleList
func (a *PluginsAPIService) PluginsBgpCommunityListRuleListExecute(r ApiPluginsBgpCommunityListRuleListRequest) (*PaginatedCommunityListRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCommunityListRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.communityList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list", r.communityList, "")
	}
	if r.communityListN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list__n", r.communityListN, "")
	}
	if r.communityListId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list_id", r.communityListId, "")
	}
	if r.communityListIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list_id__n", r.communityListIdN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRulePartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *PluginsAPIService
	id                              int32
	patchedCommunityListRuleRequest *PatchedCommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRulePartialUpdateRequest) PatchedCommunityListRuleRequest(patchedCommunityListRuleRequest PatchedCommunityListRuleRequest) ApiPluginsBgpCommunityListRulePartialUpdateRequest {
	r.patchedCommunityListRuleRequest = &patchedCommunityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRulePartialUpdateRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRulePartialUpdateExecute(r)
}

/*
PluginsBgpCommunityListRulePartialUpdate Method for PluginsBgpCommunityListRulePartialUpdate

Patch a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRulePartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRulePartialUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListRulePartialUpdateRequest {
	return ApiPluginsBgpCommunityListRulePartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRulePartialUpdateExecute(r ApiPluginsBgpCommunityListRulePartialUpdateRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRulePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCommunityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListRuleRetrieveRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleRetrieveExecute(r)
}

/*
PluginsBgpCommunityListRuleRetrieve Method for PluginsBgpCommunityListRuleRetrieve

Get a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRuleRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleRetrieve(ctx context.Context, id int32) ApiPluginsBgpCommunityListRuleRetrieveRequest {
	return ApiPluginsBgpCommunityListRuleRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleRetrieveExecute(r ApiPluginsBgpCommunityListRuleRetrieveRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	communityListRuleRequest *CommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleUpdateRequest) CommunityListRuleRequest(communityListRuleRequest CommunityListRuleRequest) ApiPluginsBgpCommunityListRuleUpdateRequest {
	r.communityListRuleRequest = &communityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleUpdateRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleUpdateExecute(r)
}

/*
PluginsBgpCommunityListRuleUpdate Method for PluginsBgpCommunityListRuleUpdate

Put a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRuleUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListRuleUpdateRequest {
	return ApiPluginsBgpCommunityListRuleUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleUpdateExecute(r ApiPluginsBgpCommunityListRuleUpdateRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	id                   int32
	communityListRequest *CommunityListRequest
}

func (r ApiPluginsBgpCommunityListUpdateRequest) CommunityListRequest(communityListRequest CommunityListRequest) ApiPluginsBgpCommunityListUpdateRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListUpdateRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListUpdateExecute(r)
}

/*
PluginsBgpCommunityListUpdate Method for PluginsBgpCommunityListUpdate

Put a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListUpdateRequest {
	return ApiPluginsBgpCommunityListUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListUpdateExecute(r ApiPluginsBgpCommunityListUpdateRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *PluginsAPIService
	id                              int32
	patchedWritableCommunityRequest *PatchedWritableCommunityRequest
}

func (r ApiPluginsBgpCommunityPartialUpdateRequest) PatchedWritableCommunityRequest(patchedWritableCommunityRequest PatchedWritableCommunityRequest) ApiPluginsBgpCommunityPartialUpdateRequest {
	r.patchedWritableCommunityRequest = &patchedWritableCommunityRequest
	return r
}

func (r ApiPluginsBgpCommunityPartialUpdateRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityPartialUpdate Method for PluginsBgpCommunityPartialUpdate

Patch a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityPartialUpdateRequest {
	return ApiPluginsBgpCommunityPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityPartialUpdateExecute(r ApiPluginsBgpCommunityPartialUpdateRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCommunityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityRetrieveRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityRetrieveExecute(r)
}

/*
PluginsBgpCommunityRetrieve Method for PluginsBgpCommunityRetrieve

Get a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityRetrieve(ctx context.Context, id int32) ApiPluginsBgpCommunityRetrieveRequest {
	return ApiPluginsBgpCommunityRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityRetrieveExecute(r ApiPluginsBgpCommunityRetrieveRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	writableCommunityRequest *WritableCommunityRequest
}

func (r ApiPluginsBgpCommunityUpdateRequest) WritableCommunityRequest(writableCommunityRequest WritableCommunityRequest) ApiPluginsBgpCommunityUpdateRequest {
	r.writableCommunityRequest = &writableCommunityRequest
	return r
}

func (r ApiPluginsBgpCommunityUpdateRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityUpdateExecute(r)
}

/*
PluginsBgpCommunityUpdate Method for PluginsBgpCommunityUpdate

Put a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityUpdateRequest {
	return ApiPluginsBgpCommunityUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityUpdateExecute(r ApiPluginsBgpCommunityUpdateRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCommunityRequest == nil {
		return localVarReturnValue, nil, reportError("writableCommunityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCommunityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupBulkDestroyRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *[]BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupBulkDestroyRequest) BGPPeerGroupRequest(bGPPeerGroupRequest []BGPPeerGroupRequest) ApiPluginsBgpPeerGroupBulkDestroyRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupBulkDestroyExecute(r)
}

/*
PluginsBgpPeerGroupBulkDestroy Method for PluginsBgpPeerGroupBulkDestroy

Delete a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupBulkDestroy(ctx context.Context) ApiPluginsBgpPeerGroupBulkDestroyRequest {
	return ApiPluginsBgpPeerGroupBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPeerGroupBulkDestroyExecute(r ApiPluginsBgpPeerGroupBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupBulkPartialUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *[]BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupBulkPartialUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest []BGPPeerGroupRequest) ApiPluginsBgpPeerGroupBulkPartialUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupBulkPartialUpdateRequest) Execute() ([]BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupBulkPartialUpdateExecute(r)
}

/*
PluginsBgpPeerGroupBulkPartialUpdate Method for PluginsBgpPeerGroupBulkPartialUpdate

Patch a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupBulkPartialUpdate(ctx context.Context) ApiPluginsBgpPeerGroupBulkPartialUpdateRequest {
	return ApiPluginsBgpPeerGroupBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupBulkPartialUpdateExecute(r ApiPluginsBgpPeerGroupBulkPartialUpdateRequest) ([]BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupBulkUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *[]BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupBulkUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest []BGPPeerGroupRequest) ApiPluginsBgpPeerGroupBulkUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupBulkUpdateRequest) Execute() ([]BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupBulkUpdateExecute(r)
}

/*
PluginsBgpPeerGroupBulkUpdate Method for PluginsBgpPeerGroupBulkUpdate

Put a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupBulkUpdate(ctx context.Context) ApiPluginsBgpPeerGroupBulkUpdateRequest {
	return ApiPluginsBgpPeerGroupBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupBulkUpdateExecute(r ApiPluginsBgpPeerGroupBulkUpdateRequest) ([]BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupCreateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupCreateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpPeerGroupCreateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupCreateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupCreateExecute(r)
}

/*
PluginsBgpPeerGroupCreate Method for PluginsBgpPeerGroupCreate

Post a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupCreate(ctx context.Context) ApiPluginsBgpPeerGroupCreateRequest {
	return ApiPluginsBgpPeerGroupCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupCreateExecute(r ApiPluginsBgpPeerGroupCreateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPeerGroupDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupDestroyExecute(r)
}

/*
PluginsBgpPeerGroupDestroy Method for PluginsBgpPeerGroupDestroy

Delete a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupDestroy(ctx context.Context, id int32) ApiPluginsBgpPeerGroupDestroyRequest {
	return ApiPluginsBgpPeerGroupDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPeerGroupDestroyExecute(r ApiPluginsBgpPeerGroupDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpPeerGroupListRequest) Created(created []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpPeerGroupListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Description(description []string) ApiPluginsBgpPeerGroupListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Id(id []int32) ApiPluginsBgpPeerGroupListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpPeerGroupListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdGt(idGt []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdGte(idGte []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdLt(idLt []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdLte(idLte []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdN(idN []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpPeerGroupListRequest) Limit(limit int32) ApiPluginsBgpPeerGroupListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpPeerGroupListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Name(name []string) ApiPluginsBgpPeerGroupListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpPeerGroupListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIc(nameIc []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIe(nameIe []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIew(nameIew []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIsw(nameIsw []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameN(nameN []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNic(nameNic []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNie(nameNie []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNiew(nameNiew []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNisw(nameNisw []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpPeerGroupListRequest) Offset(offset int32) ApiPluginsBgpPeerGroupListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpPeerGroupListRequest) Ordering(ordering string) ApiPluginsBgpPeerGroupListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpPeerGroupListRequest) Q(q string) ApiPluginsBgpPeerGroupListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Tag(tag []string) ApiPluginsBgpPeerGroupListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) TagN(tagN []string) ApiPluginsBgpPeerGroupListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpPeerGroupListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Execute() (*PaginatedBGPPeerGroupList, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupListExecute(r)
}

/*
PluginsBgpPeerGroupList Method for PluginsBgpPeerGroupList

Get a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupListRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupList(ctx context.Context) ApiPluginsBgpPeerGroupListRequest {
	return ApiPluginsBgpPeerGroupListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPPeerGroupList
func (a *PluginsAPIService) PluginsBgpPeerGroupListExecute(r ApiPluginsBgpPeerGroupListRequest) (*PaginatedBGPPeerGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPPeerGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *PluginsAPIService
	id                         int32
	patchedBGPPeerGroupRequest *PatchedBGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupPartialUpdateRequest) PatchedBGPPeerGroupRequest(patchedBGPPeerGroupRequest PatchedBGPPeerGroupRequest) ApiPluginsBgpPeerGroupPartialUpdateRequest {
	r.patchedBGPPeerGroupRequest = &patchedBGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupPartialUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupPartialUpdateExecute(r)
}

/*
PluginsBgpPeerGroupPartialUpdate Method for PluginsBgpPeerGroupPartialUpdate

Patch a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpPeerGroupPartialUpdateRequest {
	return ApiPluginsBgpPeerGroupPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupPartialUpdateExecute(r ApiPluginsBgpPeerGroupPartialUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPeerGroupRetrieveRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupRetrieveExecute(r)
}

/*
PluginsBgpPeerGroupRetrieve Method for PluginsBgpPeerGroupRetrieve

Get a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupRetrieve(ctx context.Context, id int32) ApiPluginsBgpPeerGroupRetrieveRequest {
	return ApiPluginsBgpPeerGroupRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupRetrieveExecute(r ApiPluginsBgpPeerGroupRetrieveRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	id                  int32
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpPeerGroupUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupUpdateExecute(r)
}

/*
PluginsBgpPeerGroupUpdate Method for PluginsBgpPeerGroupUpdate

Put a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupUpdate(ctx context.Context, id int32) ApiPluginsBgpPeerGroupUpdateRequest {
	return ApiPluginsBgpPeerGroupUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupUpdateExecute(r ApiPluginsBgpPeerGroupUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	prefixListRequest *[]PrefixListRequest
}

func (r ApiPluginsBgpPrefixListBulkDestroyRequest) PrefixListRequest(prefixListRequest []PrefixListRequest) ApiPluginsBgpPrefixListBulkDestroyRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListBulkDestroyExecute(r)
}

/*
PluginsBgpPrefixListBulkDestroy Method for PluginsBgpPrefixListBulkDestroy

Delete a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListBulkDestroy(ctx context.Context) ApiPluginsBgpPrefixListBulkDestroyRequest {
	return ApiPluginsBgpPrefixListBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPrefixListBulkDestroyExecute(r ApiPluginsBgpPrefixListBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	prefixListRequest *[]PrefixListRequest
}

func (r ApiPluginsBgpPrefixListBulkPartialUpdateRequest) PrefixListRequest(prefixListRequest []PrefixListRequest) ApiPluginsBgpPrefixListBulkPartialUpdateRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListBulkPartialUpdateRequest) Execute() ([]PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListBulkPartialUpdateExecute(r)
}

/*
PluginsBgpPrefixListBulkPartialUpdate Method for PluginsBgpPrefixListBulkPartialUpdate

Patch a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListBulkPartialUpdate(ctx context.Context) ApiPluginsBgpPrefixListBulkPartialUpdateRequest {
	return ApiPluginsBgpPrefixListBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListBulkPartialUpdateExecute(r ApiPluginsBgpPrefixListBulkPartialUpdateRequest) ([]PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	prefixListRequest *[]PrefixListRequest
}

func (r ApiPluginsBgpPrefixListBulkUpdateRequest) PrefixListRequest(prefixListRequest []PrefixListRequest) ApiPluginsBgpPrefixListBulkUpdateRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListBulkUpdateRequest) Execute() ([]PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListBulkUpdateExecute(r)
}

/*
PluginsBgpPrefixListBulkUpdate Method for PluginsBgpPrefixListBulkUpdate

Put a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListBulkUpdate(ctx context.Context) ApiPluginsBgpPrefixListBulkUpdateRequest {
	return ApiPluginsBgpPrefixListBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListBulkUpdateExecute(r ApiPluginsBgpPrefixListBulkUpdateRequest) ([]PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListCreateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	prefixListRequest *PrefixListRequest
}

func (r ApiPluginsBgpPrefixListCreateRequest) PrefixListRequest(prefixListRequest PrefixListRequest) ApiPluginsBgpPrefixListCreateRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListCreateRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListCreateExecute(r)
}

/*
PluginsBgpPrefixListCreate Method for PluginsBgpPrefixListCreate

Post a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListCreate(ctx context.Context) ApiPluginsBgpPrefixListCreateRequest {
	return ApiPluginsBgpPrefixListCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListCreateExecute(r ApiPluginsBgpPrefixListCreateRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListDestroyExecute(r)
}

/*
PluginsBgpPrefixListDestroy Method for PluginsBgpPrefixListDestroy

Delete a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListDestroy(ctx context.Context, id int32) ApiPluginsBgpPrefixListDestroyRequest {
	return ApiPluginsBgpPrefixListDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPrefixListDestroyExecute(r ApiPluginsBgpPrefixListDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	family            *PluginsBgpPrefixListListFamilyParameter
	familyN           *PluginsBgpPrefixListListFamilyParameter
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpPrefixListListRequest) Created(created []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpPrefixListListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Description(description []string) ApiPluginsBgpPrefixListListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpPrefixListListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// * &#x60;ipv4&#x60; - IPv4 * &#x60;ipv6&#x60; - IPv6
func (r ApiPluginsBgpPrefixListListRequest) Family(family PluginsBgpPrefixListListFamilyParameter) ApiPluginsBgpPrefixListListRequest {
	r.family = &family
	return r
}

// * &#x60;ipv4&#x60; - IPv4 * &#x60;ipv6&#x60; - IPv6
func (r ApiPluginsBgpPrefixListListRequest) FamilyN(familyN PluginsBgpPrefixListListFamilyParameter) ApiPluginsBgpPrefixListListRequest {
	r.familyN = &familyN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Id(id []int32) ApiPluginsBgpPrefixListListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpPrefixListListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdGt(idGt []int32) ApiPluginsBgpPrefixListListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdGte(idGte []int32) ApiPluginsBgpPrefixListListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdLt(idLt []int32) ApiPluginsBgpPrefixListListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdLte(idLte []int32) ApiPluginsBgpPrefixListListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdN(idN []int32) ApiPluginsBgpPrefixListListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpPrefixListListRequest) Limit(limit int32) ApiPluginsBgpPrefixListListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpPrefixListListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Name(name []string) ApiPluginsBgpPrefixListListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpPrefixListListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIc(nameIc []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIe(nameIe []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIew(nameIew []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIsw(nameIsw []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameN(nameN []string) ApiPluginsBgpPrefixListListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNic(nameNic []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNie(nameNie []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNiew(nameNiew []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNisw(nameNisw []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpPrefixListListRequest) Offset(offset int32) ApiPluginsBgpPrefixListListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpPrefixListListRequest) Ordering(ordering string) ApiPluginsBgpPrefixListListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpPrefixListListRequest) Q(q string) ApiPluginsBgpPrefixListListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Tag(tag []string) ApiPluginsBgpPrefixListListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) TagN(tagN []string) ApiPluginsBgpPrefixListListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpPrefixListListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Execute() (*PaginatedPrefixListList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListListExecute(r)
}

/*
PluginsBgpPrefixListList Method for PluginsBgpPrefixListList

Get a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListListRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListList(ctx context.Context) ApiPluginsBgpPrefixListListRequest {
	return ApiPluginsBgpPrefixListListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPrefixListList
func (a *PluginsAPIService) PluginsBgpPrefixListListExecute(r ApiPluginsBgpPrefixListListRequest) (*PaginatedPrefixListList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPrefixListList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.family != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "family", r.family, "")
	}
	if r.familyN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "family__n", r.familyN, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	patchedPrefixListRequest *PatchedPrefixListRequest
}

func (r ApiPluginsBgpPrefixListPartialUpdateRequest) PatchedPrefixListRequest(patchedPrefixListRequest PatchedPrefixListRequest) ApiPluginsBgpPrefixListPartialUpdateRequest {
	r.patchedPrefixListRequest = &patchedPrefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListPartialUpdateRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListPartialUpdateExecute(r)
}

/*
PluginsBgpPrefixListPartialUpdate Method for PluginsBgpPrefixListPartialUpdate

Patch a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListPartialUpdateRequest {
	return ApiPluginsBgpPrefixListPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListPartialUpdateExecute(r ApiPluginsBgpPrefixListPartialUpdateRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedPrefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListRetrieveRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRetrieveExecute(r)
}

/*
PluginsBgpPrefixListRetrieve Method for PluginsBgpPrefixListRetrieve

Get a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRetrieve(ctx context.Context, id int32) ApiPluginsBgpPrefixListRetrieveRequest {
	return ApiPluginsBgpPrefixListRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListRetrieveExecute(r ApiPluginsBgpPrefixListRetrieveRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleBulkDestroyRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	prefixListRuleRequest *[]PrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleBulkDestroyRequest) PrefixListRuleRequest(prefixListRuleRequest []PrefixListRuleRequest) ApiPluginsBgpPrefixListRuleBulkDestroyRequest {
	r.prefixListRuleRequest = &prefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleBulkDestroyExecute(r)
}

/*
PluginsBgpPrefixListRuleBulkDestroy Method for PluginsBgpPrefixListRuleBulkDestroy

Delete a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleBulkDestroy(ctx context.Context) ApiPluginsBgpPrefixListRuleBulkDestroyRequest {
	return ApiPluginsBgpPrefixListRuleBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPrefixListRuleBulkDestroyExecute(r ApiPluginsBgpPrefixListRuleBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRuleRequest == nil {
		return nil, reportError("prefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	prefixListRuleRequest *[]PrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest) PrefixListRuleRequest(prefixListRuleRequest []PrefixListRuleRequest) ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest {
	r.prefixListRuleRequest = &prefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest) Execute() ([]PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleBulkPartialUpdateExecute(r)
}

/*
PluginsBgpPrefixListRuleBulkPartialUpdate Method for PluginsBgpPrefixListRuleBulkPartialUpdate

Patch a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleBulkPartialUpdate(ctx context.Context) ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest {
	return ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleBulkPartialUpdateExecute(r ApiPluginsBgpPrefixListRuleBulkPartialUpdateRequest) ([]PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleBulkUpdateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	prefixListRuleRequest *[]PrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleBulkUpdateRequest) PrefixListRuleRequest(prefixListRuleRequest []PrefixListRuleRequest) ApiPluginsBgpPrefixListRuleBulkUpdateRequest {
	r.prefixListRuleRequest = &prefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleBulkUpdateRequest) Execute() ([]PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleBulkUpdateExecute(r)
}

/*
PluginsBgpPrefixListRuleBulkUpdate Method for PluginsBgpPrefixListRuleBulkUpdate

Put a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleBulkUpdate(ctx context.Context) ApiPluginsBgpPrefixListRuleBulkUpdateRequest {
	return ApiPluginsBgpPrefixListRuleBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleBulkUpdateExecute(r ApiPluginsBgpPrefixListRuleBulkUpdateRequest) ([]PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleCreateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	prefixListRuleRequest *PrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleCreateRequest) PrefixListRuleRequest(prefixListRuleRequest PrefixListRuleRequest) ApiPluginsBgpPrefixListRuleCreateRequest {
	r.prefixListRuleRequest = &prefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleCreateRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleCreateExecute(r)
}

/*
PluginsBgpPrefixListRuleCreate Method for PluginsBgpPrefixListRuleCreate

Post a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleCreate(ctx context.Context) ApiPluginsBgpPrefixListRuleCreateRequest {
	return ApiPluginsBgpPrefixListRuleCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleCreateExecute(r ApiPluginsBgpPrefixListRuleCreateRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListRuleDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleDestroyExecute(r)
}

/*
PluginsBgpPrefixListRuleDestroy Method for PluginsBgpPrefixListRuleDestroy

Delete a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRuleDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleDestroy(ctx context.Context, id int32) ApiPluginsBgpPrefixListRuleDestroyRequest {
	return ApiPluginsBgpPrefixListRuleDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPrefixListRuleDestroyExecute(r ApiPluginsBgpPrefixListRuleDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	action            *PluginsBgpCommunityListRuleListActionParameter
	actionN           *PluginsBgpCommunityListRuleListActionParameter
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	ge                *[]int32
	geEmpty           *bool
	geGt              *[]int32
	geGte             *[]int32
	geLt              *[]int32
	geLte             *[]int32
	geN               *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	index             *[]int32
	indexEmpty        *bool
	indexGt           *[]int32
	indexGte          *[]int32
	indexLt           *[]int32
	indexLte          *[]int32
	indexN            *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	le                *[]int32
	leEmpty           *bool
	leGt              *[]int32
	leGte             *[]int32
	leLt              *[]int32
	leLte             *[]int32
	leN               *[]int32
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	prefixList        *int32
	prefixListN       *int32
	prefixListId      *int32
	prefixListIdN     *int32
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

// * &#x60;permit&#x60; - Permit * &#x60;deny&#x60; - Deny
func (r ApiPluginsBgpPrefixListRuleListRequest) Action(action PluginsBgpCommunityListRuleListActionParameter) ApiPluginsBgpPrefixListRuleListRequest {
	r.action = &action
	return r
}

// * &#x60;permit&#x60; - Permit * &#x60;deny&#x60; - Deny
func (r ApiPluginsBgpPrefixListRuleListRequest) ActionN(actionN PluginsBgpCommunityListRuleListActionParameter) ApiPluginsBgpPrefixListRuleListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Created(created []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Ge(ge []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.ge = &ge
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeEmpty(geEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.geEmpty = &geEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeGt(geGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geGt = &geGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeGte(geGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geGte = &geGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeLt(geLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geLt = &geLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeLte(geLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geLte = &geLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeN(geN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geN = &geN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Id(id []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdGt(idGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdGte(idGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdLt(idLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdLte(idLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdN(idN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Index(index []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.index = &index
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexEmpty(indexEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexEmpty = &indexEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexGt(indexGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexGt = &indexGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexGte(indexGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexGte = &indexGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexLt(indexLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexLt = &indexLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexLte(indexLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexLte = &indexLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexN(indexN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexN = &indexN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Le(le []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.le = &le
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeEmpty(leEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.leEmpty = &leEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeGt(leGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leGt = &leGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeGte(leGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leGte = &leGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeLt(leLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leLt = &leLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeLte(leLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leLte = &leLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeN(leN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leN = &leN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpPrefixListRuleListRequest) Limit(limit int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpPrefixListRuleListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpPrefixListRuleListRequest) Offset(offset int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpPrefixListRuleListRequest) Ordering(ordering string) ApiPluginsBgpPrefixListRuleListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixList(prefixList int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixList = &prefixList
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixListN(prefixListN int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixListN = &prefixListN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixListId(prefixListId int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixListId = &prefixListId
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixListIdN(prefixListIdN int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixListIdN = &prefixListIdN
	return r
}

// Search
func (r ApiPluginsBgpPrefixListRuleListRequest) Q(q string) ApiPluginsBgpPrefixListRuleListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Tag(tag []string) ApiPluginsBgpPrefixListRuleListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) TagN(tagN []string) ApiPluginsBgpPrefixListRuleListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpPrefixListRuleListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Execute() (*PaginatedPrefixListRuleList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleListExecute(r)
}

/*
PluginsBgpPrefixListRuleList Method for PluginsBgpPrefixListRuleList

Get a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleListRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleList(ctx context.Context) ApiPluginsBgpPrefixListRuleListRequest {
	return ApiPluginsBgpPrefixListRuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPrefixListRuleList
func (a *PluginsAPIService) PluginsBgpPrefixListRuleListExecute(r ApiPluginsBgpPrefixListRuleListRequest) (*PaginatedPrefixListRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPrefixListRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.ge != nil {
		t := *r.ge
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge", t, "multi")
		}
	}
	if r.geEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ge__empty", r.geEmpty, "")
	}
	if r.geGt != nil {
		t := *r.geGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gt", t, "multi")
		}
	}
	if r.geGte != nil {
		t := *r.geGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gte", t, "multi")
		}
	}
	if r.geLt != nil {
		t := *r.geLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lt", t, "multi")
		}
	}
	if r.geLte != nil {
		t := *r.geLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lte", t, "multi")
		}
	}
	if r.geN != nil {
		t := *r.geN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.index != nil {
		t := *r.index
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index", t, "multi")
		}
	}
	if r.indexEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "index__empty", r.indexEmpty, "")
	}
	if r.indexGt != nil {
		t := *r.indexGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", t, "multi")
		}
	}
	if r.indexGte != nil {
		t := *r.indexGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", t, "multi")
		}
	}
	if r.indexLt != nil {
		t := *r.indexLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", t, "multi")
		}
	}
	if r.indexLte != nil {
		t := *r.indexLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", t, "multi")
		}
	}
	if r.indexN != nil {
		t := *r.indexN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.le != nil {
		t := *r.le
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le", t, "multi")
		}
	}
	if r.leEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "le__empty", r.leEmpty, "")
	}
	if r.leGt != nil {
		t := *r.leGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__gt", t, "multi")
		}
	}
	if r.leGte != nil {
		t := *r.leGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__gte", t, "multi")
		}
	}
	if r.leLt != nil {
		t := *r.leLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__lt", t, "multi")
		}
	}
	if r.leLte != nil {
		t := *r.leLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__lte", t, "multi")
		}
	}
	if r.leN != nil {
		t := *r.leN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.prefixList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list", r.prefixList, "")
	}
	if r.prefixListN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list__n", r.prefixListN, "")
	}
	if r.prefixListId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list_id", r.prefixListId, "")
	}
	if r.prefixListIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list_id__n", r.prefixListIdN, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRulePartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *PluginsAPIService
	id                           int32
	patchedPrefixListRuleRequest *PatchedPrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRulePartialUpdateRequest) PatchedPrefixListRuleRequest(patchedPrefixListRuleRequest PatchedPrefixListRuleRequest) ApiPluginsBgpPrefixListRulePartialUpdateRequest {
	r.patchedPrefixListRuleRequest = &patchedPrefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRulePartialUpdateRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRulePartialUpdateExecute(r)
}

/*
PluginsBgpPrefixListRulePartialUpdate Method for PluginsBgpPrefixListRulePartialUpdate

Patch a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRulePartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRulePartialUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListRulePartialUpdateRequest {
	return ApiPluginsBgpPrefixListRulePartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRulePartialUpdateExecute(r ApiPluginsBgpPrefixListRulePartialUpdateRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRulePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedPrefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListRuleRetrieveRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleRetrieveExecute(r)
}

/*
PluginsBgpPrefixListRuleRetrieve Method for PluginsBgpPrefixListRuleRetrieve

Get a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRuleRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleRetrieve(ctx context.Context, id int32) ApiPluginsBgpPrefixListRuleRetrieveRequest {
	return ApiPluginsBgpPrefixListRuleRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleRetrieveExecute(r ApiPluginsBgpPrefixListRuleRetrieveRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleUpdateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	id                    int32
	prefixListRuleRequest *PrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleUpdateRequest) PrefixListRuleRequest(prefixListRuleRequest PrefixListRuleRequest) ApiPluginsBgpPrefixListRuleUpdateRequest {
	r.prefixListRuleRequest = &prefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleUpdateRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleUpdateExecute(r)
}

/*
PluginsBgpPrefixListRuleUpdate Method for PluginsBgpPrefixListRuleUpdate

Put a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRuleUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListRuleUpdateRequest {
	return ApiPluginsBgpPrefixListRuleUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleUpdateExecute(r ApiPluginsBgpPrefixListRuleUpdateRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	id                int32
	prefixListRequest *PrefixListRequest
}

func (r ApiPluginsBgpPrefixListUpdateRequest) PrefixListRequest(prefixListRequest PrefixListRequest) ApiPluginsBgpPrefixListUpdateRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListUpdateRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListUpdateExecute(r)
}

/*
PluginsBgpPrefixListUpdate Method for PluginsBgpPrefixListUpdate

Put a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListUpdateRequest {
	return ApiPluginsBgpPrefixListUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListUpdateExecute(r ApiPluginsBgpPrefixListUpdateRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyBulkDestroyRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	routingPolicyRequest *[]RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyBulkDestroyRequest) RoutingPolicyRequest(routingPolicyRequest []RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyBulkDestroyRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyBulkDestroyExecute(r)
}

/*
PluginsBgpRoutingPolicyBulkDestroy Method for PluginsBgpRoutingPolicyBulkDestroy

Delete a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyBulkDestroy(ctx context.Context) ApiPluginsBgpRoutingPolicyBulkDestroyRequest {
	return ApiPluginsBgpRoutingPolicyBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpRoutingPolicyBulkDestroyExecute(r ApiPluginsBgpRoutingPolicyBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	routingPolicyRequest *[]RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest) RoutingPolicyRequest(routingPolicyRequest []RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest) Execute() ([]RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyBulkPartialUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyBulkPartialUpdate Method for PluginsBgpRoutingPolicyBulkPartialUpdate

Patch a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyBulkPartialUpdate(ctx context.Context) ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest {
	return ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyBulkPartialUpdateExecute(r ApiPluginsBgpRoutingPolicyBulkPartialUpdateRequest) ([]RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyBulkUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	routingPolicyRequest *[]RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyBulkUpdateRequest) RoutingPolicyRequest(routingPolicyRequest []RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyBulkUpdateRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyBulkUpdateRequest) Execute() ([]RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyBulkUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyBulkUpdate Method for PluginsBgpRoutingPolicyBulkUpdate

Put a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyBulkUpdate(ctx context.Context) ApiPluginsBgpRoutingPolicyBulkUpdateRequest {
	return ApiPluginsBgpRoutingPolicyBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyBulkUpdateExecute(r ApiPluginsBgpRoutingPolicyBulkUpdateRequest) ([]RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyCreateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	routingPolicyRequest *RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyCreateRequest) RoutingPolicyRequest(routingPolicyRequest RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyCreateRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyCreateRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyCreateExecute(r)
}

/*
PluginsBgpRoutingPolicyCreate Method for PluginsBgpRoutingPolicyCreate

Post a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyCreate(ctx context.Context) ApiPluginsBgpRoutingPolicyCreateRequest {
	return ApiPluginsBgpRoutingPolicyCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyCreateExecute(r ApiPluginsBgpRoutingPolicyCreateRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyDestroyExecute(r)
}

/*
PluginsBgpRoutingPolicyDestroy Method for PluginsBgpRoutingPolicyDestroy

Delete a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyDestroy(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyDestroyRequest {
	return ApiPluginsBgpRoutingPolicyDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpRoutingPolicyDestroyExecute(r ApiPluginsBgpRoutingPolicyDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Created(created []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Description(description []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Id(id []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpRoutingPolicyListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdGt(idGt []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdGte(idGte []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdLt(idLt []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdLte(idLte []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdN(idN []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpRoutingPolicyListRequest) Limit(limit int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpRoutingPolicyListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Name(name []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIc(nameIc []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIe(nameIe []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIew(nameIew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIsw(nameIsw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameN(nameN []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNic(nameNic []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNie(nameNie []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNiew(nameNiew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNisw(nameNisw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpRoutingPolicyListRequest) Offset(offset int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpRoutingPolicyListRequest) Ordering(ordering string) ApiPluginsBgpRoutingPolicyListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpRoutingPolicyListRequest) Q(q string) ApiPluginsBgpRoutingPolicyListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Tag(tag []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) TagN(tagN []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpRoutingPolicyListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Execute() (*PaginatedRoutingPolicyList, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyListExecute(r)
}

/*
PluginsBgpRoutingPolicyList Method for PluginsBgpRoutingPolicyList

Get a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyListRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyList(ctx context.Context) ApiPluginsBgpRoutingPolicyListRequest {
	return ApiPluginsBgpRoutingPolicyListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRoutingPolicyList
func (a *PluginsAPIService) PluginsBgpRoutingPolicyListExecute(r ApiPluginsBgpRoutingPolicyListRequest) (*PaginatedRoutingPolicyList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRoutingPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *PluginsAPIService
	id                          int32
	patchedRoutingPolicyRequest *PatchedRoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyPartialUpdateRequest) PatchedRoutingPolicyRequest(patchedRoutingPolicyRequest PatchedRoutingPolicyRequest) ApiPluginsBgpRoutingPolicyPartialUpdateRequest {
	r.patchedRoutingPolicyRequest = &patchedRoutingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyPartialUpdateRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyPartialUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyPartialUpdate Method for PluginsBgpRoutingPolicyPartialUpdate

Patch a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyPartialUpdateRequest {
	return ApiPluginsBgpRoutingPolicyPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyPartialUpdateExecute(r ApiPluginsBgpRoutingPolicyPartialUpdateRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRoutingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyRetrieveRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRetrieveExecute(r)
}

/*
PluginsBgpRoutingPolicyRetrieve Method for PluginsBgpRoutingPolicyRetrieve

Get a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRetrieve(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRetrieveRequest {
	return ApiPluginsBgpRoutingPolicyRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRetrieveExecute(r ApiPluginsBgpRoutingPolicyRetrieveRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	routingPolicyRuleRequest *[]RoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest) RoutingPolicyRuleRequest(routingPolicyRuleRequest []RoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest {
	r.routingPolicyRuleRequest = &routingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleBulkDestroyExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleBulkDestroy Method for PluginsBgpRoutingPolicyRuleBulkDestroy

Delete a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleBulkDestroy(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest {
	return ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleBulkDestroyExecute(r ApiPluginsBgpRoutingPolicyRuleBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRuleRequest == nil {
		return nil, reportError("routingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	routingPolicyRuleRequest *[]RoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest) RoutingPolicyRuleRequest(routingPolicyRuleRequest []RoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest {
	r.routingPolicyRuleRequest = &routingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest) Execute() ([]RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleBulkPartialUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleBulkPartialUpdate Method for PluginsBgpRoutingPolicyRuleBulkPartialUpdate

Patch a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleBulkPartialUpdate(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest {
	return ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleBulkPartialUpdateExecute(r ApiPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest) ([]RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRuleRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	routingPolicyRuleRequest *[]RoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest) RoutingPolicyRuleRequest(routingPolicyRuleRequest []RoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest {
	r.routingPolicyRuleRequest = &routingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest) Execute() ([]RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleBulkUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleBulkUpdate Method for PluginsBgpRoutingPolicyRuleBulkUpdate

Put a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleBulkUpdate(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest {
	return ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleBulkUpdateExecute(r ApiPluginsBgpRoutingPolicyRuleBulkUpdateRequest) ([]RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRuleRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleCreateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	routingPolicyRuleRequest *RoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleCreateRequest) RoutingPolicyRuleRequest(routingPolicyRuleRequest RoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleCreateRequest {
	r.routingPolicyRuleRequest = &routingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleCreateRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleCreateExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleCreate Method for PluginsBgpRoutingPolicyRuleCreate

Post a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleCreate(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleCreateRequest {
	return ApiPluginsBgpRoutingPolicyRuleCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleCreateExecute(r ApiPluginsBgpRoutingPolicyRuleCreateRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRuleRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyRuleDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleDestroyExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleDestroy Method for PluginsBgpRoutingPolicyRuleDestroy

Delete a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRuleDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleDestroy(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRuleDestroyRequest {
	return ApiPluginsBgpRoutingPolicyRuleDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleDestroyExecute(r ApiPluginsBgpRoutingPolicyRuleDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleListRequest struct {
	ctx                context.Context
	ApiService         *PluginsAPIService
	action             *PluginsBgpCommunityListRuleListActionParameter
	actionN            *PluginsBgpCommunityListRuleListActionParameter
	continueEntry      *[]int32
	continueEntryEmpty *bool
	continueEntryGt    *[]int32
	continueEntryGte   *[]int32
	continueEntryLt    *[]int32
	continueEntryLte   *[]int32
	continueEntryN     *[]int32
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	index              *[]int32
	indexEmpty         *bool
	indexGt            *[]int32
	indexGte           *[]int32
	indexLt            *[]int32
	indexLte           *[]int32
	indexN             *[]int32
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	modifiedByRequest  *string
	offset             *int32
	ordering           *string
	q                  *string
	routingPolicyId    *int32
	routingPolicyIdN   *int32
	tag                *[]string
	tagN               *[]string
	updatedByRequest   *string
}

// * &#x60;permit&#x60; - Permit * &#x60;deny&#x60; - Deny
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Action(action PluginsBgpCommunityListRuleListActionParameter) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.action = &action
	return r
}

// * &#x60;permit&#x60; - Permit * &#x60;deny&#x60; - Deny
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ActionN(actionN PluginsBgpCommunityListRuleListActionParameter) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntry(continueEntry []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntry = &continueEntry
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryEmpty(continueEntryEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryEmpty = &continueEntryEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryGt(continueEntryGt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryGt = &continueEntryGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryGte(continueEntryGte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryGte = &continueEntryGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryLt(continueEntryLt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryLt = &continueEntryLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryLte(continueEntryLte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryLte = &continueEntryLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryN(continueEntryN []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryN = &continueEntryN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Created(created []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Description(description []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Id(id []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdGt(idGt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdGte(idGte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdLt(idLt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdLte(idLte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdN(idN []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Index(index []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.index = &index
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexEmpty(indexEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexEmpty = &indexEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexGt(indexGt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexGt = &indexGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexGte(indexGte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexGte = &indexGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexLt(indexLt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexLt = &indexLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexLte(indexLte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexLte = &indexLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexN(indexN []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexN = &indexN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Limit(limit int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Offset(offset int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Ordering(ordering string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Q(q string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) RoutingPolicyId(routingPolicyId int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.routingPolicyId = &routingPolicyId
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) RoutingPolicyIdN(routingPolicyIdN int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.routingPolicyIdN = &routingPolicyIdN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Tag(tag []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) TagN(tagN []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Execute() (*PaginatedRoutingPolicyRuleList, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleListExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleList Method for PluginsBgpRoutingPolicyRuleList

Get a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleListRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleList(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleListRequest {
	return ApiPluginsBgpRoutingPolicyRuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRoutingPolicyRuleList
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleListExecute(r ApiPluginsBgpRoutingPolicyRuleListRequest) (*PaginatedRoutingPolicyRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRoutingPolicyRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.continueEntry != nil {
		t := *r.continueEntry
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry", t, "multi")
		}
	}
	if r.continueEntryEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__empty", r.continueEntryEmpty, "")
	}
	if r.continueEntryGt != nil {
		t := *r.continueEntryGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gt", t, "multi")
		}
	}
	if r.continueEntryGte != nil {
		t := *r.continueEntryGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gte", t, "multi")
		}
	}
	if r.continueEntryLt != nil {
		t := *r.continueEntryLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lt", t, "multi")
		}
	}
	if r.continueEntryLte != nil {
		t := *r.continueEntryLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lte", t, "multi")
		}
	}
	if r.continueEntryN != nil {
		t := *r.continueEntryN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.index != nil {
		t := *r.index
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index", t, "multi")
		}
	}
	if r.indexEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "index__empty", r.indexEmpty, "")
	}
	if r.indexGt != nil {
		t := *r.indexGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", t, "multi")
		}
	}
	if r.indexGte != nil {
		t := *r.indexGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", t, "multi")
		}
	}
	if r.indexLt != nil {
		t := *r.indexLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", t, "multi")
		}
	}
	if r.indexLte != nil {
		t := *r.indexLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", t, "multi")
		}
	}
	if r.indexN != nil {
		t := *r.indexN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.routingPolicyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "routing_policy_id", r.routingPolicyId, "")
	}
	if r.routingPolicyIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "routing_policy_id__n", r.routingPolicyIdN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *PluginsAPIService
	id                              int32
	patchedRoutingPolicyRuleRequest *PatchedRoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest) PatchedRoutingPolicyRuleRequest(patchedRoutingPolicyRuleRequest PatchedRoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest {
	r.patchedRoutingPolicyRuleRequest = &patchedRoutingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRulePartialUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyRulePartialUpdate Method for PluginsBgpRoutingPolicyRulePartialUpdate

Patch a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRulePartialUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest {
	return ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRulePartialUpdateExecute(r ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRulePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRoutingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyRuleRetrieveRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleRetrieveExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleRetrieve Method for PluginsBgpRoutingPolicyRuleRetrieve

Get a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRuleRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleRetrieve(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRuleRetrieveRequest {
	return ApiPluginsBgpRoutingPolicyRuleRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleRetrieveExecute(r ApiPluginsBgpRoutingPolicyRuleRetrieveRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	routingPolicyRuleRequest *RoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleUpdateRequest) RoutingPolicyRuleRequest(routingPolicyRuleRequest RoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleUpdateRequest {
	r.routingPolicyRuleRequest = &routingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleUpdateRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleUpdate Method for PluginsBgpRoutingPolicyRuleUpdate

Put a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRuleUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRuleUpdateRequest {
	return ApiPluginsBgpRoutingPolicyRuleUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleUpdateExecute(r ApiPluginsBgpRoutingPolicyRuleUpdateRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRuleRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	id                   int32
	routingPolicyRequest *RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyUpdateRequest) RoutingPolicyRequest(routingPolicyRequest RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyUpdateRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyUpdateRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyUpdate Method for PluginsBgpRoutingPolicyUpdate

Put a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyUpdateRequest {
	return ApiPluginsBgpRoutingPolicyUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyUpdateExecute(r ApiPluginsBgpRoutingPolicyUpdateRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	bGPSessionRequest *[]BGPSessionRequest
}

func (r ApiPluginsBgpSessionBulkDestroyRequest) BGPSessionRequest(bGPSessionRequest []BGPSessionRequest) ApiPluginsBgpSessionBulkDestroyRequest {
	r.bGPSessionRequest = &bGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpSessionBulkDestroyExecute(r)
}

/*
PluginsBgpSessionBulkDestroy Method for PluginsBgpSessionBulkDestroy

Delete a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionBulkDestroy(ctx context.Context) ApiPluginsBgpSessionBulkDestroyRequest {
	return ApiPluginsBgpSessionBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpSessionBulkDestroyExecute(r ApiPluginsBgpSessionBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPSessionRequest == nil {
		return nil, reportError("bGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	bGPSessionRequest *[]BGPSessionRequest
}

func (r ApiPluginsBgpSessionBulkPartialUpdateRequest) BGPSessionRequest(bGPSessionRequest []BGPSessionRequest) ApiPluginsBgpSessionBulkPartialUpdateRequest {
	r.bGPSessionRequest = &bGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionBulkPartialUpdateRequest) Execute() ([]BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionBulkPartialUpdateExecute(r)
}

/*
PluginsBgpSessionBulkPartialUpdate Method for PluginsBgpSessionBulkPartialUpdate

Patch a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionBulkPartialUpdate(ctx context.Context) ApiPluginsBgpSessionBulkPartialUpdateRequest {
	return ApiPluginsBgpSessionBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPSession
func (a *PluginsAPIService) PluginsBgpSessionBulkPartialUpdateExecute(r ApiPluginsBgpSessionBulkPartialUpdateRequest) ([]BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("bGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	bGPSessionRequest *[]BGPSessionRequest
}

func (r ApiPluginsBgpSessionBulkUpdateRequest) BGPSessionRequest(bGPSessionRequest []BGPSessionRequest) ApiPluginsBgpSessionBulkUpdateRequest {
	r.bGPSessionRequest = &bGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionBulkUpdateRequest) Execute() ([]BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionBulkUpdateExecute(r)
}

/*
PluginsBgpSessionBulkUpdate Method for PluginsBgpSessionBulkUpdate

Put a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionBulkUpdate(ctx context.Context) ApiPluginsBgpSessionBulkUpdateRequest {
	return ApiPluginsBgpSessionBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BGPSession
func (a *PluginsAPIService) PluginsBgpSessionBulkUpdateExecute(r ApiPluginsBgpSessionBulkUpdateRequest) ([]BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("bGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionCreateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpSessionCreateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpSessionCreateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionCreateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionCreateExecute(r)
}

/*
PluginsBgpSessionCreate Method for PluginsBgpSessionCreate

Post a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionCreate(ctx context.Context) ApiPluginsBgpSessionCreateRequest {
	return ApiPluginsBgpSessionCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionCreateExecute(r ApiPluginsBgpSessionCreateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpSessionDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpSessionDestroyExecute(r)
}

/*
PluginsBgpSessionDestroy Method for PluginsBgpSessionDestroy

Delete a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionDestroy(ctx context.Context, id int32) ApiPluginsBgpSessionDestroyRequest {
	return ApiPluginsBgpSessionDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpSessionDestroyExecute(r ApiPluginsBgpSessionDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	byLocalAddress    *string
	byRemoteAddress   *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	exportPolicies    *[]int32
	exportPoliciesN   *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	importPolicies    *[]int32
	importPoliciesN   *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	localAddress      *[]string
	localAddressN     *[]string
	localAddressId    *[]int32
	localAddressIdN   *[]int32
	localAs           *[]int64
	localAsN          *[]int64
	localAsId         *[]int32
	localAsIdN        *[]int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	peerGroup         *[]int32
	peerGroupN        *[]int32
	q                 *string
	remoteAddress     *[]string
	remoteAddressN    *[]string
	remoteAddressId   *[]int32
	remoteAddressIdN  *[]int32
	remoteAs          *[]int64
	remoteAsN         *[]int64
	remoteAsId        *[]int32
	remoteAsIdN       *[]int32
	site              *[]string
	siteN             *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	status            *PluginsBgpBgpsessionListStatusParameter
	statusN           *PluginsBgpBgpsessionListStatusParameter
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	updatedByRequest  *string
}

// Local Address
func (r ApiPluginsBgpSessionListRequest) ByLocalAddress(byLocalAddress string) ApiPluginsBgpSessionListRequest {
	r.byLocalAddress = &byLocalAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpSessionListRequest) ByRemoteAddress(byRemoteAddress string) ApiPluginsBgpSessionListRequest {
	r.byRemoteAddress = &byRemoteAddress
	return r
}

func (r ApiPluginsBgpSessionListRequest) Created(created []time.Time) ApiPluginsBgpSessionListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpSessionListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpSessionListRequest) Description(description []string) ApiPluginsBgpSessionListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpSessionListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpSessionListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiPluginsBgpSessionListRequest) Device(device []*string) ApiPluginsBgpSessionListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiPluginsBgpSessionListRequest) DeviceN(deviceN []*string) ApiPluginsBgpSessionListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiPluginsBgpSessionListRequest) DeviceId(deviceId []int32) ApiPluginsBgpSessionListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiPluginsBgpSessionListRequest) DeviceIdN(deviceIdN []int32) ApiPluginsBgpSessionListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) ExportPolicies(exportPolicies []int32) ApiPluginsBgpSessionListRequest {
	r.exportPolicies = &exportPolicies
	return r
}

func (r ApiPluginsBgpSessionListRequest) ExportPoliciesN(exportPoliciesN []int32) ApiPluginsBgpSessionListRequest {
	r.exportPoliciesN = &exportPoliciesN
	return r
}

func (r ApiPluginsBgpSessionListRequest) Id(id []int32) ApiPluginsBgpSessionListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpSessionListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdGt(idGt []int32) ApiPluginsBgpSessionListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdGte(idGte []int32) ApiPluginsBgpSessionListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdLt(idLt []int32) ApiPluginsBgpSessionListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdLte(idLte []int32) ApiPluginsBgpSessionListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdN(idN []int32) ApiPluginsBgpSessionListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpSessionListRequest) ImportPolicies(importPolicies []int32) ApiPluginsBgpSessionListRequest {
	r.importPolicies = &importPolicies
	return r
}

func (r ApiPluginsBgpSessionListRequest) ImportPoliciesN(importPoliciesN []int32) ApiPluginsBgpSessionListRequest {
	r.importPoliciesN = &importPoliciesN
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpSessionListRequest) Limit(limit int32) ApiPluginsBgpSessionListRequest {
	r.limit = &limit
	return r
}

// Local Address
func (r ApiPluginsBgpSessionListRequest) LocalAddress(localAddress []string) ApiPluginsBgpSessionListRequest {
	r.localAddress = &localAddress
	return r
}

// Local Address
func (r ApiPluginsBgpSessionListRequest) LocalAddressN(localAddressN []string) ApiPluginsBgpSessionListRequest {
	r.localAddressN = &localAddressN
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAddressId(localAddressId []int32) ApiPluginsBgpSessionListRequest {
	r.localAddressId = &localAddressId
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAddressIdN(localAddressIdN []int32) ApiPluginsBgpSessionListRequest {
	r.localAddressIdN = &localAddressIdN
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpSessionListRequest) LocalAs(localAs []int64) ApiPluginsBgpSessionListRequest {
	r.localAs = &localAs
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpSessionListRequest) LocalAsN(localAsN []int64) ApiPluginsBgpSessionListRequest {
	r.localAsN = &localAsN
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAsId(localAsId []int32) ApiPluginsBgpSessionListRequest {
	r.localAsId = &localAsId
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAsIdN(localAsIdN []int32) ApiPluginsBgpSessionListRequest {
	r.localAsIdN = &localAsIdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpSessionListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpSessionListRequest) Name(name []string) ApiPluginsBgpSessionListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpSessionListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIc(nameIc []string) ApiPluginsBgpSessionListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIe(nameIe []string) ApiPluginsBgpSessionListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIew(nameIew []string) ApiPluginsBgpSessionListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIsw(nameIsw []string) ApiPluginsBgpSessionListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameN(nameN []string) ApiPluginsBgpSessionListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNic(nameNic []string) ApiPluginsBgpSessionListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNie(nameNie []string) ApiPluginsBgpSessionListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNiew(nameNiew []string) ApiPluginsBgpSessionListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNisw(nameNisw []string) ApiPluginsBgpSessionListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpSessionListRequest) Offset(offset int32) ApiPluginsBgpSessionListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpSessionListRequest) Ordering(ordering string) ApiPluginsBgpSessionListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsBgpSessionListRequest) PeerGroup(peerGroup []int32) ApiPluginsBgpSessionListRequest {
	r.peerGroup = &peerGroup
	return r
}

func (r ApiPluginsBgpSessionListRequest) PeerGroupN(peerGroupN []int32) ApiPluginsBgpSessionListRequest {
	r.peerGroupN = &peerGroupN
	return r
}

// Search
func (r ApiPluginsBgpSessionListRequest) Q(q string) ApiPluginsBgpSessionListRequest {
	r.q = &q
	return r
}

// Remote Address
func (r ApiPluginsBgpSessionListRequest) RemoteAddress(remoteAddress []string) ApiPluginsBgpSessionListRequest {
	r.remoteAddress = &remoteAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpSessionListRequest) RemoteAddressN(remoteAddressN []string) ApiPluginsBgpSessionListRequest {
	r.remoteAddressN = &remoteAddressN
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAddressId(remoteAddressId []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAddressId = &remoteAddressId
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAddressIdN(remoteAddressIdN []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAddressIdN = &remoteAddressIdN
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpSessionListRequest) RemoteAs(remoteAs []int64) ApiPluginsBgpSessionListRequest {
	r.remoteAs = &remoteAs
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpSessionListRequest) RemoteAsN(remoteAsN []int64) ApiPluginsBgpSessionListRequest {
	r.remoteAsN = &remoteAsN
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAsId(remoteAsId []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAsId = &remoteAsId
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAsIdN(remoteAsIdN []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAsIdN = &remoteAsIdN
	return r
}

// DSite (name)
func (r ApiPluginsBgpSessionListRequest) Site(site []string) ApiPluginsBgpSessionListRequest {
	r.site = &site
	return r
}

// DSite (name)
func (r ApiPluginsBgpSessionListRequest) SiteN(siteN []string) ApiPluginsBgpSessionListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiPluginsBgpSessionListRequest) SiteId(siteId []int32) ApiPluginsBgpSessionListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiPluginsBgpSessionListRequest) SiteIdN(siteIdN []int32) ApiPluginsBgpSessionListRequest {
	r.siteIdN = &siteIdN
	return r
}

// * &#x60;offline&#x60; - Offline * &#x60;active&#x60; - Active * &#x60;planned&#x60; - Planned * &#x60;failed&#x60; - Failed
func (r ApiPluginsBgpSessionListRequest) Status(status PluginsBgpBgpsessionListStatusParameter) ApiPluginsBgpSessionListRequest {
	r.status = &status
	return r
}

// * &#x60;offline&#x60; - Offline * &#x60;active&#x60; - Active * &#x60;planned&#x60; - Planned * &#x60;failed&#x60; - Failed
func (r ApiPluginsBgpSessionListRequest) StatusN(statusN PluginsBgpBgpsessionListStatusParameter) ApiPluginsBgpSessionListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsBgpSessionListRequest) Tag(tag []string) ApiPluginsBgpSessionListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpSessionListRequest) TagN(tagN []string) ApiPluginsBgpSessionListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiPluginsBgpSessionListRequest) Tenant(tenant []string) ApiPluginsBgpSessionListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiPluginsBgpSessionListRequest) TenantN(tenantN []string) ApiPluginsBgpSessionListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsBgpSessionListRequest) TenantGroup(tenantGroup []string) ApiPluginsBgpSessionListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiPluginsBgpSessionListRequest) TenantGroupN(tenantGroupN []string) ApiPluginsBgpSessionListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiPluginsBgpSessionListRequest) TenantGroupId(tenantGroupId []string) ApiPluginsBgpSessionListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiPluginsBgpSessionListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiPluginsBgpSessionListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiPluginsBgpSessionListRequest) TenantId(tenantId []*int32) ApiPluginsBgpSessionListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiPluginsBgpSessionListRequest) TenantIdN(tenantIdN []*int32) ApiPluginsBgpSessionListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpSessionListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpSessionListRequest) Execute() (*PaginatedBGPSessionList, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionListExecute(r)
}

/*
PluginsBgpSessionList Method for PluginsBgpSessionList

Get a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionListRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionList(ctx context.Context) ApiPluginsBgpSessionListRequest {
	return ApiPluginsBgpSessionListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPSessionList
func (a *PluginsAPIService) PluginsBgpSessionListExecute(r ApiPluginsBgpSessionListRequest) (*PaginatedBGPSessionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.byLocalAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_local_address", r.byLocalAddress, "")
	}
	if r.byRemoteAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_remote_address", r.byRemoteAddress, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.exportPolicies != nil {
		t := *r.exportPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", t, "multi")
		}
	}
	if r.exportPoliciesN != nil {
		t := *r.exportPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.importPolicies != nil {
		t := *r.importPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", t, "multi")
		}
	}
	if r.importPoliciesN != nil {
		t := *r.importPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localAddress != nil {
		t := *r.localAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", t, "multi")
		}
	}
	if r.localAddressN != nil {
		t := *r.localAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", t, "multi")
		}
	}
	if r.localAddressId != nil {
		t := *r.localAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", t, "multi")
		}
	}
	if r.localAddressIdN != nil {
		t := *r.localAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", t, "multi")
		}
	}
	if r.localAs != nil {
		t := *r.localAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", t, "multi")
		}
	}
	if r.localAsN != nil {
		t := *r.localAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", t, "multi")
		}
	}
	if r.localAsId != nil {
		t := *r.localAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", t, "multi")
		}
	}
	if r.localAsIdN != nil {
		t := *r.localAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.peerGroup != nil {
		t := *r.peerGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", t, "multi")
		}
	}
	if r.peerGroupN != nil {
		t := *r.peerGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.remoteAddress != nil {
		t := *r.remoteAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", t, "multi")
		}
	}
	if r.remoteAddressN != nil {
		t := *r.remoteAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", t, "multi")
		}
	}
	if r.remoteAddressId != nil {
		t := *r.remoteAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", t, "multi")
		}
	}
	if r.remoteAddressIdN != nil {
		t := *r.remoteAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", t, "multi")
		}
	}
	if r.remoteAs != nil {
		t := *r.remoteAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", t, "multi")
		}
	}
	if r.remoteAsN != nil {
		t := *r.remoteAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", t, "multi")
		}
	}
	if r.remoteAsId != nil {
		t := *r.remoteAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", t, "multi")
		}
	}
	if r.remoteAsIdN != nil {
		t := *r.remoteAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	patchedWritableBGPSessionRequest *PatchedWritableBGPSessionRequest
}

func (r ApiPluginsBgpSessionPartialUpdateRequest) PatchedWritableBGPSessionRequest(patchedWritableBGPSessionRequest PatchedWritableBGPSessionRequest) ApiPluginsBgpSessionPartialUpdateRequest {
	r.patchedWritableBGPSessionRequest = &patchedWritableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionPartialUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionPartialUpdateExecute(r)
}

/*
PluginsBgpSessionPartialUpdate Method for PluginsBgpSessionPartialUpdate

Patch a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpSessionPartialUpdateRequest {
	return ApiPluginsBgpSessionPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionPartialUpdateExecute(r ApiPluginsBgpSessionPartialUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpSessionRetrieveRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionRetrieveExecute(r)
}

/*
PluginsBgpSessionRetrieve Method for PluginsBgpSessionRetrieve

Get a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionRetrieve(ctx context.Context, id int32) ApiPluginsBgpSessionRetrieveRequest {
	return ApiPluginsBgpSessionRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionRetrieveExecute(r ApiPluginsBgpSessionRetrieveRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionUpdateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	id                        int32
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpSessionUpdateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpSessionUpdateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionUpdateExecute(r)
}

/*
PluginsBgpSessionUpdate Method for PluginsBgpSessionUpdate

Put a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionUpdate(ctx context.Context, id int32) ApiPluginsBgpSessionUpdateRequest {
	return ApiPluginsBgpSessionUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionUpdateExecute(r ApiPluginsBgpSessionUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsActivateUserKeyCreateRequest struct {
	ctx                    context.Context
	ApiService             *PluginsAPIService
	activateUserKeyRequest *ActivateUserKeyRequest
}

func (r ApiPluginsSecretsActivateUserKeyCreateRequest) ActivateUserKeyRequest(activateUserKeyRequest ActivateUserKeyRequest) ApiPluginsSecretsActivateUserKeyCreateRequest {
	r.activateUserKeyRequest = &activateUserKeyRequest
	return r
}

func (r ApiPluginsSecretsActivateUserKeyCreateRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.PluginsSecretsActivateUserKeyCreateExecute(r)
}

/*
PluginsSecretsActivateUserKeyCreate Method for PluginsSecretsActivateUserKeyCreate

This endpoint expects a private key and a list of user keys to be activated.
The private key is used to derive a master key, which is then used to activate
each user key provided.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsActivateUserKeyCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsActivateUserKeyCreate(ctx context.Context) ApiPluginsSecretsActivateUserKeyCreateRequest {
	return ApiPluginsSecretsActivateUserKeyCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *PluginsAPIService) PluginsSecretsActivateUserKeyCreateExecute(r ApiPluginsSecretsActivateUserKeyCreateRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsActivateUserKeyCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/activate-user-key/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activateUserKeyRequest == nil {
		return localVarReturnValue, nil, reportError("activateUserKeyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activateUserKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsGenerateRsaKeyPairListRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
}

func (r ApiPluginsSecretsGenerateRsaKeyPairListRequest) Execute() ([]RSAKeyPair, *http.Response, error) {
	return r.ApiService.PluginsSecretsGenerateRsaKeyPairListExecute(r)
}

/*
PluginsSecretsGenerateRsaKeyPairList Method for PluginsSecretsGenerateRsaKeyPairList

This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.

	   {
	       "public_key": "<public key>",
	       "private_key": "<private key>"
	   }

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsGenerateRsaKeyPairListRequest
*/
func (a *PluginsAPIService) PluginsSecretsGenerateRsaKeyPairList(ctx context.Context) ApiPluginsSecretsGenerateRsaKeyPairListRequest {
	return ApiPluginsSecretsGenerateRsaKeyPairListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RSAKeyPair
func (a *PluginsAPIService) PluginsSecretsGenerateRsaKeyPairListExecute(r ApiPluginsSecretsGenerateRsaKeyPairListRequest) ([]RSAKeyPair, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RSAKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsGenerateRsaKeyPairList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/generate-rsa-key-pair/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsGetSessionKeyCreateRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
}

func (r ApiPluginsSecretsGetSessionKeyCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsGetSessionKeyCreateExecute(r)
}

/*
PluginsSecretsGetSessionKeyCreate Method for PluginsSecretsGetSessionKeyCreate

Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user's private RSA
key is POSTed with the name `private_key`.
This endpoint accepts one optional parameter: `preserve_key`. If True and a session key exists, the existing session
key will be returned instead of a new one.

Deprecation notice: This endpoint is deprecated and will be removed in a future release. Use the `SessionKeyViewSet`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsGetSessionKeyCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsGetSessionKeyCreate(ctx context.Context) ApiPluginsSecretsGetSessionKeyCreateRequest {
	return ApiPluginsSecretsGetSessionKeyCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsGetSessionKeyCreateExecute(r ApiPluginsSecretsGetSessionKeyCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsGetSessionKeyCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/get-session-key/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *[]SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesBulkDestroyRequest) SecretRoleRequest(secretRoleRequest []SecretRoleRequest) ApiPluginsSecretsSecretRolesBulkDestroyRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesBulkDestroyExecute(r)
}

/*
PluginsSecretsSecretRolesBulkDestroy Method for PluginsSecretsSecretRolesBulkDestroy

Delete a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkDestroy(ctx context.Context) ApiPluginsSecretsSecretRolesBulkDestroyRequest {
	return ApiPluginsSecretsSecretRolesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkDestroyExecute(r ApiPluginsSecretsSecretRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *[]SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest) SecretRoleRequest(secretRoleRequest []SecretRoleRequest) ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest) Execute() ([]SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesBulkPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesBulkPartialUpdate Method for PluginsSecretsSecretRolesBulkPartialUpdate

Patch a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkPartialUpdate(ctx context.Context) ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest {
	return ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkPartialUpdateExecute(r ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest) ([]SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *[]SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesBulkUpdateRequest) SecretRoleRequest(secretRoleRequest []SecretRoleRequest) ApiPluginsSecretsSecretRolesBulkUpdateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesBulkUpdateRequest) Execute() ([]SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesBulkUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesBulkUpdate Method for PluginsSecretsSecretRolesBulkUpdate

Put a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkUpdate(ctx context.Context) ApiPluginsSecretsSecretRolesBulkUpdateRequest {
	return ApiPluginsSecretsSecretRolesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkUpdateExecute(r ApiPluginsSecretsSecretRolesBulkUpdateRequest) ([]SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesCreateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesCreateRequest) SecretRoleRequest(secretRoleRequest SecretRoleRequest) ApiPluginsSecretsSecretRolesCreateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesCreateRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesCreateExecute(r)
}

/*
PluginsSecretsSecretRolesCreate Method for PluginsSecretsSecretRolesCreate

Post a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesCreate(ctx context.Context) ApiPluginsSecretsSecretRolesCreateRequest {
	return ApiPluginsSecretsSecretRolesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesCreateExecute(r ApiPluginsSecretsSecretRolesCreateRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesDestroyExecute(r)
}

/*
PluginsSecretsSecretRolesDestroy Method for PluginsSecretsSecretRolesDestroy

Delete a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesDestroy(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesDestroyRequest {
	return ApiPluginsSecretsSecretRolesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretRolesDestroyExecute(r ApiPluginsSecretsSecretRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	comments          *string
	commentsIc        *string
	commentsIe        *string
	commentsIew       *string
	commentsIsw       *string
	commentsN         *string
	commentsNic       *string
	commentsNie       *string
	commentsNiew      *string
	commentsNisw      *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsSecretsSecretRolesListRequest) Comments(comments string) ApiPluginsSecretsSecretRolesListRequest {
	r.comments = &comments
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIc(commentsIc string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIe(commentsIe string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIew(commentsIew string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIsw(commentsIsw string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsN(commentsN string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNic(commentsNic string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNie(commentsNie string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNiew(commentsNiew string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNisw(commentsNisw string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Created(created []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedN(createdN []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsSecretsSecretRolesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Description(description []string) ApiPluginsSecretsSecretRolesListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIc(descriptionIc []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIe(descriptionIe []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIew(descriptionIew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionN(descriptionN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNic(descriptionNic []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNie(descriptionNie []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Id(id []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdEmpty(idEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdGt(idGt []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdGte(idGte []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdLt(idLt []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdLte(idLte []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdN(idN []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsSecretsSecretRolesListRequest) Limit(limit int32) ApiPluginsSecretsSecretRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsSecretsSecretRolesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Name(name []string) ApiPluginsSecretsSecretRolesListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameEmpty(nameEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIc(nameIc []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIe(nameIe []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIew(nameIew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIsw(nameIsw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameN(nameN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNic(nameNic []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNie(nameNie []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNiew(nameNiew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNisw(nameNisw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsSecretRolesListRequest) Offset(offset int32) ApiPluginsSecretsSecretRolesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsSecretRolesListRequest) Ordering(ordering string) ApiPluginsSecretsSecretRolesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsSecretsSecretRolesListRequest) Q(q string) ApiPluginsSecretsSecretRolesListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Slug(slug []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugEmpty(slugEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIc(slugIc []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIe(slugIe []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIew(slugIew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIsw(slugIsw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugN(slugN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNic(slugNic []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNie(slugNie []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNiew(slugNiew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNisw(slugNisw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Tag(tag []string) ApiPluginsSecretsSecretRolesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) TagN(tagN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsSecretsSecretRolesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Execute() (*PaginatedSecretRoleList, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesListExecute(r)
}

/*
PluginsSecretsSecretRolesList Method for PluginsSecretsSecretRolesList

Get a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesListRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesList(ctx context.Context) ApiPluginsSecretsSecretRolesListRequest {
	return ApiPluginsSecretsSecretRolesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSecretRoleList
func (a *PluginsAPIService) PluginsSecretsSecretRolesListExecute(r ApiPluginsSecretsSecretRolesListRequest) (*PaginatedSecretRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSecretRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "")
	}
	if r.commentsIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", r.commentsIc, "")
	}
	if r.commentsIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", r.commentsIe, "")
	}
	if r.commentsIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", r.commentsIew, "")
	}
	if r.commentsIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", r.commentsIsw, "")
	}
	if r.commentsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", r.commentsN, "")
	}
	if r.commentsNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", r.commentsNic, "")
	}
	if r.commentsNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", r.commentsNie, "")
	}
	if r.commentsNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", r.commentsNiew, "")
	}
	if r.commentsNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", r.commentsNisw, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	patchedSecretRoleRequest *PatchedSecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesPartialUpdateRequest) PatchedSecretRoleRequest(patchedSecretRoleRequest PatchedSecretRoleRequest) ApiPluginsSecretsSecretRolesPartialUpdateRequest {
	r.patchedSecretRoleRequest = &patchedSecretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesPartialUpdateRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesPartialUpdate Method for PluginsSecretsSecretRolesPartialUpdate

Patch a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesPartialUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesPartialUpdateRequest {
	return ApiPluginsSecretsSecretRolesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesPartialUpdateExecute(r ApiPluginsSecretsSecretRolesPartialUpdateRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretRolesRetrieveRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesRetrieveExecute(r)
}

/*
PluginsSecretsSecretRolesRetrieve Method for PluginsSecretsSecretRolesRetrieve

Get a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesRetrieve(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesRetrieveRequest {
	return ApiPluginsSecretsSecretRolesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesRetrieveExecute(r ApiPluginsSecretsSecretRolesRetrieveRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	id                int32
	secretRoleRequest *SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesUpdateRequest) SecretRoleRequest(secretRoleRequest SecretRoleRequest) ApiPluginsSecretsSecretRolesUpdateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesUpdateRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesUpdate Method for PluginsSecretsSecretRolesUpdate

Put a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesUpdateRequest {
	return ApiPluginsSecretsSecretRolesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesUpdateExecute(r ApiPluginsSecretsSecretRolesUpdateRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsBulkDestroyRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *[]SecretRequest
}

func (r ApiPluginsSecretsSecretsBulkDestroyRequest) SecretRequest(secretRequest []SecretRequest) ApiPluginsSecretsSecretsBulkDestroyRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsBulkDestroyExecute(r)
}

/*
PluginsSecretsSecretsBulkDestroy Method for PluginsSecretsSecretsBulkDestroy

Delete a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsBulkDestroy(ctx context.Context) ApiPluginsSecretsSecretsBulkDestroyRequest {
	return ApiPluginsSecretsSecretsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretsBulkDestroyExecute(r ApiPluginsSecretsSecretsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsBulkPartialUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *[]SecretRequest
}

func (r ApiPluginsSecretsSecretsBulkPartialUpdateRequest) SecretRequest(secretRequest []SecretRequest) ApiPluginsSecretsSecretsBulkPartialUpdateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsBulkPartialUpdateRequest) Execute() ([]Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsBulkPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretsBulkPartialUpdate Method for PluginsSecretsSecretsBulkPartialUpdate

Patch a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsBulkPartialUpdate(ctx context.Context) ApiPluginsSecretsSecretsBulkPartialUpdateRequest {
	return ApiPluginsSecretsSecretsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Secret
func (a *PluginsAPIService) PluginsSecretsSecretsBulkPartialUpdateExecute(r ApiPluginsSecretsSecretsBulkPartialUpdateRequest) ([]Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsBulkUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *[]SecretRequest
}

func (r ApiPluginsSecretsSecretsBulkUpdateRequest) SecretRequest(secretRequest []SecretRequest) ApiPluginsSecretsSecretsBulkUpdateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsBulkUpdateRequest) Execute() ([]Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsBulkUpdateExecute(r)
}

/*
PluginsSecretsSecretsBulkUpdate Method for PluginsSecretsSecretsBulkUpdate

Put a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsBulkUpdate(ctx context.Context) ApiPluginsSecretsSecretsBulkUpdateRequest {
	return ApiPluginsSecretsSecretsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Secret
func (a *PluginsAPIService) PluginsSecretsSecretsBulkUpdateExecute(r ApiPluginsSecretsSecretsBulkUpdateRequest) ([]Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsCreateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *SecretRequest
}

func (r ApiPluginsSecretsSecretsCreateRequest) SecretRequest(secretRequest SecretRequest) ApiPluginsSecretsSecretsCreateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsCreateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsCreateExecute(r)
}

/*
PluginsSecretsSecretsCreate Method for PluginsSecretsSecretsCreate

Post a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsCreate(ctx context.Context) ApiPluginsSecretsSecretsCreateRequest {
	return ApiPluginsSecretsSecretsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsCreateExecute(r ApiPluginsSecretsSecretsCreateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsDestroyExecute(r)
}

/*
PluginsSecretsSecretsDestroy Method for PluginsSecretsSecretsDestroy

Delete a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsDestroy(ctx context.Context, id int32) ApiPluginsSecretsSecretsDestroyRequest {
	return ApiPluginsSecretsSecretsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretsDestroyExecute(r ApiPluginsSecretsSecretsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsListRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	objectRepr            *[]string
	objectReprEmpty       *bool
	objectReprIc          *[]string
	objectReprIe          *[]string
	objectReprIew         *[]string
	objectReprIsw         *[]string
	objectReprN           *[]string
	objectReprNic         *[]string
	objectReprNie         *[]string
	objectReprNiew        *[]string
	objectReprNisw        *[]string
	assignedObjectId      *[]int32
	assignedObjectIdEmpty *bool
	assignedObjectIdGt    *[]int32
	assignedObjectIdGte   *[]int32
	assignedObjectIdLt    *[]int32
	assignedObjectIdLte   *[]int32
	assignedObjectIdN     *[]int32
	assignedObjectType    *string
	assignedObjectTypeN   *string
	assignedObjectTypeId  *[]int32
	assignedObjectTypeIdN *[]int32
	comments              *string
	commentsIc            *string
	commentsIe            *string
	commentsIew           *string
	commentsIsw           *string
	commentsN             *string
	commentsNic           *string
	commentsNie           *string
	commentsNiew          *string
	commentsNisw          *string
	contact               *[]int32
	contactN              *[]int32
	created               *[]time.Time
	createdEmpty          *[]time.Time
	createdGt             *[]time.Time
	createdGte            *[]time.Time
	createdLt             *[]time.Time
	createdLte            *[]time.Time
	createdN              *[]time.Time
	createdByRequest      *string
	description           *[]string
	descriptionEmpty      *bool
	descriptionIc         *[]string
	descriptionIe         *[]string
	descriptionIew        *[]string
	descriptionIsw        *[]string
	descriptionN          *[]string
	descriptionNic        *[]string
	descriptionNie        *[]string
	descriptionNiew       *[]string
	descriptionNisw       *[]string
	id                    *[]int32
	idEmpty               *bool
	idGt                  *[]int32
	idGte                 *[]int32
	idLt                  *[]int32
	idLte                 *[]int32
	idN                   *[]int32
	lastUpdated           *[]time.Time
	lastUpdatedEmpty      *[]time.Time
	lastUpdatedGt         *[]time.Time
	lastUpdatedGte        *[]time.Time
	lastUpdatedLt         *[]time.Time
	lastUpdatedLte        *[]time.Time
	lastUpdatedN          *[]time.Time
	limit                 *int32
	modifiedByRequest     *string
	name                  *[]string
	nameEmpty             *bool
	nameIc                *[]string
	nameIe                *[]string
	nameIew               *[]string
	nameIsw               *[]string
	nameN                 *[]string
	nameNic               *[]string
	nameNie               *[]string
	nameNiew              *[]string
	nameNisw              *[]string
	offset                *int32
	ordering              *string
	q                     *string
	role                  *[]string
	roleN                 *[]string
	roleId                *[]int32
	roleIdN               *[]int32
	tag                   *[]string
	tagN                  *[]string
	updatedByRequest      *string
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectRepr(objectRepr []string) ApiPluginsSecretsSecretsListRequest {
	r.objectRepr = &objectRepr
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprEmpty(objectReprEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.objectReprEmpty = &objectReprEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIc(objectReprIc []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIc = &objectReprIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIe(objectReprIe []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIe = &objectReprIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIew(objectReprIew []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIew = &objectReprIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIsw(objectReprIsw []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIsw = &objectReprIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprN(objectReprN []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprN = &objectReprN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNic(objectReprNic []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNic = &objectReprNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNie(objectReprNie []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNie = &objectReprNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNiew(objectReprNiew []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNiew = &objectReprNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNisw(objectReprNisw []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNisw = &objectReprNisw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectId(assignedObjectId []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectId = &assignedObjectId
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdEmpty(assignedObjectIdEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdEmpty = &assignedObjectIdEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdGt(assignedObjectIdGt []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdGt = &assignedObjectIdGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdGte(assignedObjectIdGte []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdGte = &assignedObjectIdGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdLt(assignedObjectIdLt []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdLt = &assignedObjectIdLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdLte(assignedObjectIdLte []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdLte = &assignedObjectIdLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdN(assignedObjectIdN []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdN = &assignedObjectIdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectType(assignedObjectType string) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectType = &assignedObjectType
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectTypeN(assignedObjectTypeN string) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectTypeN = &assignedObjectTypeN
	return r
}

// Object type (ID)
func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectTypeId(assignedObjectTypeId []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectTypeId = &assignedObjectTypeId
	return r
}

// Object type (ID)
func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectTypeIdN(assignedObjectTypeIdN []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectTypeIdN = &assignedObjectTypeIdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Comments(comments string) ApiPluginsSecretsSecretsListRequest {
	r.comments = &comments
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIc(commentsIc string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIe(commentsIe string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIew(commentsIew string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIsw(commentsIsw string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsN(commentsN string) ApiPluginsSecretsSecretsListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNic(commentsNic string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNie(commentsNie string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNiew(commentsNiew string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNisw(commentsNisw string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

// Contact
func (r ApiPluginsSecretsSecretsListRequest) Contact(contact []int32) ApiPluginsSecretsSecretsListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiPluginsSecretsSecretsListRequest) ContactN(contactN []int32) ApiPluginsSecretsSecretsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Created(created []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedGt(createdGt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedGte(createdGte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedLt(createdLt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedLte(createdLte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedN(createdN []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedByRequest(createdByRequest string) ApiPluginsSecretsSecretsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Description(description []string) ApiPluginsSecretsSecretsListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIc(descriptionIc []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIe(descriptionIe []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIew(descriptionIew []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionN(descriptionN []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNic(descriptionNic []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNie(descriptionNie []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Id(id []int32) ApiPluginsSecretsSecretsListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdEmpty(idEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdGt(idGt []int32) ApiPluginsSecretsSecretsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdGte(idGte []int32) ApiPluginsSecretsSecretsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdLt(idLt []int32) ApiPluginsSecretsSecretsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdLte(idLte []int32) ApiPluginsSecretsSecretsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdN(idN []int32) ApiPluginsSecretsSecretsListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsSecretsSecretsListRequest) Limit(limit int32) ApiPluginsSecretsSecretsListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsSecretsSecretsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Name(name []string) ApiPluginsSecretsSecretsListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameEmpty(nameEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIc(nameIc []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIe(nameIe []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIew(nameIew []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIsw(nameIsw []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameN(nameN []string) ApiPluginsSecretsSecretsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNic(nameNic []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNie(nameNie []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNiew(nameNiew []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNisw(nameNisw []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsSecretsListRequest) Offset(offset int32) ApiPluginsSecretsSecretsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsSecretsListRequest) Ordering(ordering string) ApiPluginsSecretsSecretsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsSecretsSecretsListRequest) Q(q string) ApiPluginsSecretsSecretsListRequest {
	r.q = &q
	return r
}

// Role (slug)
func (r ApiPluginsSecretsSecretsListRequest) Role(role []string) ApiPluginsSecretsSecretsListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiPluginsSecretsSecretsListRequest) RoleN(roleN []string) ApiPluginsSecretsSecretsListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiPluginsSecretsSecretsListRequest) RoleId(roleId []int32) ApiPluginsSecretsSecretsListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiPluginsSecretsSecretsListRequest) RoleIdN(roleIdN []int32) ApiPluginsSecretsSecretsListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Tag(tag []string) ApiPluginsSecretsSecretsListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) TagN(tagN []string) ApiPluginsSecretsSecretsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsSecretsSecretsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Execute() (*PaginatedSecretList, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsListExecute(r)
}

/*
PluginsSecretsSecretsList Method for PluginsSecretsSecretsList

Get a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsListRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsList(ctx context.Context) ApiPluginsSecretsSecretsListRequest {
	return ApiPluginsSecretsSecretsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSecretList
func (a *PluginsAPIService) PluginsSecretsSecretsListExecute(r ApiPluginsSecretsSecretsListRequest) (*PaginatedSecretList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSecretList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.objectRepr != nil {
		t := *r.objectRepr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr", t, "multi")
		}
	}
	if r.objectReprEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__empty", r.objectReprEmpty, "")
	}
	if r.objectReprIc != nil {
		t := *r.objectReprIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ic", t, "multi")
		}
	}
	if r.objectReprIe != nil {
		t := *r.objectReprIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ie", t, "multi")
		}
	}
	if r.objectReprIew != nil {
		t := *r.objectReprIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__iew", t, "multi")
		}
	}
	if r.objectReprIsw != nil {
		t := *r.objectReprIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__isw", t, "multi")
		}
	}
	if r.objectReprN != nil {
		t := *r.objectReprN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__n", t, "multi")
		}
	}
	if r.objectReprNic != nil {
		t := *r.objectReprNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nic", t, "multi")
		}
	}
	if r.objectReprNie != nil {
		t := *r.objectReprNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nie", t, "multi")
		}
	}
	if r.objectReprNiew != nil {
		t := *r.objectReprNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__niew", t, "multi")
		}
	}
	if r.objectReprNisw != nil {
		t := *r.objectReprNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nisw", t, "multi")
		}
	}
	if r.assignedObjectId != nil {
		t := *r.assignedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", t, "multi")
		}
	}
	if r.assignedObjectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__empty", r.assignedObjectIdEmpty, "")
	}
	if r.assignedObjectIdGt != nil {
		t := *r.assignedObjectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gt", t, "multi")
		}
	}
	if r.assignedObjectIdGte != nil {
		t := *r.assignedObjectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gte", t, "multi")
		}
	}
	if r.assignedObjectIdLt != nil {
		t := *r.assignedObjectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lt", t, "multi")
		}
	}
	if r.assignedObjectIdLte != nil {
		t := *r.assignedObjectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lte", t, "multi")
		}
	}
	if r.assignedObjectIdN != nil {
		t := *r.assignedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", t, "multi")
		}
	}
	if r.assignedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type", r.assignedObjectType, "")
	}
	if r.assignedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__n", r.assignedObjectTypeN, "")
	}
	if r.assignedObjectTypeId != nil {
		t := *r.assignedObjectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", t, "multi")
		}
	}
	if r.assignedObjectTypeIdN != nil {
		t := *r.assignedObjectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", t, "multi")
		}
	}
	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "")
	}
	if r.commentsIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", r.commentsIc, "")
	}
	if r.commentsIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", r.commentsIe, "")
	}
	if r.commentsIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", r.commentsIew, "")
	}
	if r.commentsIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", r.commentsIsw, "")
	}
	if r.commentsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", r.commentsN, "")
	}
	if r.commentsNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", r.commentsNic, "")
	}
	if r.commentsNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", r.commentsNie, "")
	}
	if r.commentsNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", r.commentsNiew, "")
	}
	if r.commentsNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", r.commentsNisw, "")
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsPartialUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	id                   int32
	patchedSecretRequest *PatchedSecretRequest
}

func (r ApiPluginsSecretsSecretsPartialUpdateRequest) PatchedSecretRequest(patchedSecretRequest PatchedSecretRequest) ApiPluginsSecretsSecretsPartialUpdateRequest {
	r.patchedSecretRequest = &patchedSecretRequest
	return r
}

func (r ApiPluginsSecretsSecretsPartialUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretsPartialUpdate Method for PluginsSecretsSecretsPartialUpdate

Patch a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsPartialUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretsPartialUpdateRequest {
	return ApiPluginsSecretsSecretsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsPartialUpdateExecute(r ApiPluginsSecretsSecretsPartialUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretsRetrieveRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsRetrieveExecute(r)
}

/*
PluginsSecretsSecretsRetrieve Method for PluginsSecretsSecretsRetrieve

Get a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsRetrieve(ctx context.Context, id int32) ApiPluginsSecretsSecretsRetrieveRequest {
	return ApiPluginsSecretsSecretsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsRetrieveExecute(r ApiPluginsSecretsSecretsRetrieveRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	id            int32
	secretRequest *SecretRequest
}

func (r ApiPluginsSecretsSecretsUpdateRequest) SecretRequest(secretRequest SecretRequest) ApiPluginsSecretsSecretsUpdateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsUpdateExecute(r)
}

/*
PluginsSecretsSecretsUpdate Method for PluginsSecretsSecretsUpdate

Put a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretsUpdateRequest {
	return ApiPluginsSecretsSecretsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsUpdateExecute(r ApiPluginsSecretsSecretsUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysBulkDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
}

func (r ApiPluginsSecretsSessionKeysBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysBulkDestroyExecute(r)
}

/*
PluginsSecretsSessionKeysBulkDestroy Method for PluginsSecretsSessionKeysBulkDestroy

Delete a list of session key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSessionKeysBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysBulkDestroy(ctx context.Context) ApiPluginsSecretsSessionKeysBulkDestroyRequest {
	return ApiPluginsSecretsSessionKeysBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSessionKeysBulkDestroyExecute(r ApiPluginsSecretsSessionKeysBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysCreateRequest struct {
	ctx                     context.Context
	ApiService              *PluginsAPIService
	sessionKeyCreateRequest *SessionKeyCreateRequest
}

func (r ApiPluginsSecretsSessionKeysCreateRequest) SessionKeyCreateRequest(sessionKeyCreateRequest SessionKeyCreateRequest) ApiPluginsSecretsSessionKeysCreateRequest {
	r.sessionKeyCreateRequest = &sessionKeyCreateRequest
	return r
}

func (r ApiPluginsSecretsSessionKeysCreateRequest) Execute() (*SessionKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysCreateExecute(r)
}

/*
PluginsSecretsSessionKeysCreate Method for PluginsSecretsSessionKeysCreate

Creates a new session key for the current user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSessionKeysCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysCreate(ctx context.Context) ApiPluginsSecretsSessionKeysCreateRequest {
	return ApiPluginsSecretsSessionKeysCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SessionKey
func (a *PluginsAPIService) PluginsSecretsSessionKeysCreateExecute(r ApiPluginsSecretsSessionKeysCreateRequest) (*SessionKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SessionKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionKeyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("sessionKeyCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sessionKeyCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSessionKeysDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysDestroyExecute(r)
}

/*
PluginsSecretsSessionKeysDestroy Method for PluginsSecretsSessionKeysDestroy

Delete a session key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this session key.
	@return ApiPluginsSecretsSessionKeysDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysDestroy(ctx context.Context, id int32) ApiPluginsSecretsSessionKeysDestroyRequest {
	return ApiPluginsSecretsSessionKeysDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSessionKeysDestroyExecute(r ApiPluginsSecretsSessionKeysDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysListRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	limit      *int32
	offset     *int32
	ordering   *string
}

// Number of results to return per page.
func (r ApiPluginsSecretsSessionKeysListRequest) Limit(limit int32) ApiPluginsSecretsSessionKeysListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsSessionKeysListRequest) Offset(offset int32) ApiPluginsSecretsSessionKeysListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsSessionKeysListRequest) Ordering(ordering string) ApiPluginsSecretsSessionKeysListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsSecretsSessionKeysListRequest) Execute() (*PaginatedSessionKeyList, *http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysListExecute(r)
}

/*
PluginsSecretsSessionKeysList Method for PluginsSecretsSessionKeysList

Get a list of session key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSessionKeysListRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysList(ctx context.Context) ApiPluginsSecretsSessionKeysListRequest {
	return ApiPluginsSecretsSessionKeysListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSessionKeyList
func (a *PluginsAPIService) PluginsSecretsSessionKeysListExecute(r ApiPluginsSecretsSessionKeysListRequest) (*PaginatedSessionKeyList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSessionKeyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSessionKeysRetrieveRequest) Execute() (*SessionKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysRetrieveExecute(r)
}

/*
PluginsSecretsSessionKeysRetrieve Method for PluginsSecretsSessionKeysRetrieve

Get a session key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this session key.
	@return ApiPluginsSecretsSessionKeysRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysRetrieve(ctx context.Context, id int32) ApiPluginsSecretsSessionKeysRetrieveRequest {
	return ApiPluginsSecretsSessionKeysRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SessionKey
func (a *PluginsAPIService) PluginsSecretsSessionKeysRetrieveExecute(r ApiPluginsSecretsSessionKeysRetrieveRequest) (*SessionKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SessionKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
	user              *[]string
	userN             *[]string
	userId            *[]int32
	userIdN           *[]int32
}

func (r ApiPluginsSecretsUserKeysListRequest) Created(created []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedGt(createdGt []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedGte(createdGte []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedLt(createdLt []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedLte(createdLte []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedN(createdN []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) CreatedByRequest(createdByRequest string) ApiPluginsSecretsUserKeysListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) Id(id []int32) ApiPluginsSecretsUserKeysListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) IdEmpty(idEmpty bool) ApiPluginsSecretsUserKeysListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) IdGt(idGt []int32) ApiPluginsSecretsUserKeysListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) IdGte(idGte []int32) ApiPluginsSecretsUserKeysListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) IdLt(idLt []int32) ApiPluginsSecretsUserKeysListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) IdLte(idLte []int32) ApiPluginsSecretsUserKeysListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) IdN(idN []int32) ApiPluginsSecretsUserKeysListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsSecretsUserKeysListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsSecretsUserKeysListRequest) Limit(limit int32) ApiPluginsSecretsUserKeysListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsSecretsUserKeysListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsUserKeysListRequest) Offset(offset int32) ApiPluginsSecretsUserKeysListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsUserKeysListRequest) Ordering(ordering string) ApiPluginsSecretsUserKeysListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsSecretsUserKeysListRequest) Q(q string) ApiPluginsSecretsUserKeysListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) Tag(tag []string) ApiPluginsSecretsUserKeysListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) TagN(tagN []string) ApiPluginsSecretsUserKeysListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsSecretsUserKeysListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// User (name)
func (r ApiPluginsSecretsUserKeysListRequest) User(user []string) ApiPluginsSecretsUserKeysListRequest {
	r.user = &user
	return r
}

// User (name)
func (r ApiPluginsSecretsUserKeysListRequest) UserN(userN []string) ApiPluginsSecretsUserKeysListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiPluginsSecretsUserKeysListRequest) UserId(userId []int32) ApiPluginsSecretsUserKeysListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiPluginsSecretsUserKeysListRequest) UserIdN(userIdN []int32) ApiPluginsSecretsUserKeysListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) Execute() (*PaginatedUserKeyList, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysListExecute(r)
}

/*
PluginsSecretsUserKeysList Method for PluginsSecretsUserKeysList

Get a list of user key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsUserKeysListRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysList(ctx context.Context) ApiPluginsSecretsUserKeysListRequest {
	return ApiPluginsSecretsUserKeysListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedUserKeyList
func (a *PluginsAPIService) PluginsSecretsUserKeysListExecute(r ApiPluginsSecretsUserKeysListRequest) (*PaginatedUserKeyList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedUserKeyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "multi")
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", t, "multi")
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsUserKeysRetrieveRequest) Execute() (*UserKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysRetrieveExecute(r)
}

/*
PluginsSecretsUserKeysRetrieve Method for PluginsSecretsUserKeysRetrieve

Get a user key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this user key.
	@return ApiPluginsSecretsUserKeysRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysRetrieve(ctx context.Context, id int32) ApiPluginsSecretsUserKeysRetrieveRequest {
	return ApiPluginsSecretsUserKeysRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return UserKey
func (a *PluginsAPIService) PluginsSecretsUserKeysRetrieveExecute(r ApiPluginsSecretsUserKeysRetrieveRequest) (*UserKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UserKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
