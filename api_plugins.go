/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// PluginsAPIService PluginsAPI service
type PluginsAPIService service

type ApiPluginsBgpBgppeergroupCreateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupCreateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupCreateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupCreateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupCreateExecute(r)
}

/*
PluginsBgpBgppeergroupCreate Method for PluginsBgpBgppeergroupCreate

Post a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupCreate(ctx context.Context) ApiPluginsBgpBgppeergroupCreateRequest {
	return ApiPluginsBgpBgppeergroupCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupCreateExecute(r ApiPluginsBgpBgppeergroupCreateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgppeergroupDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupDestroyExecute(r)
}

/*
PluginsBgpBgppeergroupDestroy Method for PluginsBgpBgppeergroupDestroy

Delete a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupDestroy(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupDestroyRequest {
	return ApiPluginsBgpBgppeergroupDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpBgppeergroupDestroyExecute(r ApiPluginsBgpBgppeergroupDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpBgppeergroupListRequest) Created(created []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpBgppeergroupListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Description(description []string) ApiPluginsBgpBgppeergroupListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Id(id []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpBgppeergroupListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdGt(idGt []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdGte(idGte []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdLt(idLt []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdLte(idLte []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) IdN(idN []int32) ApiPluginsBgpBgppeergroupListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpBgppeergroupListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpBgppeergroupListRequest) Limit(limit int32) ApiPluginsBgpBgppeergroupListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpBgppeergroupListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Name(name []string) ApiPluginsBgpBgppeergroupListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpBgppeergroupListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIc(nameIc []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIe(nameIe []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIew(nameIew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameIsw(nameIsw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameN(nameN []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNic(nameNic []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNie(nameNie []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNiew(nameNiew []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) NameNisw(nameNisw []string) ApiPluginsBgpBgppeergroupListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpBgppeergroupListRequest) Offset(offset int32) ApiPluginsBgpBgppeergroupListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpBgppeergroupListRequest) Ordering(ordering string) ApiPluginsBgpBgppeergroupListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpBgppeergroupListRequest) Q(q string) ApiPluginsBgpBgppeergroupListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Tag(tag []string) ApiPluginsBgpBgppeergroupListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) TagN(tagN []string) ApiPluginsBgpBgppeergroupListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpBgppeergroupListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupListRequest) Execute() (*PaginatedBGPPeerGroupList, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupListExecute(r)
}

/*
PluginsBgpBgppeergroupList Method for PluginsBgpBgppeergroupList

Get a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgppeergroupListRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupList(ctx context.Context) ApiPluginsBgpBgppeergroupListRequest {
	return ApiPluginsBgpBgppeergroupListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPPeerGroupList
func (a *PluginsAPIService) PluginsBgpBgppeergroupListExecute(r ApiPluginsBgpBgppeergroupListRequest) (*PaginatedBGPPeerGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPPeerGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *PluginsAPIService
	id                         int32
	patchedBGPPeerGroupRequest *PatchedBGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupPartialUpdateRequest) PatchedBGPPeerGroupRequest(patchedBGPPeerGroupRequest PatchedBGPPeerGroupRequest) ApiPluginsBgpBgppeergroupPartialUpdateRequest {
	r.patchedBGPPeerGroupRequest = &patchedBGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupPartialUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupPartialUpdateExecute(r)
}

/*
PluginsBgpBgppeergroupPartialUpdate Method for PluginsBgpBgppeergroupPartialUpdate

Patch a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupPartialUpdateRequest {
	return ApiPluginsBgpBgppeergroupPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupPartialUpdateExecute(r ApiPluginsBgpBgppeergroupPartialUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgppeergroupRetrieveRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupRetrieveExecute(r)
}

/*
PluginsBgpBgppeergroupRetrieve Method for PluginsBgpBgppeergroupRetrieve

Get a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupRetrieve(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupRetrieveRequest {
	return ApiPluginsBgpBgppeergroupRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupRetrieveExecute(r ApiPluginsBgpBgppeergroupRetrieveRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgppeergroupUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	id                  int32
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpBgppeergroupUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpBgppeergroupUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpBgppeergroupUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpBgppeergroupUpdateExecute(r)
}

/*
PluginsBgpBgppeergroupUpdate Method for PluginsBgpBgppeergroupUpdate

Put a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpBgppeergroupUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgppeergroupUpdate(ctx context.Context, id int32) ApiPluginsBgpBgppeergroupUpdateRequest {
	return ApiPluginsBgpBgppeergroupUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpBgppeergroupUpdateExecute(r ApiPluginsBgpBgppeergroupUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgppeergroupUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgppeergroup/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionCreateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionCreateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpBgpsessionCreateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionCreateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionCreateExecute(r)
}

/*
PluginsBgpBgpsessionCreate Method for PluginsBgpBgpsessionCreate

Post a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionCreate(ctx context.Context) ApiPluginsBgpBgpsessionCreateRequest {
	return ApiPluginsBgpBgpsessionCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionCreateExecute(r ApiPluginsBgpBgpsessionCreateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgpsessionDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionDestroyExecute(r)
}

/*
PluginsBgpBgpsessionDestroy Method for PluginsBgpBgpsessionDestroy

Delete a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionDestroy(ctx context.Context, id int32) ApiPluginsBgpBgpsessionDestroyRequest {
	return ApiPluginsBgpBgpsessionDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpBgpsessionDestroyExecute(r ApiPluginsBgpBgpsessionDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	byLocalAddress    *string
	byRemoteAddress   *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	exportPolicies    *[]int32
	exportPoliciesN   *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	importPolicies    *[]int32
	importPoliciesN   *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	localAddress      *[]string
	localAddressN     *[]string
	localAddressId    *[]int32
	localAddressIdN   *[]int32
	localAs           *[]int64
	localAsN          *[]int64
	localAsId         *[]int32
	localAsIdN        *[]int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	peerGroup         *[]int32
	peerGroupN        *[]int32
	q                 *string
	remoteAddress     *[]string
	remoteAddressN    *[]string
	remoteAddressId   *[]int32
	remoteAddressIdN  *[]int32
	remoteAs          *[]int64
	remoteAsN         *[]int64
	remoteAsId        *[]int32
	remoteAsIdN       *[]int32
	site              *[]string
	siteN             *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	status            *string
	statusN           *string
	tag               *[]string
	tagN              *[]string
	tenant            *int32
	tenantN           *int32
	updatedByRequest  *string
}

// Local Address
func (r ApiPluginsBgpBgpsessionListRequest) ByLocalAddress(byLocalAddress string) ApiPluginsBgpBgpsessionListRequest {
	r.byLocalAddress = &byLocalAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpBgpsessionListRequest) ByRemoteAddress(byRemoteAddress string) ApiPluginsBgpBgpsessionListRequest {
	r.byRemoteAddress = &byRemoteAddress
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Created(created []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpBgpsessionListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Description(description []string) ApiPluginsBgpBgpsessionListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpBgpsessionListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiPluginsBgpBgpsessionListRequest) Device(device []*string) ApiPluginsBgpBgpsessionListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiPluginsBgpBgpsessionListRequest) DeviceN(deviceN []*string) ApiPluginsBgpBgpsessionListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiPluginsBgpBgpsessionListRequest) DeviceId(deviceId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiPluginsBgpBgpsessionListRequest) DeviceIdN(deviceIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ExportPolicies(exportPolicies []int32) ApiPluginsBgpBgpsessionListRequest {
	r.exportPolicies = &exportPolicies
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ExportPoliciesN(exportPoliciesN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.exportPoliciesN = &exportPoliciesN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Id(id []int32) ApiPluginsBgpBgpsessionListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpBgpsessionListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdGt(idGt []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdGte(idGte []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdLt(idLt []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdLte(idLte []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) IdN(idN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ImportPolicies(importPolicies []int32) ApiPluginsBgpBgpsessionListRequest {
	r.importPolicies = &importPolicies
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ImportPoliciesN(importPoliciesN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.importPoliciesN = &importPoliciesN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpBgpsessionListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpBgpsessionListRequest) Limit(limit int32) ApiPluginsBgpBgpsessionListRequest {
	r.limit = &limit
	return r
}

// Local Address
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddress(localAddress []string) ApiPluginsBgpBgpsessionListRequest {
	r.localAddress = &localAddress
	return r
}

// Local Address
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddressN(localAddressN []string) ApiPluginsBgpBgpsessionListRequest {
	r.localAddressN = &localAddressN
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddressId(localAddressId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAddressId = &localAddressId
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAddressIdN(localAddressIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAddressIdN = &localAddressIdN
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAs(localAs []int64) ApiPluginsBgpBgpsessionListRequest {
	r.localAs = &localAs
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAsN(localAsN []int64) ApiPluginsBgpBgpsessionListRequest {
	r.localAsN = &localAsN
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAsId(localAsId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAsId = &localAsId
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) LocalAsIdN(localAsIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.localAsIdN = &localAsIdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpBgpsessionListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Name(name []string) ApiPluginsBgpBgpsessionListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpBgpsessionListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIc(nameIc []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIe(nameIe []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIew(nameIew []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameIsw(nameIsw []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameN(nameN []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNic(nameNic []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNie(nameNie []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNiew(nameNiew []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) NameNisw(nameNisw []string) ApiPluginsBgpBgpsessionListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpBgpsessionListRequest) Offset(offset int32) ApiPluginsBgpBgpsessionListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpBgpsessionListRequest) Ordering(ordering string) ApiPluginsBgpBgpsessionListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) PeerGroup(peerGroup []int32) ApiPluginsBgpBgpsessionListRequest {
	r.peerGroup = &peerGroup
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) PeerGroupN(peerGroupN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.peerGroupN = &peerGroupN
	return r
}

// Search
func (r ApiPluginsBgpBgpsessionListRequest) Q(q string) ApiPluginsBgpBgpsessionListRequest {
	r.q = &q
	return r
}

// Remote Address
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddress(remoteAddress []string) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddress = &remoteAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddressN(remoteAddressN []string) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddressN = &remoteAddressN
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddressId(remoteAddressId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddressId = &remoteAddressId
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAddressIdN(remoteAddressIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAddressIdN = &remoteAddressIdN
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAs(remoteAs []int64) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAs = &remoteAs
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAsN(remoteAsN []int64) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAsN = &remoteAsN
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAsId(remoteAsId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAsId = &remoteAsId
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpBgpsessionListRequest) RemoteAsIdN(remoteAsIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.remoteAsIdN = &remoteAsIdN
	return r
}

// DSite (name)
func (r ApiPluginsBgpBgpsessionListRequest) Site(site []string) ApiPluginsBgpBgpsessionListRequest {
	r.site = &site
	return r
}

// DSite (name)
func (r ApiPluginsBgpBgpsessionListRequest) SiteN(siteN []string) ApiPluginsBgpBgpsessionListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiPluginsBgpBgpsessionListRequest) SiteId(siteId []int32) ApiPluginsBgpBgpsessionListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiPluginsBgpBgpsessionListRequest) SiteIdN(siteIdN []int32) ApiPluginsBgpBgpsessionListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Status(status string) ApiPluginsBgpBgpsessionListRequest {
	r.status = &status
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) StatusN(statusN string) ApiPluginsBgpBgpsessionListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Tag(tag []string) ApiPluginsBgpBgpsessionListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TagN(tagN []string) ApiPluginsBgpBgpsessionListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Tenant(tenant int32) ApiPluginsBgpBgpsessionListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) TenantN(tenantN int32) ApiPluginsBgpBgpsessionListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpBgpsessionListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpBgpsessionListRequest) Execute() (*PaginatedBGPSessionList, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionListExecute(r)
}

/*
PluginsBgpBgpsessionList Method for PluginsBgpBgpsessionList

Get a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpBgpsessionListRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionList(ctx context.Context) ApiPluginsBgpBgpsessionListRequest {
	return ApiPluginsBgpBgpsessionListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPSessionList
func (a *PluginsAPIService) PluginsBgpBgpsessionListExecute(r ApiPluginsBgpBgpsessionListRequest) (*PaginatedBGPSessionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.byLocalAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_local_address", r.byLocalAddress, "")
	}
	if r.byRemoteAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_remote_address", r.byRemoteAddress, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.exportPolicies != nil {
		t := *r.exportPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", t, "multi")
		}
	}
	if r.exportPoliciesN != nil {
		t := *r.exportPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.importPolicies != nil {
		t := *r.importPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", t, "multi")
		}
	}
	if r.importPoliciesN != nil {
		t := *r.importPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localAddress != nil {
		t := *r.localAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", t, "multi")
		}
	}
	if r.localAddressN != nil {
		t := *r.localAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", t, "multi")
		}
	}
	if r.localAddressId != nil {
		t := *r.localAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", t, "multi")
		}
	}
	if r.localAddressIdN != nil {
		t := *r.localAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", t, "multi")
		}
	}
	if r.localAs != nil {
		t := *r.localAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", t, "multi")
		}
	}
	if r.localAsN != nil {
		t := *r.localAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", t, "multi")
		}
	}
	if r.localAsId != nil {
		t := *r.localAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", t, "multi")
		}
	}
	if r.localAsIdN != nil {
		t := *r.localAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.peerGroup != nil {
		t := *r.peerGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", t, "multi")
		}
	}
	if r.peerGroupN != nil {
		t := *r.peerGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.remoteAddress != nil {
		t := *r.remoteAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", t, "multi")
		}
	}
	if r.remoteAddressN != nil {
		t := *r.remoteAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", t, "multi")
		}
	}
	if r.remoteAddressId != nil {
		t := *r.remoteAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", t, "multi")
		}
	}
	if r.remoteAddressIdN != nil {
		t := *r.remoteAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", t, "multi")
		}
	}
	if r.remoteAs != nil {
		t := *r.remoteAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", t, "multi")
		}
	}
	if r.remoteAsN != nil {
		t := *r.remoteAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", t, "multi")
		}
	}
	if r.remoteAsId != nil {
		t := *r.remoteAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", t, "multi")
		}
	}
	if r.remoteAsIdN != nil {
		t := *r.remoteAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", r.tenant, "")
	}
	if r.tenantN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", r.tenantN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	patchedWritableBGPSessionRequest *PatchedWritableBGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionPartialUpdateRequest) PatchedWritableBGPSessionRequest(patchedWritableBGPSessionRequest PatchedWritableBGPSessionRequest) ApiPluginsBgpBgpsessionPartialUpdateRequest {
	r.patchedWritableBGPSessionRequest = &patchedWritableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionPartialUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionPartialUpdateExecute(r)
}

/*
PluginsBgpBgpsessionPartialUpdate Method for PluginsBgpBgpsessionPartialUpdate

Patch a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpBgpsessionPartialUpdateRequest {
	return ApiPluginsBgpBgpsessionPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionPartialUpdateExecute(r ApiPluginsBgpBgpsessionPartialUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpBgpsessionRetrieveRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionRetrieveExecute(r)
}

/*
PluginsBgpBgpsessionRetrieve Method for PluginsBgpBgpsessionRetrieve

Get a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionRetrieve(ctx context.Context, id int32) ApiPluginsBgpBgpsessionRetrieveRequest {
	return ApiPluginsBgpBgpsessionRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionRetrieveExecute(r ApiPluginsBgpBgpsessionRetrieveRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpBgpsessionUpdateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	id                        int32
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpBgpsessionUpdateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpBgpsessionUpdateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpBgpsessionUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpBgpsessionUpdateExecute(r)
}

/*
PluginsBgpBgpsessionUpdate Method for PluginsBgpBgpsessionUpdate

Put a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpBgpsessionUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpBgpsessionUpdate(ctx context.Context, id int32) ApiPluginsBgpBgpsessionUpdateRequest {
	return ApiPluginsBgpBgpsessionUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpBgpsessionUpdateExecute(r ApiPluginsBgpBgpsessionUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpBgpsessionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/bgpsession/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityCreateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	writableCommunityRequest *WritableCommunityRequest
}

func (r ApiPluginsBgpCommunityCreateRequest) WritableCommunityRequest(writableCommunityRequest WritableCommunityRequest) ApiPluginsBgpCommunityCreateRequest {
	r.writableCommunityRequest = &writableCommunityRequest
	return r
}

func (r ApiPluginsBgpCommunityCreateRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityCreateExecute(r)
}

/*
PluginsBgpCommunityCreate Method for PluginsBgpCommunityCreate

Post a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityCreate(ctx context.Context) ApiPluginsBgpCommunityCreateRequest {
	return ApiPluginsBgpCommunityCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityCreateExecute(r ApiPluginsBgpCommunityCreateRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCommunityRequest == nil {
		return localVarReturnValue, nil, reportError("writableCommunityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCommunityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityDestroyExecute(r)
}

/*
PluginsBgpCommunityDestroy Method for PluginsBgpCommunityDestroy

Delete a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityDestroy(ctx context.Context, id int32) ApiPluginsBgpCommunityDestroyRequest {
	return ApiPluginsBgpCommunityDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityDestroyExecute(r ApiPluginsBgpCommunityDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	q                 *string
	status            *string
	statusN           *string
	tag               *[]string
	tagN              *[]string
	tenant            *int32
	tenantN           *int32
	updatedByRequest  *string
	value             *[]string
	valueEmpty        *bool
	valueIc           *[]string
	valueIe           *[]string
	valueIew          *[]string
	valueIsw          *[]string
	valueN            *[]string
	valueNic          *[]string
	valueNie          *[]string
	valueNiew         *[]string
	valueNisw         *[]string
}

func (r ApiPluginsBgpCommunityListRequest) Created(created []time.Time) ApiPluginsBgpCommunityListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpCommunityListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpCommunityListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Description(description []string) ApiPluginsBgpCommunityListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpCommunityListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpCommunityListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Id(id []int32) ApiPluginsBgpCommunityListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpCommunityListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdGt(idGt []int32) ApiPluginsBgpCommunityListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdGte(idGte []int32) ApiPluginsBgpCommunityListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdLt(idLt []int32) ApiPluginsBgpCommunityListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdLte(idLte []int32) ApiPluginsBgpCommunityListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) IdN(idN []int32) ApiPluginsBgpCommunityListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpCommunityListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpCommunityListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpCommunityListRequest) Limit(limit int32) ApiPluginsBgpCommunityListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpCommunityListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpCommunityListRequest) Offset(offset int32) ApiPluginsBgpCommunityListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpCommunityListRequest) Ordering(ordering string) ApiPluginsBgpCommunityListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpCommunityListRequest) Q(q string) ApiPluginsBgpCommunityListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Status(status string) ApiPluginsBgpCommunityListRequest {
	r.status = &status
	return r
}

func (r ApiPluginsBgpCommunityListRequest) StatusN(statusN string) ApiPluginsBgpCommunityListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Tag(tag []string) ApiPluginsBgpCommunityListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TagN(tagN []string) ApiPluginsBgpCommunityListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Tenant(tenant int32) ApiPluginsBgpCommunityListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiPluginsBgpCommunityListRequest) TenantN(tenantN int32) ApiPluginsBgpCommunityListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpCommunityListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Value(value []string) ApiPluginsBgpCommunityListRequest {
	r.value = &value
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueEmpty(valueEmpty bool) ApiPluginsBgpCommunityListRequest {
	r.valueEmpty = &valueEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIc(valueIc []string) ApiPluginsBgpCommunityListRequest {
	r.valueIc = &valueIc
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIe(valueIe []string) ApiPluginsBgpCommunityListRequest {
	r.valueIe = &valueIe
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIew(valueIew []string) ApiPluginsBgpCommunityListRequest {
	r.valueIew = &valueIew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueIsw(valueIsw []string) ApiPluginsBgpCommunityListRequest {
	r.valueIsw = &valueIsw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueN(valueN []string) ApiPluginsBgpCommunityListRequest {
	r.valueN = &valueN
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNic(valueNic []string) ApiPluginsBgpCommunityListRequest {
	r.valueNic = &valueNic
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNie(valueNie []string) ApiPluginsBgpCommunityListRequest {
	r.valueNie = &valueNie
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNiew(valueNiew []string) ApiPluginsBgpCommunityListRequest {
	r.valueNiew = &valueNiew
	return r
}

func (r ApiPluginsBgpCommunityListRequest) ValueNisw(valueNisw []string) ApiPluginsBgpCommunityListRequest {
	r.valueNisw = &valueNisw
	return r
}

func (r ApiPluginsBgpCommunityListRequest) Execute() (*PaginatedCommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListExecute(r)
}

/*
PluginsBgpCommunityList Method for PluginsBgpCommunityList

Get a list of community objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityList(ctx context.Context) ApiPluginsBgpCommunityListRequest {
	return ApiPluginsBgpCommunityListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListExecute(r ApiPluginsBgpCommunityListRequest) (*PaginatedCommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", r.tenant, "")
	}
	if r.tenantN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", r.tenantN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value", t, "multi")
		}
	}
	if r.valueEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value__empty", r.valueEmpty, "")
	}
	if r.valueIc != nil {
		t := *r.valueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", t, "multi")
		}
	}
	if r.valueIe != nil {
		t := *r.valueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", t, "multi")
		}
	}
	if r.valueIew != nil {
		t := *r.valueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", t, "multi")
		}
	}
	if r.valueIsw != nil {
		t := *r.valueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", t, "multi")
		}
	}
	if r.valueN != nil {
		t := *r.valueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", t, "multi")
		}
	}
	if r.valueNic != nil {
		t := *r.valueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", t, "multi")
		}
	}
	if r.valueNie != nil {
		t := *r.valueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", t, "multi")
		}
	}
	if r.valueNiew != nil {
		t := *r.valueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", t, "multi")
		}
	}
	if r.valueNisw != nil {
		t := *r.valueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListCreateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	communityListRequest *CommunityListRequest
}

func (r ApiPluginsBgpCommunityListCreateRequest) CommunityListRequest(communityListRequest CommunityListRequest) ApiPluginsBgpCommunityListCreateRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListCreateRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListCreateExecute(r)
}

/*
PluginsBgpCommunityListCreate Method for PluginsBgpCommunityListCreate

Post a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListCreate(ctx context.Context) ApiPluginsBgpCommunityListCreateRequest {
	return ApiPluginsBgpCommunityListCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListCreateExecute(r ApiPluginsBgpCommunityListCreateRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListDestroyExecute(r)
}

/*
PluginsBgpCommunityListDestroy Method for PluginsBgpCommunityListDestroy

Delete a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListDestroy(ctx context.Context, id int32) ApiPluginsBgpCommunityListDestroyRequest {
	return ApiPluginsBgpCommunityListDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityListDestroyExecute(r ApiPluginsBgpCommunityListDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpCommunityListListRequest) Created(created []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpCommunityListListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Description(description []string) ApiPluginsBgpCommunityListListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpCommunityListListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpCommunityListListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Id(id []int32) ApiPluginsBgpCommunityListListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpCommunityListListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdGt(idGt []int32) ApiPluginsBgpCommunityListListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdGte(idGte []int32) ApiPluginsBgpCommunityListListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdLt(idLt []int32) ApiPluginsBgpCommunityListListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdLte(idLte []int32) ApiPluginsBgpCommunityListListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) IdN(idN []int32) ApiPluginsBgpCommunityListListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpCommunityListListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpCommunityListListRequest) Limit(limit int32) ApiPluginsBgpCommunityListListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpCommunityListListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Name(name []string) ApiPluginsBgpCommunityListListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpCommunityListListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIc(nameIc []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIe(nameIe []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIew(nameIew []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameIsw(nameIsw []string) ApiPluginsBgpCommunityListListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameN(nameN []string) ApiPluginsBgpCommunityListListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNic(nameNic []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNie(nameNie []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNiew(nameNiew []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) NameNisw(nameNisw []string) ApiPluginsBgpCommunityListListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpCommunityListListRequest) Offset(offset int32) ApiPluginsBgpCommunityListListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpCommunityListListRequest) Ordering(ordering string) ApiPluginsBgpCommunityListListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpCommunityListListRequest) Q(q string) ApiPluginsBgpCommunityListListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Tag(tag []string) ApiPluginsBgpCommunityListListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) TagN(tagN []string) ApiPluginsBgpCommunityListListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpCommunityListListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListListRequest) Execute() (*PaginatedCommunityListList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListListExecute(r)
}

/*
PluginsBgpCommunityListList Method for PluginsBgpCommunityListList

Get a list of community list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListListRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListList(ctx context.Context) ApiPluginsBgpCommunityListListRequest {
	return ApiPluginsBgpCommunityListListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCommunityListList
func (a *PluginsAPIService) PluginsBgpCommunityListListExecute(r ApiPluginsBgpCommunityListListRequest) (*PaginatedCommunityListList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCommunityListList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *PluginsAPIService
	id                          int32
	patchedCommunityListRequest *PatchedCommunityListRequest
}

func (r ApiPluginsBgpCommunityListPartialUpdateRequest) PatchedCommunityListRequest(patchedCommunityListRequest PatchedCommunityListRequest) ApiPluginsBgpCommunityListPartialUpdateRequest {
	r.patchedCommunityListRequest = &patchedCommunityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListPartialUpdateRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityListPartialUpdate Method for PluginsBgpCommunityListPartialUpdate

Patch a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListPartialUpdateRequest {
	return ApiPluginsBgpCommunityListPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListPartialUpdateExecute(r ApiPluginsBgpCommunityListPartialUpdateRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCommunityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListRetrieveRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRetrieveExecute(r)
}

/*
PluginsBgpCommunityListRetrieve Method for PluginsBgpCommunityListRetrieve

Get a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRetrieve(ctx context.Context, id int32) ApiPluginsBgpCommunityListRetrieveRequest {
	return ApiPluginsBgpCommunityListRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListRetrieveExecute(r ApiPluginsBgpCommunityListRetrieveRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleCreateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	writableCommunityListRuleRequest *WritableCommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleCreateRequest) WritableCommunityListRuleRequest(writableCommunityListRuleRequest WritableCommunityListRuleRequest) ApiPluginsBgpCommunityListRuleCreateRequest {
	r.writableCommunityListRuleRequest = &writableCommunityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleCreateRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleCreateExecute(r)
}

/*
PluginsBgpCommunityListRuleCreate Method for PluginsBgpCommunityListRuleCreate

Post a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleCreate(ctx context.Context) ApiPluginsBgpCommunityListRuleCreateRequest {
	return ApiPluginsBgpCommunityListRuleCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleCreateExecute(r ApiPluginsBgpCommunityListRuleCreateRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCommunityListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableCommunityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCommunityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListRuleDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleDestroyExecute(r)
}

/*
PluginsBgpCommunityListRuleDestroy Method for PluginsBgpCommunityListRuleDestroy

Delete a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRuleDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleDestroy(ctx context.Context, id int32) ApiPluginsBgpCommunityListRuleDestroyRequest {
	return ApiPluginsBgpCommunityListRuleDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpCommunityListRuleDestroyExecute(r ApiPluginsBgpCommunityListRuleDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	action            *string
	actionN           *string
	communityList     *int32
	communityListN    *int32
	communityListId   *int32
	communityListIdN  *int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Action(action string) ApiPluginsBgpCommunityListRuleListRequest {
	r.action = &action
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) ActionN(actionN string) ApiPluginsBgpCommunityListRuleListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityList(communityList int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityList = &communityList
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityListN(communityListN int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityListN = &communityListN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityListId(communityListId int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityListId = &communityListId
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CommunityListIdN(communityListIdN int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.communityListIdN = &communityListIdN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Created(created []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpCommunityListRuleListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Id(id []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpCommunityListRuleListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdGt(idGt []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdGte(idGte []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdLt(idLt []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdLte(idLte []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) IdN(idN []int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpCommunityListRuleListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpCommunityListRuleListRequest) Limit(limit int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpCommunityListRuleListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpCommunityListRuleListRequest) Offset(offset int32) ApiPluginsBgpCommunityListRuleListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpCommunityListRuleListRequest) Ordering(ordering string) ApiPluginsBgpCommunityListRuleListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpCommunityListRuleListRequest) Q(q string) ApiPluginsBgpCommunityListRuleListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Tag(tag []string) ApiPluginsBgpCommunityListRuleListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) TagN(tagN []string) ApiPluginsBgpCommunityListRuleListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpCommunityListRuleListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleListRequest) Execute() (*PaginatedCommunityListRuleList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleListExecute(r)
}

/*
PluginsBgpCommunityListRuleList Method for PluginsBgpCommunityListRuleList

Get a list of community list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpCommunityListRuleListRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleList(ctx context.Context) ApiPluginsBgpCommunityListRuleListRequest {
	return ApiPluginsBgpCommunityListRuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCommunityListRuleList
func (a *PluginsAPIService) PluginsBgpCommunityListRuleListExecute(r ApiPluginsBgpCommunityListRuleListRequest) (*PaginatedCommunityListRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCommunityListRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.communityList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list", r.communityList, "")
	}
	if r.communityListN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list__n", r.communityListN, "")
	}
	if r.communityListId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list_id", r.communityListId, "")
	}
	if r.communityListIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "community_list_id__n", r.communityListIdN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRulePartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *PluginsAPIService
	id                                      int32
	patchedWritableCommunityListRuleRequest *PatchedWritableCommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRulePartialUpdateRequest) PatchedWritableCommunityListRuleRequest(patchedWritableCommunityListRuleRequest PatchedWritableCommunityListRuleRequest) ApiPluginsBgpCommunityListRulePartialUpdateRequest {
	r.patchedWritableCommunityListRuleRequest = &patchedWritableCommunityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRulePartialUpdateRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRulePartialUpdateExecute(r)
}

/*
PluginsBgpCommunityListRulePartialUpdate Method for PluginsBgpCommunityListRulePartialUpdate

Patch a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRulePartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRulePartialUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListRulePartialUpdateRequest {
	return ApiPluginsBgpCommunityListRulePartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRulePartialUpdateExecute(r ApiPluginsBgpCommunityListRulePartialUpdateRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRulePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCommunityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityListRuleRetrieveRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleRetrieveExecute(r)
}

/*
PluginsBgpCommunityListRuleRetrieve Method for PluginsBgpCommunityListRuleRetrieve

Get a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRuleRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleRetrieve(ctx context.Context, id int32) ApiPluginsBgpCommunityListRuleRetrieveRequest {
	return ApiPluginsBgpCommunityListRuleRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleRetrieveExecute(r ApiPluginsBgpCommunityListRuleRetrieveRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListRuleUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	writableCommunityListRuleRequest *WritableCommunityListRuleRequest
}

func (r ApiPluginsBgpCommunityListRuleUpdateRequest) WritableCommunityListRuleRequest(writableCommunityListRuleRequest WritableCommunityListRuleRequest) ApiPluginsBgpCommunityListRuleUpdateRequest {
	r.writableCommunityListRuleRequest = &writableCommunityListRuleRequest
	return r
}

func (r ApiPluginsBgpCommunityListRuleUpdateRequest) Execute() (*CommunityListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListRuleUpdateExecute(r)
}

/*
PluginsBgpCommunityListRuleUpdate Method for PluginsBgpCommunityListRuleUpdate

Put a community list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list rule.
	@return ApiPluginsBgpCommunityListRuleUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListRuleUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListRuleUpdateRequest {
	return ApiPluginsBgpCommunityListRuleUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityListRule
func (a *PluginsAPIService) PluginsBgpCommunityListRuleUpdateExecute(r ApiPluginsBgpCommunityListRuleUpdateRequest) (*CommunityListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListRuleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCommunityListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableCommunityListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCommunityListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityListUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	id                   int32
	communityListRequest *CommunityListRequest
}

func (r ApiPluginsBgpCommunityListUpdateRequest) CommunityListRequest(communityListRequest CommunityListRequest) ApiPluginsBgpCommunityListUpdateRequest {
	r.communityListRequest = &communityListRequest
	return r
}

func (r ApiPluginsBgpCommunityListUpdateRequest) Execute() (*CommunityList, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityListUpdateExecute(r)
}

/*
PluginsBgpCommunityListUpdate Method for PluginsBgpCommunityListUpdate

Put a community list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community list.
	@return ApiPluginsBgpCommunityListUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityListUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityListUpdateRequest {
	return ApiPluginsBgpCommunityListUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CommunityList
func (a *PluginsAPIService) PluginsBgpCommunityListUpdateExecute(r ApiPluginsBgpCommunityListUpdateRequest) (*CommunityList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CommunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityListUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communityListRequest == nil {
		return localVarReturnValue, nil, reportError("communityListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.communityListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *PluginsAPIService
	id                              int32
	patchedWritableCommunityRequest *PatchedWritableCommunityRequest
}

func (r ApiPluginsBgpCommunityPartialUpdateRequest) PatchedWritableCommunityRequest(patchedWritableCommunityRequest PatchedWritableCommunityRequest) ApiPluginsBgpCommunityPartialUpdateRequest {
	r.patchedWritableCommunityRequest = &patchedWritableCommunityRequest
	return r
}

func (r ApiPluginsBgpCommunityPartialUpdateRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityPartialUpdateExecute(r)
}

/*
PluginsBgpCommunityPartialUpdate Method for PluginsBgpCommunityPartialUpdate

Patch a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityPartialUpdateRequest {
	return ApiPluginsBgpCommunityPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityPartialUpdateExecute(r ApiPluginsBgpCommunityPartialUpdateRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCommunityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpCommunityRetrieveRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityRetrieveExecute(r)
}

/*
PluginsBgpCommunityRetrieve Method for PluginsBgpCommunityRetrieve

Get a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityRetrieve(ctx context.Context, id int32) ApiPluginsBgpCommunityRetrieveRequest {
	return ApiPluginsBgpCommunityRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityRetrieveExecute(r ApiPluginsBgpCommunityRetrieveRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpCommunityUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	writableCommunityRequest *WritableCommunityRequest
}

func (r ApiPluginsBgpCommunityUpdateRequest) WritableCommunityRequest(writableCommunityRequest WritableCommunityRequest) ApiPluginsBgpCommunityUpdateRequest {
	r.writableCommunityRequest = &writableCommunityRequest
	return r
}

func (r ApiPluginsBgpCommunityUpdateRequest) Execute() (*Community, *http.Response, error) {
	return r.ApiService.PluginsBgpCommunityUpdateExecute(r)
}

/*
PluginsBgpCommunityUpdate Method for PluginsBgpCommunityUpdate

Put a community object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this community.
	@return ApiPluginsBgpCommunityUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpCommunityUpdate(ctx context.Context, id int32) ApiPluginsBgpCommunityUpdateRequest {
	return ApiPluginsBgpCommunityUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Community
func (a *PluginsAPIService) PluginsBgpCommunityUpdateExecute(r ApiPluginsBgpCommunityUpdateRequest) (*Community, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Community
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpCommunityUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/community/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCommunityRequest == nil {
		return localVarReturnValue, nil, reportError("writableCommunityRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCommunityRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupCreateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupCreateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpPeerGroupCreateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupCreateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupCreateExecute(r)
}

/*
PluginsBgpPeerGroupCreate Method for PluginsBgpPeerGroupCreate

Post a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupCreate(ctx context.Context) ApiPluginsBgpPeerGroupCreateRequest {
	return ApiPluginsBgpPeerGroupCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupCreateExecute(r ApiPluginsBgpPeerGroupCreateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPeerGroupDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupDestroyExecute(r)
}

/*
PluginsBgpPeerGroupDestroy Method for PluginsBgpPeerGroupDestroy

Delete a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupDestroy(ctx context.Context, id int32) ApiPluginsBgpPeerGroupDestroyRequest {
	return ApiPluginsBgpPeerGroupDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPeerGroupDestroyExecute(r ApiPluginsBgpPeerGroupDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpPeerGroupListRequest) Created(created []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpPeerGroupListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Description(description []string) ApiPluginsBgpPeerGroupListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpPeerGroupListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Id(id []int32) ApiPluginsBgpPeerGroupListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpPeerGroupListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdGt(idGt []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdGte(idGte []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdLt(idLt []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdLte(idLte []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) IdN(idN []int32) ApiPluginsBgpPeerGroupListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpPeerGroupListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpPeerGroupListRequest) Limit(limit int32) ApiPluginsBgpPeerGroupListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpPeerGroupListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Name(name []string) ApiPluginsBgpPeerGroupListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpPeerGroupListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIc(nameIc []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIe(nameIe []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIew(nameIew []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameIsw(nameIsw []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameN(nameN []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNic(nameNic []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNie(nameNie []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNiew(nameNiew []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) NameNisw(nameNisw []string) ApiPluginsBgpPeerGroupListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpPeerGroupListRequest) Offset(offset int32) ApiPluginsBgpPeerGroupListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpPeerGroupListRequest) Ordering(ordering string) ApiPluginsBgpPeerGroupListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpPeerGroupListRequest) Q(q string) ApiPluginsBgpPeerGroupListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Tag(tag []string) ApiPluginsBgpPeerGroupListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) TagN(tagN []string) ApiPluginsBgpPeerGroupListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpPeerGroupListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpPeerGroupListRequest) Execute() (*PaginatedBGPPeerGroupList, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupListExecute(r)
}

/*
PluginsBgpPeerGroupList Method for PluginsBgpPeerGroupList

Get a list of bgp peer group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPeerGroupListRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupList(ctx context.Context) ApiPluginsBgpPeerGroupListRequest {
	return ApiPluginsBgpPeerGroupListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPPeerGroupList
func (a *PluginsAPIService) PluginsBgpPeerGroupListExecute(r ApiPluginsBgpPeerGroupListRequest) (*PaginatedBGPPeerGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPPeerGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *PluginsAPIService
	id                         int32
	patchedBGPPeerGroupRequest *PatchedBGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupPartialUpdateRequest) PatchedBGPPeerGroupRequest(patchedBGPPeerGroupRequest PatchedBGPPeerGroupRequest) ApiPluginsBgpPeerGroupPartialUpdateRequest {
	r.patchedBGPPeerGroupRequest = &patchedBGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupPartialUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupPartialUpdateExecute(r)
}

/*
PluginsBgpPeerGroupPartialUpdate Method for PluginsBgpPeerGroupPartialUpdate

Patch a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpPeerGroupPartialUpdateRequest {
	return ApiPluginsBgpPeerGroupPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupPartialUpdateExecute(r ApiPluginsBgpPeerGroupPartialUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPeerGroupRetrieveRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupRetrieveExecute(r)
}

/*
PluginsBgpPeerGroupRetrieve Method for PluginsBgpPeerGroupRetrieve

Get a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupRetrieve(ctx context.Context, id int32) ApiPluginsBgpPeerGroupRetrieveRequest {
	return ApiPluginsBgpPeerGroupRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupRetrieveExecute(r ApiPluginsBgpPeerGroupRetrieveRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPeerGroupUpdateRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	id                  int32
	bGPPeerGroupRequest *BGPPeerGroupRequest
}

func (r ApiPluginsBgpPeerGroupUpdateRequest) BGPPeerGroupRequest(bGPPeerGroupRequest BGPPeerGroupRequest) ApiPluginsBgpPeerGroupUpdateRequest {
	r.bGPPeerGroupRequest = &bGPPeerGroupRequest
	return r
}

func (r ApiPluginsBgpPeerGroupUpdateRequest) Execute() (*BGPPeerGroup, *http.Response, error) {
	return r.ApiService.PluginsBgpPeerGroupUpdateExecute(r)
}

/*
PluginsBgpPeerGroupUpdate Method for PluginsBgpPeerGroupUpdate

Put a bgp peer group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp peer group.
	@return ApiPluginsBgpPeerGroupUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPeerGroupUpdate(ctx context.Context, id int32) ApiPluginsBgpPeerGroupUpdateRequest {
	return ApiPluginsBgpPeerGroupUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPPeerGroup
func (a *PluginsAPIService) PluginsBgpPeerGroupUpdateExecute(r ApiPluginsBgpPeerGroupUpdateRequest) (*BGPPeerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPPeerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPeerGroupUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/peer-group/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bGPPeerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bGPPeerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bGPPeerGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListCreateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	prefixListRequest *PrefixListRequest
}

func (r ApiPluginsBgpPrefixListCreateRequest) PrefixListRequest(prefixListRequest PrefixListRequest) ApiPluginsBgpPrefixListCreateRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListCreateRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListCreateExecute(r)
}

/*
PluginsBgpPrefixListCreate Method for PluginsBgpPrefixListCreate

Post a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListCreate(ctx context.Context) ApiPluginsBgpPrefixListCreateRequest {
	return ApiPluginsBgpPrefixListCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListCreateExecute(r ApiPluginsBgpPrefixListCreateRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListDestroyExecute(r)
}

/*
PluginsBgpPrefixListDestroy Method for PluginsBgpPrefixListDestroy

Delete a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListDestroy(ctx context.Context, id int32) ApiPluginsBgpPrefixListDestroyRequest {
	return ApiPluginsBgpPrefixListDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPrefixListDestroyExecute(r ApiPluginsBgpPrefixListDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpPrefixListListRequest) Created(created []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpPrefixListListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Description(description []string) ApiPluginsBgpPrefixListListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpPrefixListListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpPrefixListListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Id(id []int32) ApiPluginsBgpPrefixListListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpPrefixListListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdGt(idGt []int32) ApiPluginsBgpPrefixListListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdGte(idGte []int32) ApiPluginsBgpPrefixListListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdLt(idLt []int32) ApiPluginsBgpPrefixListListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdLte(idLte []int32) ApiPluginsBgpPrefixListListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) IdN(idN []int32) ApiPluginsBgpPrefixListListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpPrefixListListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpPrefixListListRequest) Limit(limit int32) ApiPluginsBgpPrefixListListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpPrefixListListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Name(name []string) ApiPluginsBgpPrefixListListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpPrefixListListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIc(nameIc []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIe(nameIe []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIew(nameIew []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameIsw(nameIsw []string) ApiPluginsBgpPrefixListListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameN(nameN []string) ApiPluginsBgpPrefixListListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNic(nameNic []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNie(nameNie []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNiew(nameNiew []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) NameNisw(nameNisw []string) ApiPluginsBgpPrefixListListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpPrefixListListRequest) Offset(offset int32) ApiPluginsBgpPrefixListListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpPrefixListListRequest) Ordering(ordering string) ApiPluginsBgpPrefixListListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpPrefixListListRequest) Q(q string) ApiPluginsBgpPrefixListListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Tag(tag []string) ApiPluginsBgpPrefixListListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) TagN(tagN []string) ApiPluginsBgpPrefixListListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpPrefixListListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpPrefixListListRequest) Execute() (*PaginatedPrefixListList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListListExecute(r)
}

/*
PluginsBgpPrefixListList Method for PluginsBgpPrefixListList

Get a list of prefix list objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListListRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListList(ctx context.Context) ApiPluginsBgpPrefixListListRequest {
	return ApiPluginsBgpPrefixListListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPrefixListList
func (a *PluginsAPIService) PluginsBgpPrefixListListExecute(r ApiPluginsBgpPrefixListListRequest) (*PaginatedPrefixListList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPrefixListList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	patchedPrefixListRequest *PatchedPrefixListRequest
}

func (r ApiPluginsBgpPrefixListPartialUpdateRequest) PatchedPrefixListRequest(patchedPrefixListRequest PatchedPrefixListRequest) ApiPluginsBgpPrefixListPartialUpdateRequest {
	r.patchedPrefixListRequest = &patchedPrefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListPartialUpdateRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListPartialUpdateExecute(r)
}

/*
PluginsBgpPrefixListPartialUpdate Method for PluginsBgpPrefixListPartialUpdate

Patch a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListPartialUpdateRequest {
	return ApiPluginsBgpPrefixListPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListPartialUpdateExecute(r ApiPluginsBgpPrefixListPartialUpdateRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedPrefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListRetrieveRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRetrieveExecute(r)
}

/*
PluginsBgpPrefixListRetrieve Method for PluginsBgpPrefixListRetrieve

Get a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRetrieve(ctx context.Context, id int32) ApiPluginsBgpPrefixListRetrieveRequest {
	return ApiPluginsBgpPrefixListRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListRetrieveExecute(r ApiPluginsBgpPrefixListRetrieveRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleCreateRequest struct {
	ctx                           context.Context
	ApiService                    *PluginsAPIService
	writablePrefixListRuleRequest *WritablePrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleCreateRequest) WritablePrefixListRuleRequest(writablePrefixListRuleRequest WritablePrefixListRuleRequest) ApiPluginsBgpPrefixListRuleCreateRequest {
	r.writablePrefixListRuleRequest = &writablePrefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleCreateRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleCreateExecute(r)
}

/*
PluginsBgpPrefixListRuleCreate Method for PluginsBgpPrefixListRuleCreate

Post a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleCreate(ctx context.Context) ApiPluginsBgpPrefixListRuleCreateRequest {
	return ApiPluginsBgpPrefixListRuleCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleCreateExecute(r ApiPluginsBgpPrefixListRuleCreateRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePrefixListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writablePrefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePrefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListRuleDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleDestroyExecute(r)
}

/*
PluginsBgpPrefixListRuleDestroy Method for PluginsBgpPrefixListRuleDestroy

Delete a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRuleDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleDestroy(ctx context.Context, id int32) ApiPluginsBgpPrefixListRuleDestroyRequest {
	return ApiPluginsBgpPrefixListRuleDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpPrefixListRuleDestroyExecute(r ApiPluginsBgpPrefixListRuleDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	action            *string
	actionN           *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	ge                *[]int32
	geEmpty           *bool
	geGt              *[]int32
	geGte             *[]int32
	geLt              *[]int32
	geLte             *[]int32
	geN               *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	index             *[]int32
	indexEmpty        *bool
	indexGt           *[]int32
	indexGte          *[]int32
	indexLt           *[]int32
	indexLte          *[]int32
	indexN            *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	le                *[]int32
	leEmpty           *bool
	leGt              *[]int32
	leGte             *[]int32
	leLt              *[]int32
	leLte             *[]int32
	leN               *[]int32
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	prefixList        *int32
	prefixListN       *int32
	prefixListId      *int32
	prefixListIdN     *int32
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Action(action string) ApiPluginsBgpPrefixListRuleListRequest {
	r.action = &action
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) ActionN(actionN string) ApiPluginsBgpPrefixListRuleListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Created(created []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpPrefixListRuleListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Ge(ge []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.ge = &ge
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeEmpty(geEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.geEmpty = &geEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeGt(geGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geGt = &geGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeGte(geGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geGte = &geGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeLt(geLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geLt = &geLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeLte(geLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geLte = &geLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) GeN(geN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.geN = &geN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Id(id []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdGt(idGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdGte(idGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdLt(idLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdLte(idLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IdN(idN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Index(index []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.index = &index
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexEmpty(indexEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexEmpty = &indexEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexGt(indexGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexGt = &indexGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexGte(indexGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexGte = &indexGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexLt(indexLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexLt = &indexLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexLte(indexLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexLte = &indexLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) IndexN(indexN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.indexN = &indexN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpPrefixListRuleListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Le(le []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.le = &le
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeEmpty(leEmpty bool) ApiPluginsBgpPrefixListRuleListRequest {
	r.leEmpty = &leEmpty
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeGt(leGt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leGt = &leGt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeGte(leGte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leGte = &leGte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeLt(leLt []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leLt = &leLt
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeLte(leLte []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leLte = &leLte
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) LeN(leN []int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.leN = &leN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpPrefixListRuleListRequest) Limit(limit int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpPrefixListRuleListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpPrefixListRuleListRequest) Offset(offset int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpPrefixListRuleListRequest) Ordering(ordering string) ApiPluginsBgpPrefixListRuleListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixList(prefixList int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixList = &prefixList
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixListN(prefixListN int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixListN = &prefixListN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixListId(prefixListId int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixListId = &prefixListId
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) PrefixListIdN(prefixListIdN int32) ApiPluginsBgpPrefixListRuleListRequest {
	r.prefixListIdN = &prefixListIdN
	return r
}

// Search
func (r ApiPluginsBgpPrefixListRuleListRequest) Q(q string) ApiPluginsBgpPrefixListRuleListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Tag(tag []string) ApiPluginsBgpPrefixListRuleListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) TagN(tagN []string) ApiPluginsBgpPrefixListRuleListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpPrefixListRuleListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleListRequest) Execute() (*PaginatedPrefixListRuleList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleListExecute(r)
}

/*
PluginsBgpPrefixListRuleList Method for PluginsBgpPrefixListRuleList

Get a list of prefix list rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpPrefixListRuleListRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleList(ctx context.Context) ApiPluginsBgpPrefixListRuleListRequest {
	return ApiPluginsBgpPrefixListRuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPrefixListRuleList
func (a *PluginsAPIService) PluginsBgpPrefixListRuleListExecute(r ApiPluginsBgpPrefixListRuleListRequest) (*PaginatedPrefixListRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPrefixListRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.ge != nil {
		t := *r.ge
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge", t, "multi")
		}
	}
	if r.geEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ge__empty", r.geEmpty, "")
	}
	if r.geGt != nil {
		t := *r.geGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gt", t, "multi")
		}
	}
	if r.geGte != nil {
		t := *r.geGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__gte", t, "multi")
		}
	}
	if r.geLt != nil {
		t := *r.geLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lt", t, "multi")
		}
	}
	if r.geLte != nil {
		t := *r.geLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__lte", t, "multi")
		}
	}
	if r.geN != nil {
		t := *r.geN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ge__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ge__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.index != nil {
		t := *r.index
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index", t, "multi")
		}
	}
	if r.indexEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "index__empty", r.indexEmpty, "")
	}
	if r.indexGt != nil {
		t := *r.indexGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", t, "multi")
		}
	}
	if r.indexGte != nil {
		t := *r.indexGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", t, "multi")
		}
	}
	if r.indexLt != nil {
		t := *r.indexLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", t, "multi")
		}
	}
	if r.indexLte != nil {
		t := *r.indexLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", t, "multi")
		}
	}
	if r.indexN != nil {
		t := *r.indexN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.le != nil {
		t := *r.le
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le", t, "multi")
		}
	}
	if r.leEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "le__empty", r.leEmpty, "")
	}
	if r.leGt != nil {
		t := *r.leGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__gt", t, "multi")
		}
	}
	if r.leGte != nil {
		t := *r.leGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__gte", t, "multi")
		}
	}
	if r.leLt != nil {
		t := *r.leLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__lt", t, "multi")
		}
	}
	if r.leLte != nil {
		t := *r.leLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__lte", t, "multi")
		}
	}
	if r.leN != nil {
		t := *r.leN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "le__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "le__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.prefixList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list", r.prefixList, "")
	}
	if r.prefixListN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list__n", r.prefixListN, "")
	}
	if r.prefixListId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list_id", r.prefixListId, "")
	}
	if r.prefixListIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix_list_id__n", r.prefixListIdN, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRulePartialUpdateRequest struct {
	ctx                                  context.Context
	ApiService                           *PluginsAPIService
	id                                   int32
	patchedWritablePrefixListRuleRequest *PatchedWritablePrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRulePartialUpdateRequest) PatchedWritablePrefixListRuleRequest(patchedWritablePrefixListRuleRequest PatchedWritablePrefixListRuleRequest) ApiPluginsBgpPrefixListRulePartialUpdateRequest {
	r.patchedWritablePrefixListRuleRequest = &patchedWritablePrefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRulePartialUpdateRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRulePartialUpdateExecute(r)
}

/*
PluginsBgpPrefixListRulePartialUpdate Method for PluginsBgpPrefixListRulePartialUpdate

Patch a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRulePartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRulePartialUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListRulePartialUpdateRequest {
	return ApiPluginsBgpPrefixListRulePartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRulePartialUpdateExecute(r ApiPluginsBgpPrefixListRulePartialUpdateRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRulePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePrefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpPrefixListRuleRetrieveRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleRetrieveExecute(r)
}

/*
PluginsBgpPrefixListRuleRetrieve Method for PluginsBgpPrefixListRuleRetrieve

Get a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRuleRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleRetrieve(ctx context.Context, id int32) ApiPluginsBgpPrefixListRuleRetrieveRequest {
	return ApiPluginsBgpPrefixListRuleRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleRetrieveExecute(r ApiPluginsBgpPrefixListRuleRetrieveRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListRuleUpdateRequest struct {
	ctx                           context.Context
	ApiService                    *PluginsAPIService
	id                            int32
	writablePrefixListRuleRequest *WritablePrefixListRuleRequest
}

func (r ApiPluginsBgpPrefixListRuleUpdateRequest) WritablePrefixListRuleRequest(writablePrefixListRuleRequest WritablePrefixListRuleRequest) ApiPluginsBgpPrefixListRuleUpdateRequest {
	r.writablePrefixListRuleRequest = &writablePrefixListRuleRequest
	return r
}

func (r ApiPluginsBgpPrefixListRuleUpdateRequest) Execute() (*PrefixListRule, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListRuleUpdateExecute(r)
}

/*
PluginsBgpPrefixListRuleUpdate Method for PluginsBgpPrefixListRuleUpdate

Put a prefix list rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list rule.
	@return ApiPluginsBgpPrefixListRuleUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListRuleUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListRuleUpdateRequest {
	return ApiPluginsBgpPrefixListRuleUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixListRule
func (a *PluginsAPIService) PluginsBgpPrefixListRuleUpdateExecute(r ApiPluginsBgpPrefixListRuleUpdateRequest) (*PrefixListRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixListRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListRuleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePrefixListRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writablePrefixListRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePrefixListRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpPrefixListUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	id                int32
	prefixListRequest *PrefixListRequest
}

func (r ApiPluginsBgpPrefixListUpdateRequest) PrefixListRequest(prefixListRequest PrefixListRequest) ApiPluginsBgpPrefixListUpdateRequest {
	r.prefixListRequest = &prefixListRequest
	return r
}

func (r ApiPluginsBgpPrefixListUpdateRequest) Execute() (*PrefixList, *http.Response, error) {
	return r.ApiService.PluginsBgpPrefixListUpdateExecute(r)
}

/*
PluginsBgpPrefixListUpdate Method for PluginsBgpPrefixListUpdate

Put a prefix list object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this prefix list.
	@return ApiPluginsBgpPrefixListUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpPrefixListUpdate(ctx context.Context, id int32) ApiPluginsBgpPrefixListUpdateRequest {
	return ApiPluginsBgpPrefixListUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrefixList
func (a *PluginsAPIService) PluginsBgpPrefixListUpdateExecute(r ApiPluginsBgpPrefixListUpdateRequest) (*PrefixList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrefixList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpPrefixListUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/prefix-list/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prefixListRequest == nil {
		return localVarReturnValue, nil, reportError("prefixListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prefixListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyCreateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	routingPolicyRequest *RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyCreateRequest) RoutingPolicyRequest(routingPolicyRequest RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyCreateRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyCreateRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyCreateExecute(r)
}

/*
PluginsBgpRoutingPolicyCreate Method for PluginsBgpRoutingPolicyCreate

Post a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyCreate(ctx context.Context) ApiPluginsBgpRoutingPolicyCreateRequest {
	return ApiPluginsBgpRoutingPolicyCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyCreateExecute(r ApiPluginsBgpRoutingPolicyCreateRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyDestroyExecute(r)
}

/*
PluginsBgpRoutingPolicyDestroy Method for PluginsBgpRoutingPolicyDestroy

Delete a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyDestroy(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyDestroyRequest {
	return ApiPluginsBgpRoutingPolicyDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpRoutingPolicyDestroyExecute(r ApiPluginsBgpRoutingPolicyDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Created(created []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpRoutingPolicyListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Description(description []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Id(id []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpRoutingPolicyListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdGt(idGt []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdGte(idGte []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdLt(idLt []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdLte(idLte []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) IdN(idN []int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpRoutingPolicyListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpRoutingPolicyListRequest) Limit(limit int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpRoutingPolicyListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Name(name []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIc(nameIc []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIe(nameIe []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIew(nameIew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameIsw(nameIsw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameN(nameN []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNic(nameNic []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNie(nameNie []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNiew(nameNiew []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) NameNisw(nameNisw []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpRoutingPolicyListRequest) Offset(offset int32) ApiPluginsBgpRoutingPolicyListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpRoutingPolicyListRequest) Ordering(ordering string) ApiPluginsBgpRoutingPolicyListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpRoutingPolicyListRequest) Q(q string) ApiPluginsBgpRoutingPolicyListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Tag(tag []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) TagN(tagN []string) ApiPluginsBgpRoutingPolicyListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpRoutingPolicyListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyListRequest) Execute() (*PaginatedRoutingPolicyList, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyListExecute(r)
}

/*
PluginsBgpRoutingPolicyList Method for PluginsBgpRoutingPolicyList

Get a list of routing policy objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyListRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyList(ctx context.Context) ApiPluginsBgpRoutingPolicyListRequest {
	return ApiPluginsBgpRoutingPolicyListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRoutingPolicyList
func (a *PluginsAPIService) PluginsBgpRoutingPolicyListExecute(r ApiPluginsBgpRoutingPolicyListRequest) (*PaginatedRoutingPolicyList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRoutingPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *PluginsAPIService
	id                          int32
	patchedRoutingPolicyRequest *PatchedRoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyPartialUpdateRequest) PatchedRoutingPolicyRequest(patchedRoutingPolicyRequest PatchedRoutingPolicyRequest) ApiPluginsBgpRoutingPolicyPartialUpdateRequest {
	r.patchedRoutingPolicyRequest = &patchedRoutingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyPartialUpdateRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyPartialUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyPartialUpdate Method for PluginsBgpRoutingPolicyPartialUpdate

Patch a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyPartialUpdateRequest {
	return ApiPluginsBgpRoutingPolicyPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyPartialUpdateExecute(r ApiPluginsBgpRoutingPolicyPartialUpdateRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRoutingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyRetrieveRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRetrieveExecute(r)
}

/*
PluginsBgpRoutingPolicyRetrieve Method for PluginsBgpRoutingPolicyRetrieve

Get a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRetrieve(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRetrieveRequest {
	return ApiPluginsBgpRoutingPolicyRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRetrieveExecute(r ApiPluginsBgpRoutingPolicyRetrieveRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleCreateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	writableRoutingPolicyRuleRequest *WritableRoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleCreateRequest) WritableRoutingPolicyRuleRequest(writableRoutingPolicyRuleRequest WritableRoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleCreateRequest {
	r.writableRoutingPolicyRuleRequest = &writableRoutingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleCreateRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleCreateExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleCreate Method for PluginsBgpRoutingPolicyRuleCreate

Post a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleCreate(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleCreateRequest {
	return ApiPluginsBgpRoutingPolicyRuleCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleCreateExecute(r ApiPluginsBgpRoutingPolicyRuleCreateRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRoutingPolicyRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableRoutingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRoutingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyRuleDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleDestroyExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleDestroy Method for PluginsBgpRoutingPolicyRuleDestroy

Delete a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRuleDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleDestroy(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRuleDestroyRequest {
	return ApiPluginsBgpRoutingPolicyRuleDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleDestroyExecute(r ApiPluginsBgpRoutingPolicyRuleDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleListRequest struct {
	ctx                context.Context
	ApiService         *PluginsAPIService
	action             *string
	actionN            *string
	continueEntry      *[]int32
	continueEntryEmpty *bool
	continueEntryGt    *[]int32
	continueEntryGte   *[]int32
	continueEntryLt    *[]int32
	continueEntryLte   *[]int32
	continueEntryN     *[]int32
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	index              *[]int32
	indexEmpty         *bool
	indexGt            *[]int32
	indexGte           *[]int32
	indexLt            *[]int32
	indexLte           *[]int32
	indexN             *[]int32
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	modifiedByRequest  *string
	offset             *int32
	ordering           *string
	q                  *string
	routingPolicyId    *int32
	routingPolicyIdN   *int32
	tag                *[]string
	tagN               *[]string
	updatedByRequest   *string
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Action(action string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.action = &action
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ActionN(actionN string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntry(continueEntry []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntry = &continueEntry
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryEmpty(continueEntryEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryEmpty = &continueEntryEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryGt(continueEntryGt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryGt = &continueEntryGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryGte(continueEntryGte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryGte = &continueEntryGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryLt(continueEntryLt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryLt = &continueEntryLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryLte(continueEntryLte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryLte = &continueEntryLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ContinueEntryN(continueEntryN []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.continueEntryN = &continueEntryN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Created(created []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Description(description []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Id(id []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdGt(idGt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdGte(idGte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdLt(idLt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdLte(idLte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IdN(idN []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Index(index []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.index = &index
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexEmpty(indexEmpty bool) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexEmpty = &indexEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexGt(indexGt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexGt = &indexGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexGte(indexGte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexGte = &indexGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexLt(indexLt []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexLt = &indexLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexLte(indexLte []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexLte = &indexLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) IndexN(indexN []int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.indexN = &indexN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Limit(limit int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Offset(offset int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Ordering(ordering string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Q(q string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) RoutingPolicyId(routingPolicyId int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.routingPolicyId = &routingPolicyId
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) RoutingPolicyIdN(routingPolicyIdN int32) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.routingPolicyIdN = &routingPolicyIdN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Tag(tag []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) TagN(tagN []string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpRoutingPolicyRuleListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleListRequest) Execute() (*PaginatedRoutingPolicyRuleList, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleListExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleList Method for PluginsBgpRoutingPolicyRuleList

Get a list of routing policy rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpRoutingPolicyRuleListRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleList(ctx context.Context) ApiPluginsBgpRoutingPolicyRuleListRequest {
	return ApiPluginsBgpRoutingPolicyRuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRoutingPolicyRuleList
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleListExecute(r ApiPluginsBgpRoutingPolicyRuleListRequest) (*PaginatedRoutingPolicyRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRoutingPolicyRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.continueEntry != nil {
		t := *r.continueEntry
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry", t, "multi")
		}
	}
	if r.continueEntryEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__empty", r.continueEntryEmpty, "")
	}
	if r.continueEntryGt != nil {
		t := *r.continueEntryGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gt", t, "multi")
		}
	}
	if r.continueEntryGte != nil {
		t := *r.continueEntryGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__gte", t, "multi")
		}
	}
	if r.continueEntryLt != nil {
		t := *r.continueEntryLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lt", t, "multi")
		}
	}
	if r.continueEntryLte != nil {
		t := *r.continueEntryLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__lte", t, "multi")
		}
	}
	if r.continueEntryN != nil {
		t := *r.continueEntryN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "continue_entry__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.index != nil {
		t := *r.index
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index", t, "multi")
		}
	}
	if r.indexEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "index__empty", r.indexEmpty, "")
	}
	if r.indexGt != nil {
		t := *r.indexGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gt", t, "multi")
		}
	}
	if r.indexGte != nil {
		t := *r.indexGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__gte", t, "multi")
		}
	}
	if r.indexLt != nil {
		t := *r.indexLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lt", t, "multi")
		}
	}
	if r.indexLte != nil {
		t := *r.indexLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__lte", t, "multi")
		}
	}
	if r.indexN != nil {
		t := *r.indexN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "index__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.routingPolicyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "routing_policy_id", r.routingPolicyId, "")
	}
	if r.routingPolicyIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "routing_policy_id__n", r.routingPolicyIdN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *PluginsAPIService
	id                                      int32
	patchedWritableRoutingPolicyRuleRequest *PatchedWritableRoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest) PatchedWritableRoutingPolicyRuleRequest(patchedWritableRoutingPolicyRuleRequest PatchedWritableRoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest {
	r.patchedWritableRoutingPolicyRuleRequest = &patchedWritableRoutingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRulePartialUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyRulePartialUpdate Method for PluginsBgpRoutingPolicyRulePartialUpdate

Patch a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRulePartialUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest {
	return ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRulePartialUpdateExecute(r ApiPluginsBgpRoutingPolicyRulePartialUpdateRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRulePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRoutingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpRoutingPolicyRuleRetrieveRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleRetrieveExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleRetrieve Method for PluginsBgpRoutingPolicyRuleRetrieve

Get a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRuleRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleRetrieve(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRuleRetrieveRequest {
	return ApiPluginsBgpRoutingPolicyRuleRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleRetrieveExecute(r ApiPluginsBgpRoutingPolicyRuleRetrieveRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyRuleUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	writableRoutingPolicyRuleRequest *WritableRoutingPolicyRuleRequest
}

func (r ApiPluginsBgpRoutingPolicyRuleUpdateRequest) WritableRoutingPolicyRuleRequest(writableRoutingPolicyRuleRequest WritableRoutingPolicyRuleRequest) ApiPluginsBgpRoutingPolicyRuleUpdateRequest {
	r.writableRoutingPolicyRuleRequest = &writableRoutingPolicyRuleRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyRuleUpdateRequest) Execute() (*RoutingPolicyRule, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyRuleUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyRuleUpdate Method for PluginsBgpRoutingPolicyRuleUpdate

Put a routing policy rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy rule.
	@return ApiPluginsBgpRoutingPolicyRuleUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyRuleUpdateRequest {
	return ApiPluginsBgpRoutingPolicyRuleUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicyRule
func (a *PluginsAPIService) PluginsBgpRoutingPolicyRuleUpdateExecute(r ApiPluginsBgpRoutingPolicyRuleUpdateRequest) (*RoutingPolicyRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicyRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyRuleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy-rule/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRoutingPolicyRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableRoutingPolicyRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRoutingPolicyRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpRoutingPolicyUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	id                   int32
	routingPolicyRequest *RoutingPolicyRequest
}

func (r ApiPluginsBgpRoutingPolicyUpdateRequest) RoutingPolicyRequest(routingPolicyRequest RoutingPolicyRequest) ApiPluginsBgpRoutingPolicyUpdateRequest {
	r.routingPolicyRequest = &routingPolicyRequest
	return r
}

func (r ApiPluginsBgpRoutingPolicyUpdateRequest) Execute() (*RoutingPolicy, *http.Response, error) {
	return r.ApiService.PluginsBgpRoutingPolicyUpdateExecute(r)
}

/*
PluginsBgpRoutingPolicyUpdate Method for PluginsBgpRoutingPolicyUpdate

Put a routing policy object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this routing policy.
	@return ApiPluginsBgpRoutingPolicyUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpRoutingPolicyUpdate(ctx context.Context, id int32) ApiPluginsBgpRoutingPolicyUpdateRequest {
	return ApiPluginsBgpRoutingPolicyUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RoutingPolicy
func (a *PluginsAPIService) PluginsBgpRoutingPolicyUpdateExecute(r ApiPluginsBgpRoutingPolicyUpdateRequest) (*RoutingPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpRoutingPolicyUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/routing-policy/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("routingPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingPolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionCreateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpSessionCreateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpSessionCreateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionCreateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionCreateExecute(r)
}

/*
PluginsBgpSessionCreate Method for PluginsBgpSessionCreate

Post a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionCreateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionCreate(ctx context.Context) ApiPluginsBgpSessionCreateRequest {
	return ApiPluginsBgpSessionCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionCreateExecute(r ApiPluginsBgpSessionCreateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpSessionDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsBgpSessionDestroyExecute(r)
}

/*
PluginsBgpSessionDestroy Method for PluginsBgpSessionDestroy

Delete a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionDestroyRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionDestroy(ctx context.Context, id int32) ApiPluginsBgpSessionDestroyRequest {
	return ApiPluginsBgpSessionDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsBgpSessionDestroyExecute(r ApiPluginsBgpSessionDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	byLocalAddress    *string
	byRemoteAddress   *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	exportPolicies    *[]int32
	exportPoliciesN   *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	importPolicies    *[]int32
	importPoliciesN   *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	localAddress      *[]string
	localAddressN     *[]string
	localAddressId    *[]int32
	localAddressIdN   *[]int32
	localAs           *[]int64
	localAsN          *[]int64
	localAsId         *[]int32
	localAsIdN        *[]int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	peerGroup         *[]int32
	peerGroupN        *[]int32
	q                 *string
	remoteAddress     *[]string
	remoteAddressN    *[]string
	remoteAddressId   *[]int32
	remoteAddressIdN  *[]int32
	remoteAs          *[]int64
	remoteAsN         *[]int64
	remoteAsId        *[]int32
	remoteAsIdN       *[]int32
	site              *[]string
	siteN             *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	status            *string
	statusN           *string
	tag               *[]string
	tagN              *[]string
	tenant            *int32
	tenantN           *int32
	updatedByRequest  *string
}

// Local Address
func (r ApiPluginsBgpSessionListRequest) ByLocalAddress(byLocalAddress string) ApiPluginsBgpSessionListRequest {
	r.byLocalAddress = &byLocalAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpSessionListRequest) ByRemoteAddress(byRemoteAddress string) ApiPluginsBgpSessionListRequest {
	r.byRemoteAddress = &byRemoteAddress
	return r
}

func (r ApiPluginsBgpSessionListRequest) Created(created []time.Time) ApiPluginsBgpSessionListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedGt(createdGt []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedGte(createdGte []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedLt(createdLt []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedLte(createdLte []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedN(createdN []time.Time) ApiPluginsBgpSessionListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) CreatedByRequest(createdByRequest string) ApiPluginsBgpSessionListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsBgpSessionListRequest) Description(description []string) ApiPluginsBgpSessionListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsBgpSessionListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIc(descriptionIc []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIe(descriptionIe []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIew(descriptionIew []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsBgpSessionListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionN(descriptionN []string) ApiPluginsBgpSessionListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNic(descriptionNic []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNie(descriptionNie []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsBgpSessionListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsBgpSessionListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiPluginsBgpSessionListRequest) Device(device []*string) ApiPluginsBgpSessionListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiPluginsBgpSessionListRequest) DeviceN(deviceN []*string) ApiPluginsBgpSessionListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiPluginsBgpSessionListRequest) DeviceId(deviceId []int32) ApiPluginsBgpSessionListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiPluginsBgpSessionListRequest) DeviceIdN(deviceIdN []int32) ApiPluginsBgpSessionListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) ExportPolicies(exportPolicies []int32) ApiPluginsBgpSessionListRequest {
	r.exportPolicies = &exportPolicies
	return r
}

func (r ApiPluginsBgpSessionListRequest) ExportPoliciesN(exportPoliciesN []int32) ApiPluginsBgpSessionListRequest {
	r.exportPoliciesN = &exportPoliciesN
	return r
}

func (r ApiPluginsBgpSessionListRequest) Id(id []int32) ApiPluginsBgpSessionListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdEmpty(idEmpty bool) ApiPluginsBgpSessionListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdGt(idGt []int32) ApiPluginsBgpSessionListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdGte(idGte []int32) ApiPluginsBgpSessionListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdLt(idLt []int32) ApiPluginsBgpSessionListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdLte(idLte []int32) ApiPluginsBgpSessionListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsBgpSessionListRequest) IdN(idN []int32) ApiPluginsBgpSessionListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsBgpSessionListRequest) ImportPolicies(importPolicies []int32) ApiPluginsBgpSessionListRequest {
	r.importPolicies = &importPolicies
	return r
}

func (r ApiPluginsBgpSessionListRequest) ImportPoliciesN(importPoliciesN []int32) ApiPluginsBgpSessionListRequest {
	r.importPoliciesN = &importPoliciesN
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsBgpSessionListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsBgpSessionListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsBgpSessionListRequest) Limit(limit int32) ApiPluginsBgpSessionListRequest {
	r.limit = &limit
	return r
}

// Local Address
func (r ApiPluginsBgpSessionListRequest) LocalAddress(localAddress []string) ApiPluginsBgpSessionListRequest {
	r.localAddress = &localAddress
	return r
}

// Local Address
func (r ApiPluginsBgpSessionListRequest) LocalAddressN(localAddressN []string) ApiPluginsBgpSessionListRequest {
	r.localAddressN = &localAddressN
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAddressId(localAddressId []int32) ApiPluginsBgpSessionListRequest {
	r.localAddressId = &localAddressId
	return r
}

// Local Address (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAddressIdN(localAddressIdN []int32) ApiPluginsBgpSessionListRequest {
	r.localAddressIdN = &localAddressIdN
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpSessionListRequest) LocalAs(localAs []int64) ApiPluginsBgpSessionListRequest {
	r.localAs = &localAs
	return r
}

// Local AS (Number)
func (r ApiPluginsBgpSessionListRequest) LocalAsN(localAsN []int64) ApiPluginsBgpSessionListRequest {
	r.localAsN = &localAsN
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAsId(localAsId []int32) ApiPluginsBgpSessionListRequest {
	r.localAsId = &localAsId
	return r
}

// Local AS (ID)
func (r ApiPluginsBgpSessionListRequest) LocalAsIdN(localAsIdN []int32) ApiPluginsBgpSessionListRequest {
	r.localAsIdN = &localAsIdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsBgpSessionListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsBgpSessionListRequest) Name(name []string) ApiPluginsBgpSessionListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameEmpty(nameEmpty bool) ApiPluginsBgpSessionListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIc(nameIc []string) ApiPluginsBgpSessionListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIe(nameIe []string) ApiPluginsBgpSessionListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIew(nameIew []string) ApiPluginsBgpSessionListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameIsw(nameIsw []string) ApiPluginsBgpSessionListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameN(nameN []string) ApiPluginsBgpSessionListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNic(nameNic []string) ApiPluginsBgpSessionListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNie(nameNie []string) ApiPluginsBgpSessionListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNiew(nameNiew []string) ApiPluginsBgpSessionListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsBgpSessionListRequest) NameNisw(nameNisw []string) ApiPluginsBgpSessionListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsBgpSessionListRequest) Offset(offset int32) ApiPluginsBgpSessionListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsBgpSessionListRequest) Ordering(ordering string) ApiPluginsBgpSessionListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsBgpSessionListRequest) PeerGroup(peerGroup []int32) ApiPluginsBgpSessionListRequest {
	r.peerGroup = &peerGroup
	return r
}

func (r ApiPluginsBgpSessionListRequest) PeerGroupN(peerGroupN []int32) ApiPluginsBgpSessionListRequest {
	r.peerGroupN = &peerGroupN
	return r
}

// Search
func (r ApiPluginsBgpSessionListRequest) Q(q string) ApiPluginsBgpSessionListRequest {
	r.q = &q
	return r
}

// Remote Address
func (r ApiPluginsBgpSessionListRequest) RemoteAddress(remoteAddress []string) ApiPluginsBgpSessionListRequest {
	r.remoteAddress = &remoteAddress
	return r
}

// Remote Address
func (r ApiPluginsBgpSessionListRequest) RemoteAddressN(remoteAddressN []string) ApiPluginsBgpSessionListRequest {
	r.remoteAddressN = &remoteAddressN
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAddressId(remoteAddressId []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAddressId = &remoteAddressId
	return r
}

// Remote Address (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAddressIdN(remoteAddressIdN []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAddressIdN = &remoteAddressIdN
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpSessionListRequest) RemoteAs(remoteAs []int64) ApiPluginsBgpSessionListRequest {
	r.remoteAs = &remoteAs
	return r
}

// Remote AS (Number)
func (r ApiPluginsBgpSessionListRequest) RemoteAsN(remoteAsN []int64) ApiPluginsBgpSessionListRequest {
	r.remoteAsN = &remoteAsN
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAsId(remoteAsId []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAsId = &remoteAsId
	return r
}

// Remote AS (ID)
func (r ApiPluginsBgpSessionListRequest) RemoteAsIdN(remoteAsIdN []int32) ApiPluginsBgpSessionListRequest {
	r.remoteAsIdN = &remoteAsIdN
	return r
}

// DSite (name)
func (r ApiPluginsBgpSessionListRequest) Site(site []string) ApiPluginsBgpSessionListRequest {
	r.site = &site
	return r
}

// DSite (name)
func (r ApiPluginsBgpSessionListRequest) SiteN(siteN []string) ApiPluginsBgpSessionListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiPluginsBgpSessionListRequest) SiteId(siteId []int32) ApiPluginsBgpSessionListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiPluginsBgpSessionListRequest) SiteIdN(siteIdN []int32) ApiPluginsBgpSessionListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiPluginsBgpSessionListRequest) Status(status string) ApiPluginsBgpSessionListRequest {
	r.status = &status
	return r
}

func (r ApiPluginsBgpSessionListRequest) StatusN(statusN string) ApiPluginsBgpSessionListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsBgpSessionListRequest) Tag(tag []string) ApiPluginsBgpSessionListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsBgpSessionListRequest) TagN(tagN []string) ApiPluginsBgpSessionListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsBgpSessionListRequest) Tenant(tenant int32) ApiPluginsBgpSessionListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiPluginsBgpSessionListRequest) TenantN(tenantN int32) ApiPluginsBgpSessionListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsBgpSessionListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsBgpSessionListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsBgpSessionListRequest) Execute() (*PaginatedBGPSessionList, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionListExecute(r)
}

/*
PluginsBgpSessionList Method for PluginsBgpSessionList

Get a list of bgp session objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsBgpSessionListRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionList(ctx context.Context) ApiPluginsBgpSessionListRequest {
	return ApiPluginsBgpSessionListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBGPSessionList
func (a *PluginsAPIService) PluginsBgpSessionListExecute(r ApiPluginsBgpSessionListRequest) (*PaginatedBGPSessionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBGPSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.byLocalAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_local_address", r.byLocalAddress, "")
	}
	if r.byRemoteAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_remote_address", r.byRemoteAddress, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.exportPolicies != nil {
		t := *r.exportPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies", t, "multi")
		}
	}
	if r.exportPoliciesN != nil {
		t := *r.exportPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export_policies__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.importPolicies != nil {
		t := *r.importPolicies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies", t, "multi")
		}
	}
	if r.importPoliciesN != nil {
		t := *r.importPoliciesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "import_policies__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localAddress != nil {
		t := *r.localAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address", t, "multi")
		}
	}
	if r.localAddressN != nil {
		t := *r.localAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address__n", t, "multi")
		}
	}
	if r.localAddressId != nil {
		t := *r.localAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id", t, "multi")
		}
	}
	if r.localAddressIdN != nil {
		t := *r.localAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_address_id__n", t, "multi")
		}
	}
	if r.localAs != nil {
		t := *r.localAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as", t, "multi")
		}
	}
	if r.localAsN != nil {
		t := *r.localAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as__n", t, "multi")
		}
	}
	if r.localAsId != nil {
		t := *r.localAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id", t, "multi")
		}
	}
	if r.localAsIdN != nil {
		t := *r.localAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_as_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.peerGroup != nil {
		t := *r.peerGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group", t, "multi")
		}
	}
	if r.peerGroupN != nil {
		t := *r.peerGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_group__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.remoteAddress != nil {
		t := *r.remoteAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address", t, "multi")
		}
	}
	if r.remoteAddressN != nil {
		t := *r.remoteAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address__n", t, "multi")
		}
	}
	if r.remoteAddressId != nil {
		t := *r.remoteAddressId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id", t, "multi")
		}
	}
	if r.remoteAddressIdN != nil {
		t := *r.remoteAddressIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_address_id__n", t, "multi")
		}
	}
	if r.remoteAs != nil {
		t := *r.remoteAs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as", t, "multi")
		}
	}
	if r.remoteAsN != nil {
		t := *r.remoteAsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as__n", t, "multi")
		}
	}
	if r.remoteAsId != nil {
		t := *r.remoteAsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id", t, "multi")
		}
	}
	if r.remoteAsIdN != nil {
		t := *r.remoteAsIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_as_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", r.tenant, "")
	}
	if r.tenantN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", r.tenantN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	patchedWritableBGPSessionRequest *PatchedWritableBGPSessionRequest
}

func (r ApiPluginsBgpSessionPartialUpdateRequest) PatchedWritableBGPSessionRequest(patchedWritableBGPSessionRequest PatchedWritableBGPSessionRequest) ApiPluginsBgpSessionPartialUpdateRequest {
	r.patchedWritableBGPSessionRequest = &patchedWritableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionPartialUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionPartialUpdateExecute(r)
}

/*
PluginsBgpSessionPartialUpdate Method for PluginsBgpSessionPartialUpdate

Patch a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionPartialUpdate(ctx context.Context, id int32) ApiPluginsBgpSessionPartialUpdateRequest {
	return ApiPluginsBgpSessionPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionPartialUpdateExecute(r ApiPluginsBgpSessionPartialUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsBgpSessionRetrieveRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionRetrieveExecute(r)
}

/*
PluginsBgpSessionRetrieve Method for PluginsBgpSessionRetrieve

Get a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionRetrieveRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionRetrieve(ctx context.Context, id int32) ApiPluginsBgpSessionRetrieveRequest {
	return ApiPluginsBgpSessionRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionRetrieveExecute(r ApiPluginsBgpSessionRetrieveRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsBgpSessionUpdateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	id                        int32
	writableBGPSessionRequest *WritableBGPSessionRequest
}

func (r ApiPluginsBgpSessionUpdateRequest) WritableBGPSessionRequest(writableBGPSessionRequest WritableBGPSessionRequest) ApiPluginsBgpSessionUpdateRequest {
	r.writableBGPSessionRequest = &writableBGPSessionRequest
	return r
}

func (r ApiPluginsBgpSessionUpdateRequest) Execute() (*BGPSession, *http.Response, error) {
	return r.ApiService.PluginsBgpSessionUpdateExecute(r)
}

/*
PluginsBgpSessionUpdate Method for PluginsBgpSessionUpdate

Put a bgp session object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bgp session.
	@return ApiPluginsBgpSessionUpdateRequest
*/
func (a *PluginsAPIService) PluginsBgpSessionUpdate(ctx context.Context, id int32) ApiPluginsBgpSessionUpdateRequest {
	return ApiPluginsBgpSessionUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BGPSession
func (a *PluginsAPIService) PluginsBgpSessionUpdateExecute(r ApiPluginsBgpSessionUpdateRequest) (*BGPSession, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BGPSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsBgpSessionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/bgp/session/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableBGPSessionRequest == nil {
		return localVarReturnValue, nil, reportError("writableBGPSessionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableBGPSessionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsBulkDestroyRequest struct {
	ctx          context.Context
	ApiService   *PluginsAPIService
	assetRequest *[]AssetRequest
}

func (r ApiPluginsInventoryAssetsBulkDestroyRequest) AssetRequest(assetRequest []AssetRequest) ApiPluginsInventoryAssetsBulkDestroyRequest {
	r.assetRequest = &assetRequest
	return r
}

func (r ApiPluginsInventoryAssetsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsBulkDestroyExecute(r)
}

/*
PluginsInventoryAssetsBulkDestroy Method for PluginsInventoryAssetsBulkDestroy

Delete a list of asset objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryAssetsBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsBulkDestroy(ctx context.Context) ApiPluginsInventoryAssetsBulkDestroyRequest {
	return ApiPluginsInventoryAssetsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryAssetsBulkDestroyExecute(r ApiPluginsInventoryAssetsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetRequest == nil {
		return nil, reportError("assetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsBulkPartialUpdateRequest struct {
	ctx          context.Context
	ApiService   *PluginsAPIService
	assetRequest *[]AssetRequest
}

func (r ApiPluginsInventoryAssetsBulkPartialUpdateRequest) AssetRequest(assetRequest []AssetRequest) ApiPluginsInventoryAssetsBulkPartialUpdateRequest {
	r.assetRequest = &assetRequest
	return r
}

func (r ApiPluginsInventoryAssetsBulkPartialUpdateRequest) Execute() ([]Asset, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryAssetsBulkPartialUpdate Method for PluginsInventoryAssetsBulkPartialUpdate

Patch a list of asset objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryAssetsBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryAssetsBulkPartialUpdateRequest {
	return ApiPluginsInventoryAssetsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Asset
func (a *PluginsAPIService) PluginsInventoryAssetsBulkPartialUpdateExecute(r ApiPluginsInventoryAssetsBulkPartialUpdateRequest) ([]Asset, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetRequest == nil {
		return localVarReturnValue, nil, reportError("assetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsBulkUpdateRequest struct {
	ctx          context.Context
	ApiService   *PluginsAPIService
	assetRequest *[]AssetRequest
}

func (r ApiPluginsInventoryAssetsBulkUpdateRequest) AssetRequest(assetRequest []AssetRequest) ApiPluginsInventoryAssetsBulkUpdateRequest {
	r.assetRequest = &assetRequest
	return r
}

func (r ApiPluginsInventoryAssetsBulkUpdateRequest) Execute() ([]Asset, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsBulkUpdateExecute(r)
}

/*
PluginsInventoryAssetsBulkUpdate Method for PluginsInventoryAssetsBulkUpdate

Put a list of asset objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryAssetsBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsBulkUpdate(ctx context.Context) ApiPluginsInventoryAssetsBulkUpdateRequest {
	return ApiPluginsInventoryAssetsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Asset
func (a *PluginsAPIService) PluginsInventoryAssetsBulkUpdateExecute(r ApiPluginsInventoryAssetsBulkUpdateRequest) ([]Asset, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetRequest == nil {
		return localVarReturnValue, nil, reportError("assetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsCreateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	writableAssetRequest *WritableAssetRequest
}

func (r ApiPluginsInventoryAssetsCreateRequest) WritableAssetRequest(writableAssetRequest WritableAssetRequest) ApiPluginsInventoryAssetsCreateRequest {
	r.writableAssetRequest = &writableAssetRequest
	return r
}

func (r ApiPluginsInventoryAssetsCreateRequest) Execute() (*Asset, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsCreateExecute(r)
}

/*
PluginsInventoryAssetsCreate Method for PluginsInventoryAssetsCreate

Post a list of asset objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryAssetsCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsCreate(ctx context.Context) ApiPluginsInventoryAssetsCreateRequest {
	return ApiPluginsInventoryAssetsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Asset
func (a *PluginsAPIService) PluginsInventoryAssetsCreateExecute(r ApiPluginsInventoryAssetsCreateRequest) (*Asset, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableAssetRequest == nil {
		return localVarReturnValue, nil, reportError("writableAssetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableAssetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryAssetsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsDestroyExecute(r)
}

/*
PluginsInventoryAssetsDestroy Method for PluginsInventoryAssetsDestroy

Delete a asset object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this asset.
	@return ApiPluginsInventoryAssetsDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsDestroy(ctx context.Context, id int32) ApiPluginsInventoryAssetsDestroyRequest {
	return ApiPluginsInventoryAssetsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryAssetsDestroyExecute(r ApiPluginsInventoryAssetsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsListRequest struct {
	ctx                    context.Context
	ApiService             *PluginsAPIService
	assetTag               *[]string
	assetTagEmpty          *bool
	assetTagIc             *[]string
	assetTagIe             *[]string
	assetTagIew            *[]string
	assetTagIsw            *[]string
	assetTagN              *[]string
	assetTagNic            *[]string
	assetTagNie            *[]string
	assetTagNiew           *[]string
	assetTagNisw           *[]string
	contactId              *[]int32
	contactIdN             *[]int32
	created                *[]time.Time
	createdEmpty           *[]time.Time
	createdGt              *[]time.Time
	createdGte             *[]time.Time
	createdLt              *[]time.Time
	createdLte             *[]time.Time
	createdN               *[]time.Time
	createdByRequest       *string
	delivery               *string
	deliveryEmpty          *bool
	deliveryIc             *string
	deliveryIe             *string
	deliveryIew            *string
	deliveryIsw            *string
	deliveryN              *string
	deliveryNic            *string
	deliveryNie            *string
	deliveryNiew           *string
	deliveryNisw           *string
	deliveryDateAfter      *string
	deliveryDateBefore     *string
	deliveryId             *[]int32
	deliveryIdN            *[]int32
	deviceType             *[]string
	deviceTypeEmpty        *bool
	deviceTypeIc           *[]string
	deviceTypeIe           *[]string
	deviceTypeIew          *[]string
	deviceTypeIsw          *[]string
	deviceTypeN            *[]string
	deviceTypeNic          *[]string
	deviceTypeNie          *[]string
	deviceTypeNiew         *[]string
	deviceTypeNisw         *[]string
	deviceTypeId           *[]int32
	deviceTypeIdN          *[]int32
	deviceTypeModel        *[]string
	id                     *[]int32
	idEmpty                *bool
	idGt                   *[]int32
	idGte                  *[]int32
	idLt                   *[]int32
	idLte                  *[]int32
	idN                    *[]int32
	installedDeviceId      *[]string
	installedDeviceName    *[]string
	installedLocationId    *[]string
	installedRackId        *[]string
	installedSiteId        *[]string
	installedSiteSlug      *[]string
	inventoryitemGroupId   *[]int32
	inventoryitemGroupIdN  *[]int32
	inventoryitemGroupName *[]string
	inventoryitemType      *[]string
	inventoryitemTypeEmpty *bool
	inventoryitemTypeIc    *[]string
	inventoryitemTypeIe    *[]string
	inventoryitemTypeIew   *[]string
	inventoryitemTypeIsw   *[]string
	inventoryitemTypeN     *[]string
	inventoryitemTypeNic   *[]string
	inventoryitemTypeNie   *[]string
	inventoryitemTypeNiew  *[]string
	inventoryitemTypeNisw  *[]string
	inventoryitemTypeId    *[]int32
	inventoryitemTypeIdN   *[]int32
	inventoryitemTypeModel *[]string
	isAssigned             *bool
	kind                   *[]string
	lastUpdated            *[]time.Time
	lastUpdatedEmpty       *[]time.Time
	lastUpdatedGt          *[]time.Time
	lastUpdatedGte         *[]time.Time
	lastUpdatedLt          *[]time.Time
	lastUpdatedLte         *[]time.Time
	lastUpdatedN           *[]time.Time
	limit                  *int32
	locatedLocationId      *[]string
	locatedSiteId          *[]string
	manufacturerId         *[]string
	manufacturerName       *[]string
	modifiedByRequest      *string
	moduleTypeId           *[]int32
	moduleTypeIdN          *[]int32
	moduleTypeModel        *[]string
	name                   *[]string
	nameEmpty              *bool
	nameIc                 *[]string
	nameIe                 *[]string
	nameIew                *[]string
	nameIsw                *[]string
	nameN                  *[]string
	nameNic                *[]string
	nameNie                *[]string
	nameNiew               *[]string
	nameNisw               *[]string
	offset                 *int32
	ordering               *string
	owner                  *[]string
	ownerN                 *[]string
	ownerId                *[]int32
	ownerIdN               *[]int32
	ownerName              *[]string
	purchase               *string
	purchaseEmpty          *bool
	purchaseIc             *string
	purchaseIe             *string
	purchaseIew            *string
	purchaseIsw            *string
	purchaseN              *string
	purchaseNic            *string
	purchaseNie            *string
	purchaseNiew           *string
	purchaseNisw           *string
	purchaseDateAfter      *string
	purchaseDateBefore     *string
	purchaseId             *[]int32
	purchaseIdN            *[]int32
	q                      *string
	serial                 *[]string
	serialEmpty            *bool
	serialIc               *[]string
	serialIe               *[]string
	serialIew              *[]string
	serialIsw              *[]string
	serialN                *[]string
	serialNic              *[]string
	serialNie              *[]string
	serialNiew             *[]string
	serialNisw             *[]string
	status                 *[]string
	statusN                *[]string
	storageLocationId      *[]int32
	storageLocationIdN     *[]int32
	storageSiteId          *[]int32
	storageSiteIdN         *[]int32
	supplier               *string
	supplierEmpty          *bool
	supplierIc             *string
	supplierIe             *string
	supplierIew            *string
	supplierIsw            *string
	supplierN              *string
	supplierNic            *string
	supplierNie            *string
	supplierNiew           *string
	supplierNisw           *string
	supplierId             *[]int32
	supplierIdN            *[]int32
	tag                    *[]string
	tagN                   *[]string
	tenant                 *[]string
	tenantN                *[]string
	tenantAny              *[]string
	tenantAnyId            *[]string
	tenantId               *[]int32
	tenantIdN              *[]int32
	tenantName             *[]string
	updatedByRequest       *string
	warrantyEndAfter       *string
	warrantyEndBefore      *string
	warrantyStartAfter     *string
	warrantyStartBefore    *string
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTag(assetTag []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagEmpty(assetTagEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagIc(assetTagIc []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagIe(assetTagIe []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagIew(assetTagIew []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagIsw(assetTagIsw []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagN(assetTagN []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagNic(assetTagNic []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagNie(assetTagNie []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagNiew(assetTagNiew []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) AssetTagNisw(assetTagNisw []string) ApiPluginsInventoryAssetsListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

// Contact (ID)
func (r ApiPluginsInventoryAssetsListRequest) ContactId(contactId []int32) ApiPluginsInventoryAssetsListRequest {
	r.contactId = &contactId
	return r
}

// Contact (ID)
func (r ApiPluginsInventoryAssetsListRequest) ContactIdN(contactIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.contactIdN = &contactIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Created(created []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryAssetsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) Delivery(delivery string) ApiPluginsInventoryAssetsListRequest {
	r.delivery = &delivery
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryEmpty(deliveryEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.deliveryEmpty = &deliveryEmpty
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryIc(deliveryIc string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryIc = &deliveryIc
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryIe(deliveryIe string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryIe = &deliveryIe
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryIew(deliveryIew string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryIew = &deliveryIew
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryIsw(deliveryIsw string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryIsw = &deliveryIsw
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryN(deliveryN string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryN = &deliveryN
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryNic(deliveryNic string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryNic = &deliveryNic
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryNie(deliveryNie string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryNie = &deliveryNie
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryNiew(deliveryNiew string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryNiew = &deliveryNiew
	return r
}

// Delivery (name)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryNisw(deliveryNisw string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryNisw = &deliveryNisw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeliveryDateAfter(deliveryDateAfter string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryDateAfter = &deliveryDateAfter
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeliveryDateBefore(deliveryDateBefore string) ApiPluginsInventoryAssetsListRequest {
	r.deliveryDateBefore = &deliveryDateBefore
	return r
}

// Delivery (ID)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryId(deliveryId []int32) ApiPluginsInventoryAssetsListRequest {
	r.deliveryId = &deliveryId
	return r
}

// Delivery (ID)
func (r ApiPluginsInventoryAssetsListRequest) DeliveryIdN(deliveryIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.deliveryIdN = &deliveryIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceType(deviceType []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (slug)
func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeEmpty(deviceTypeEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeEmpty = &deviceTypeEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeIc(deviceTypeIc []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeIc = &deviceTypeIc
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeIe(deviceTypeIe []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeIe = &deviceTypeIe
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeIew(deviceTypeIew []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeIew = &deviceTypeIew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeIsw(deviceTypeIsw []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeIsw = &deviceTypeIsw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeN(deviceTypeN []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeNic(deviceTypeNic []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeNic = &deviceTypeNic
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeNie(deviceTypeNie []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeNie = &deviceTypeNie
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeNiew(deviceTypeNiew []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeNiew = &deviceTypeNiew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeNisw(deviceTypeNisw []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeNisw = &deviceTypeNisw
	return r
}

// Device type (ID)
func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeId(deviceTypeId []int32) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) DeviceTypeModel(deviceTypeModel []string) ApiPluginsInventoryAssetsListRequest {
	r.deviceTypeModel = &deviceTypeModel
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Id(id []int32) ApiPluginsInventoryAssetsListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) IdGt(idGt []int32) ApiPluginsInventoryAssetsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) IdGte(idGte []int32) ApiPluginsInventoryAssetsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) IdLt(idLt []int32) ApiPluginsInventoryAssetsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) IdLte(idLte []int32) ApiPluginsInventoryAssetsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) IdN(idN []int32) ApiPluginsInventoryAssetsListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InstalledDeviceId(installedDeviceId []string) ApiPluginsInventoryAssetsListRequest {
	r.installedDeviceId = &installedDeviceId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InstalledDeviceName(installedDeviceName []string) ApiPluginsInventoryAssetsListRequest {
	r.installedDeviceName = &installedDeviceName
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InstalledLocationId(installedLocationId []string) ApiPluginsInventoryAssetsListRequest {
	r.installedLocationId = &installedLocationId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InstalledRackId(installedRackId []string) ApiPluginsInventoryAssetsListRequest {
	r.installedRackId = &installedRackId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InstalledSiteId(installedSiteId []string) ApiPluginsInventoryAssetsListRequest {
	r.installedSiteId = &installedSiteId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InstalledSiteSlug(installedSiteSlug []string) ApiPluginsInventoryAssetsListRequest {
	r.installedSiteSlug = &installedSiteSlug
	return r
}

// Inventory item group (ID)
func (r ApiPluginsInventoryAssetsListRequest) InventoryitemGroupId(inventoryitemGroupId []int32) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemGroupId = &inventoryitemGroupId
	return r
}

// Inventory item group (ID)
func (r ApiPluginsInventoryAssetsListRequest) InventoryitemGroupIdN(inventoryitemGroupIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemGroupIdN = &inventoryitemGroupIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemGroupName(inventoryitemGroupName []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemGroupName = &inventoryitemGroupName
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemType(inventoryitemType []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemType = &inventoryitemType
	return r
}

// Inventory item type (slug)
func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeEmpty(inventoryitemTypeEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeEmpty = &inventoryitemTypeEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeIc(inventoryitemTypeIc []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeIc = &inventoryitemTypeIc
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeIe(inventoryitemTypeIe []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeIe = &inventoryitemTypeIe
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeIew(inventoryitemTypeIew []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeIew = &inventoryitemTypeIew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeIsw(inventoryitemTypeIsw []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeIsw = &inventoryitemTypeIsw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeN(inventoryitemTypeN []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeN = &inventoryitemTypeN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeNic(inventoryitemTypeNic []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeNic = &inventoryitemTypeNic
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeNie(inventoryitemTypeNie []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeNie = &inventoryitemTypeNie
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeNiew(inventoryitemTypeNiew []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeNiew = &inventoryitemTypeNiew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeNisw(inventoryitemTypeNisw []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeNisw = &inventoryitemTypeNisw
	return r
}

// Inventory item type (ID)
func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeId(inventoryitemTypeId []int32) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeId = &inventoryitemTypeId
	return r
}

// Inventory item type (ID)
func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeIdN(inventoryitemTypeIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeIdN = &inventoryitemTypeIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) InventoryitemTypeModel(inventoryitemTypeModel []string) ApiPluginsInventoryAssetsListRequest {
	r.inventoryitemTypeModel = &inventoryitemTypeModel
	return r
}

// Is assigned to hardware
func (r ApiPluginsInventoryAssetsListRequest) IsAssigned(isAssigned bool) ApiPluginsInventoryAssetsListRequest {
	r.isAssigned = &isAssigned
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Kind(kind []string) ApiPluginsInventoryAssetsListRequest {
	r.kind = &kind
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryAssetsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryAssetsListRequest) Limit(limit int32) ApiPluginsInventoryAssetsListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LocatedLocationId(locatedLocationId []string) ApiPluginsInventoryAssetsListRequest {
	r.locatedLocationId = &locatedLocationId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) LocatedSiteId(locatedSiteId []string) ApiPluginsInventoryAssetsListRequest {
	r.locatedSiteId = &locatedSiteId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) ManufacturerId(manufacturerId []string) ApiPluginsInventoryAssetsListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) ManufacturerName(manufacturerName []string) ApiPluginsInventoryAssetsListRequest {
	r.manufacturerName = &manufacturerName
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryAssetsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiPluginsInventoryAssetsListRequest) ModuleTypeId(moduleTypeId []int32) ApiPluginsInventoryAssetsListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiPluginsInventoryAssetsListRequest) ModuleTypeIdN(moduleTypeIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) ModuleTypeModel(moduleTypeModel []string) ApiPluginsInventoryAssetsListRequest {
	r.moduleTypeModel = &moduleTypeModel
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Name(name []string) ApiPluginsInventoryAssetsListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameIc(nameIc []string) ApiPluginsInventoryAssetsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameIe(nameIe []string) ApiPluginsInventoryAssetsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameIew(nameIew []string) ApiPluginsInventoryAssetsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameIsw(nameIsw []string) ApiPluginsInventoryAssetsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameN(nameN []string) ApiPluginsInventoryAssetsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameNic(nameNic []string) ApiPluginsInventoryAssetsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameNie(nameNie []string) ApiPluginsInventoryAssetsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameNiew(nameNiew []string) ApiPluginsInventoryAssetsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) NameNisw(nameNisw []string) ApiPluginsInventoryAssetsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryAssetsListRequest) Offset(offset int32) ApiPluginsInventoryAssetsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryAssetsListRequest) Ordering(ordering string) ApiPluginsInventoryAssetsListRequest {
	r.ordering = &ordering
	return r
}

// Owner (slug)
func (r ApiPluginsInventoryAssetsListRequest) Owner(owner []string) ApiPluginsInventoryAssetsListRequest {
	r.owner = &owner
	return r
}

// Owner (slug)
func (r ApiPluginsInventoryAssetsListRequest) OwnerN(ownerN []string) ApiPluginsInventoryAssetsListRequest {
	r.ownerN = &ownerN
	return r
}

// Owner (ID)
func (r ApiPluginsInventoryAssetsListRequest) OwnerId(ownerId []int32) ApiPluginsInventoryAssetsListRequest {
	r.ownerId = &ownerId
	return r
}

// Owner (ID)
func (r ApiPluginsInventoryAssetsListRequest) OwnerIdN(ownerIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.ownerIdN = &ownerIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) OwnerName(ownerName []string) ApiPluginsInventoryAssetsListRequest {
	r.ownerName = &ownerName
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) Purchase(purchase string) ApiPluginsInventoryAssetsListRequest {
	r.purchase = &purchase
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseEmpty(purchaseEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.purchaseEmpty = &purchaseEmpty
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseIc(purchaseIc string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseIc = &purchaseIc
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseIe(purchaseIe string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseIe = &purchaseIe
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseIew(purchaseIew string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseIew = &purchaseIew
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseIsw(purchaseIsw string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseIsw = &purchaseIsw
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseN(purchaseN string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseN = &purchaseN
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseNic(purchaseNic string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseNic = &purchaseNic
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseNie(purchaseNie string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseNie = &purchaseNie
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseNiew(purchaseNiew string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseNiew = &purchaseNiew
	return r
}

// Purchase (name)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseNisw(purchaseNisw string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseNisw = &purchaseNisw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) PurchaseDateAfter(purchaseDateAfter string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseDateAfter = &purchaseDateAfter
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) PurchaseDateBefore(purchaseDateBefore string) ApiPluginsInventoryAssetsListRequest {
	r.purchaseDateBefore = &purchaseDateBefore
	return r
}

// Purchase (ID)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseId(purchaseId []int32) ApiPluginsInventoryAssetsListRequest {
	r.purchaseId = &purchaseId
	return r
}

// Purchase (ID)
func (r ApiPluginsInventoryAssetsListRequest) PurchaseIdN(purchaseIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.purchaseIdN = &purchaseIdN
	return r
}

// Search
func (r ApiPluginsInventoryAssetsListRequest) Q(q string) ApiPluginsInventoryAssetsListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Serial(serial []string) ApiPluginsInventoryAssetsListRequest {
	r.serial = &serial
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialEmpty(serialEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialIc(serialIc []string) ApiPluginsInventoryAssetsListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialIe(serialIe []string) ApiPluginsInventoryAssetsListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialIew(serialIew []string) ApiPluginsInventoryAssetsListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialIsw(serialIsw []string) ApiPluginsInventoryAssetsListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialN(serialN []string) ApiPluginsInventoryAssetsListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialNic(serialNic []string) ApiPluginsInventoryAssetsListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialNie(serialNie []string) ApiPluginsInventoryAssetsListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialNiew(serialNiew []string) ApiPluginsInventoryAssetsListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) SerialNisw(serialNisw []string) ApiPluginsInventoryAssetsListRequest {
	r.serialNisw = &serialNisw
	return r
}

// Asset lifecycle status
func (r ApiPluginsInventoryAssetsListRequest) Status(status []string) ApiPluginsInventoryAssetsListRequest {
	r.status = &status
	return r
}

// Asset lifecycle status
func (r ApiPluginsInventoryAssetsListRequest) StatusN(statusN []string) ApiPluginsInventoryAssetsListRequest {
	r.statusN = &statusN
	return r
}

// Storage location (ID)
func (r ApiPluginsInventoryAssetsListRequest) StorageLocationId(storageLocationId []int32) ApiPluginsInventoryAssetsListRequest {
	r.storageLocationId = &storageLocationId
	return r
}

// Storage location (ID)
func (r ApiPluginsInventoryAssetsListRequest) StorageLocationIdN(storageLocationIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.storageLocationIdN = &storageLocationIdN
	return r
}

// Storage site (ID)
func (r ApiPluginsInventoryAssetsListRequest) StorageSiteId(storageSiteId []int32) ApiPluginsInventoryAssetsListRequest {
	r.storageSiteId = &storageSiteId
	return r
}

// Storage site (ID)
func (r ApiPluginsInventoryAssetsListRequest) StorageSiteIdN(storageSiteIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.storageSiteIdN = &storageSiteIdN
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) Supplier(supplier string) ApiPluginsInventoryAssetsListRequest {
	r.supplier = &supplier
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierEmpty(supplierEmpty bool) ApiPluginsInventoryAssetsListRequest {
	r.supplierEmpty = &supplierEmpty
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierIc(supplierIc string) ApiPluginsInventoryAssetsListRequest {
	r.supplierIc = &supplierIc
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierIe(supplierIe string) ApiPluginsInventoryAssetsListRequest {
	r.supplierIe = &supplierIe
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierIew(supplierIew string) ApiPluginsInventoryAssetsListRequest {
	r.supplierIew = &supplierIew
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierIsw(supplierIsw string) ApiPluginsInventoryAssetsListRequest {
	r.supplierIsw = &supplierIsw
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierN(supplierN string) ApiPluginsInventoryAssetsListRequest {
	r.supplierN = &supplierN
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierNic(supplierNic string) ApiPluginsInventoryAssetsListRequest {
	r.supplierNic = &supplierNic
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierNie(supplierNie string) ApiPluginsInventoryAssetsListRequest {
	r.supplierNie = &supplierNie
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierNiew(supplierNiew string) ApiPluginsInventoryAssetsListRequest {
	r.supplierNiew = &supplierNiew
	return r
}

// Supplier (name)
func (r ApiPluginsInventoryAssetsListRequest) SupplierNisw(supplierNisw string) ApiPluginsInventoryAssetsListRequest {
	r.supplierNisw = &supplierNisw
	return r
}

// Supplier (ID)
func (r ApiPluginsInventoryAssetsListRequest) SupplierId(supplierId []int32) ApiPluginsInventoryAssetsListRequest {
	r.supplierId = &supplierId
	return r
}

// Supplier (ID)
func (r ApiPluginsInventoryAssetsListRequest) SupplierIdN(supplierIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.supplierIdN = &supplierIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Tag(tag []string) ApiPluginsInventoryAssetsListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) TagN(tagN []string) ApiPluginsInventoryAssetsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiPluginsInventoryAssetsListRequest) Tenant(tenant []string) ApiPluginsInventoryAssetsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiPluginsInventoryAssetsListRequest) TenantN(tenantN []string) ApiPluginsInventoryAssetsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) TenantAny(tenantAny []string) ApiPluginsInventoryAssetsListRequest {
	r.tenantAny = &tenantAny
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) TenantAnyId(tenantAnyId []string) ApiPluginsInventoryAssetsListRequest {
	r.tenantAnyId = &tenantAnyId
	return r
}

// Tenant (ID)
func (r ApiPluginsInventoryAssetsListRequest) TenantId(tenantId []int32) ApiPluginsInventoryAssetsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiPluginsInventoryAssetsListRequest) TenantIdN(tenantIdN []int32) ApiPluginsInventoryAssetsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) TenantName(tenantName []string) ApiPluginsInventoryAssetsListRequest {
	r.tenantName = &tenantName
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryAssetsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) WarrantyEndAfter(warrantyEndAfter string) ApiPluginsInventoryAssetsListRequest {
	r.warrantyEndAfter = &warrantyEndAfter
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) WarrantyEndBefore(warrantyEndBefore string) ApiPluginsInventoryAssetsListRequest {
	r.warrantyEndBefore = &warrantyEndBefore
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) WarrantyStartAfter(warrantyStartAfter string) ApiPluginsInventoryAssetsListRequest {
	r.warrantyStartAfter = &warrantyStartAfter
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) WarrantyStartBefore(warrantyStartBefore string) ApiPluginsInventoryAssetsListRequest {
	r.warrantyStartBefore = &warrantyStartBefore
	return r
}

func (r ApiPluginsInventoryAssetsListRequest) Execute() (*PaginatedAssetList, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsListExecute(r)
}

/*
PluginsInventoryAssetsList Method for PluginsInventoryAssetsList

Get a list of asset objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryAssetsListRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsList(ctx context.Context) ApiPluginsInventoryAssetsListRequest {
	return ApiPluginsInventoryAssetsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedAssetList
func (a *PluginsAPIService) PluginsInventoryAssetsListExecute(r ApiPluginsInventoryAssetsListRequest) (*PaginatedAssetList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedAssetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.contactId != nil {
		t := *r.contactId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_id", t, "multi")
		}
	}
	if r.contactIdN != nil {
		t := *r.contactIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.delivery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery", r.delivery, "")
	}
	if r.deliveryEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__empty", r.deliveryEmpty, "")
	}
	if r.deliveryIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__ic", r.deliveryIc, "")
	}
	if r.deliveryIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__ie", r.deliveryIe, "")
	}
	if r.deliveryIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__iew", r.deliveryIew, "")
	}
	if r.deliveryIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__isw", r.deliveryIsw, "")
	}
	if r.deliveryN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__n", r.deliveryN, "")
	}
	if r.deliveryNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__nic", r.deliveryNic, "")
	}
	if r.deliveryNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__nie", r.deliveryNie, "")
	}
	if r.deliveryNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__niew", r.deliveryNiew, "")
	}
	if r.deliveryNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery__nisw", r.deliveryNisw, "")
	}
	if r.deliveryDateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_date_after", r.deliveryDateAfter, "")
	}
	if r.deliveryDateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_date_before", r.deliveryDateBefore, "")
	}
	if r.deliveryId != nil {
		t := *r.deliveryId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_id", t, "multi")
		}
	}
	if r.deliveryIdN != nil {
		t := *r.deliveryIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_id__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__empty", r.deviceTypeEmpty, "")
	}
	if r.deviceTypeIc != nil {
		t := *r.deviceTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__ic", t, "multi")
		}
	}
	if r.deviceTypeIe != nil {
		t := *r.deviceTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__ie", t, "multi")
		}
	}
	if r.deviceTypeIew != nil {
		t := *r.deviceTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__iew", t, "multi")
		}
	}
	if r.deviceTypeIsw != nil {
		t := *r.deviceTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__isw", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeNic != nil {
		t := *r.deviceTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__nic", t, "multi")
		}
	}
	if r.deviceTypeNie != nil {
		t := *r.deviceTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__nie", t, "multi")
		}
	}
	if r.deviceTypeNiew != nil {
		t := *r.deviceTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__niew", t, "multi")
		}
	}
	if r.deviceTypeNisw != nil {
		t := *r.deviceTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.deviceTypeModel != nil {
		t := *r.deviceTypeModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_model", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.installedDeviceId != nil {
		t := *r.installedDeviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_id", t, "multi")
		}
	}
	if r.installedDeviceName != nil {
		t := *r.installedDeviceName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_name", t, "multi")
		}
	}
	if r.installedLocationId != nil {
		t := *r.installedLocationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_location_id", t, "multi")
		}
	}
	if r.installedRackId != nil {
		t := *r.installedRackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_rack_id", t, "multi")
		}
	}
	if r.installedSiteId != nil {
		t := *r.installedSiteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_site_id", t, "multi")
		}
	}
	if r.installedSiteSlug != nil {
		t := *r.installedSiteSlug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_site_slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_site_slug", t, "multi")
		}
	}
	if r.inventoryitemGroupId != nil {
		t := *r.inventoryitemGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id", t, "multi")
		}
	}
	if r.inventoryitemGroupIdN != nil {
		t := *r.inventoryitemGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id__n", t, "multi")
		}
	}
	if r.inventoryitemGroupName != nil {
		t := *r.inventoryitemGroupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_name", t, "multi")
		}
	}
	if r.inventoryitemType != nil {
		t := *r.inventoryitemType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type", t, "multi")
		}
	}
	if r.inventoryitemTypeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__empty", r.inventoryitemTypeEmpty, "")
	}
	if r.inventoryitemTypeIc != nil {
		t := *r.inventoryitemTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__ic", t, "multi")
		}
	}
	if r.inventoryitemTypeIe != nil {
		t := *r.inventoryitemTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__ie", t, "multi")
		}
	}
	if r.inventoryitemTypeIew != nil {
		t := *r.inventoryitemTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__iew", t, "multi")
		}
	}
	if r.inventoryitemTypeIsw != nil {
		t := *r.inventoryitemTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__isw", t, "multi")
		}
	}
	if r.inventoryitemTypeN != nil {
		t := *r.inventoryitemTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__n", t, "multi")
		}
	}
	if r.inventoryitemTypeNic != nil {
		t := *r.inventoryitemTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__nic", t, "multi")
		}
	}
	if r.inventoryitemTypeNie != nil {
		t := *r.inventoryitemTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__nie", t, "multi")
		}
	}
	if r.inventoryitemTypeNiew != nil {
		t := *r.inventoryitemTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__niew", t, "multi")
		}
	}
	if r.inventoryitemTypeNisw != nil {
		t := *r.inventoryitemTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type__nisw", t, "multi")
		}
	}
	if r.inventoryitemTypeId != nil {
		t := *r.inventoryitemTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type_id", t, "multi")
		}
	}
	if r.inventoryitemTypeIdN != nil {
		t := *r.inventoryitemTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type_id__n", t, "multi")
		}
	}
	if r.inventoryitemTypeModel != nil {
		t := *r.inventoryitemTypeModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type_model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_type_model", t, "multi")
		}
	}
	if r.isAssigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_assigned", r.isAssigned, "")
	}
	if r.kind != nil {
		t := *r.kind
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "kind", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "kind", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.locatedLocationId != nil {
		t := *r.locatedLocationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "located_location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "located_location_id", t, "multi")
		}
	}
	if r.locatedSiteId != nil {
		t := *r.locatedSiteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "located_site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "located_site_id", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerName != nil {
		t := *r.manufacturerName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_name", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduleTypeModel != nil {
		t := *r.moduleTypeModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_model", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.owner != nil {
		t := *r.owner
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner", t, "multi")
		}
	}
	if r.ownerN != nil {
		t := *r.ownerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner__n", t, "multi")
		}
	}
	if r.ownerId != nil {
		t := *r.ownerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_id", t, "multi")
		}
	}
	if r.ownerIdN != nil {
		t := *r.ownerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_id__n", t, "multi")
		}
	}
	if r.ownerName != nil {
		t := *r.ownerName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_name", t, "multi")
		}
	}
	if r.purchase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase", r.purchase, "")
	}
	if r.purchaseEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__empty", r.purchaseEmpty, "")
	}
	if r.purchaseIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__ic", r.purchaseIc, "")
	}
	if r.purchaseIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__ie", r.purchaseIe, "")
	}
	if r.purchaseIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__iew", r.purchaseIew, "")
	}
	if r.purchaseIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__isw", r.purchaseIsw, "")
	}
	if r.purchaseN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__n", r.purchaseN, "")
	}
	if r.purchaseNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__nic", r.purchaseNic, "")
	}
	if r.purchaseNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__nie", r.purchaseNie, "")
	}
	if r.purchaseNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__niew", r.purchaseNiew, "")
	}
	if r.purchaseNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__nisw", r.purchaseNisw, "")
	}
	if r.purchaseDateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_date_after", r.purchaseDateAfter, "")
	}
	if r.purchaseDateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_date_before", r.purchaseDateBefore, "")
	}
	if r.purchaseId != nil {
		t := *r.purchaseId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id", t, "multi")
		}
	}
	if r.purchaseIdN != nil {
		t := *r.purchaseIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.storageLocationId != nil {
		t := *r.storageLocationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "storage_location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "storage_location_id", t, "multi")
		}
	}
	if r.storageLocationIdN != nil {
		t := *r.storageLocationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "storage_location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "storage_location_id__n", t, "multi")
		}
	}
	if r.storageSiteId != nil {
		t := *r.storageSiteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "storage_site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "storage_site_id", t, "multi")
		}
	}
	if r.storageSiteIdN != nil {
		t := *r.storageSiteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "storage_site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "storage_site_id__n", t, "multi")
		}
	}
	if r.supplier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier", r.supplier, "")
	}
	if r.supplierEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__empty", r.supplierEmpty, "")
	}
	if r.supplierIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__ic", r.supplierIc, "")
	}
	if r.supplierIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__ie", r.supplierIe, "")
	}
	if r.supplierIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__iew", r.supplierIew, "")
	}
	if r.supplierIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__isw", r.supplierIsw, "")
	}
	if r.supplierN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__n", r.supplierN, "")
	}
	if r.supplierNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__nic", r.supplierNic, "")
	}
	if r.supplierNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__nie", r.supplierNie, "")
	}
	if r.supplierNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__niew", r.supplierNiew, "")
	}
	if r.supplierNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__nisw", r.supplierNisw, "")
	}
	if r.supplierId != nil {
		t := *r.supplierId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id", t, "multi")
		}
	}
	if r.supplierIdN != nil {
		t := *r.supplierIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantAny != nil {
		t := *r.tenantAny
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_any", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_any", t, "multi")
		}
	}
	if r.tenantAnyId != nil {
		t := *r.tenantAnyId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_any_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_any_id", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.tenantName != nil {
		t := *r.tenantName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_name", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.warrantyEndAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "warranty_end_after", r.warrantyEndAfter, "")
	}
	if r.warrantyEndBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "warranty_end_before", r.warrantyEndBefore, "")
	}
	if r.warrantyStartAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "warranty_start_after", r.warrantyStartAfter, "")
	}
	if r.warrantyStartBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "warranty_start_before", r.warrantyStartBefore, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *PluginsAPIService
	id                          int32
	patchedWritableAssetRequest *PatchedWritableAssetRequest
}

func (r ApiPluginsInventoryAssetsPartialUpdateRequest) PatchedWritableAssetRequest(patchedWritableAssetRequest PatchedWritableAssetRequest) ApiPluginsInventoryAssetsPartialUpdateRequest {
	r.patchedWritableAssetRequest = &patchedWritableAssetRequest
	return r
}

func (r ApiPluginsInventoryAssetsPartialUpdateRequest) Execute() (*Asset, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsPartialUpdateExecute(r)
}

/*
PluginsInventoryAssetsPartialUpdate Method for PluginsInventoryAssetsPartialUpdate

Patch a asset object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this asset.
	@return ApiPluginsInventoryAssetsPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryAssetsPartialUpdateRequest {
	return ApiPluginsInventoryAssetsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Asset
func (a *PluginsAPIService) PluginsInventoryAssetsPartialUpdateExecute(r ApiPluginsInventoryAssetsPartialUpdateRequest) (*Asset, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableAssetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryAssetsRetrieveRequest) Execute() (*Asset, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsRetrieveExecute(r)
}

/*
PluginsInventoryAssetsRetrieve Method for PluginsInventoryAssetsRetrieve

Get a asset object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this asset.
	@return ApiPluginsInventoryAssetsRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsRetrieve(ctx context.Context, id int32) ApiPluginsInventoryAssetsRetrieveRequest {
	return ApiPluginsInventoryAssetsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Asset
func (a *PluginsAPIService) PluginsInventoryAssetsRetrieveExecute(r ApiPluginsInventoryAssetsRetrieveRequest) (*Asset, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryAssetsUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	id                   int32
	writableAssetRequest *WritableAssetRequest
}

func (r ApiPluginsInventoryAssetsUpdateRequest) WritableAssetRequest(writableAssetRequest WritableAssetRequest) ApiPluginsInventoryAssetsUpdateRequest {
	r.writableAssetRequest = &writableAssetRequest
	return r
}

func (r ApiPluginsInventoryAssetsUpdateRequest) Execute() (*Asset, *http.Response, error) {
	return r.ApiService.PluginsInventoryAssetsUpdateExecute(r)
}

/*
PluginsInventoryAssetsUpdate Method for PluginsInventoryAssetsUpdate

Put a asset object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this asset.
	@return ApiPluginsInventoryAssetsUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryAssetsUpdate(ctx context.Context, id int32) ApiPluginsInventoryAssetsUpdateRequest {
	return ApiPluginsInventoryAssetsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Asset
func (a *PluginsAPIService) PluginsInventoryAssetsUpdateExecute(r ApiPluginsInventoryAssetsUpdateRequest) (*Asset, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryAssetsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/assets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableAssetRequest == nil {
		return localVarReturnValue, nil, reportError("writableAssetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableAssetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesBulkDestroyRequest struct {
	ctx                            context.Context
	ApiService                     *PluginsAPIService
	deviceWithConfigContextRequest *[]DeviceWithConfigContextRequest
}

func (r ApiPluginsInventoryDcimDevicesBulkDestroyRequest) DeviceWithConfigContextRequest(deviceWithConfigContextRequest []DeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesBulkDestroyRequest {
	r.deviceWithConfigContextRequest = &deviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesBulkDestroyExecute(r)
}

/*
PluginsInventoryDcimDevicesBulkDestroy Method for PluginsInventoryDcimDevicesBulkDestroy

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimDevicesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesBulkDestroy(ctx context.Context) ApiPluginsInventoryDcimDevicesBulkDestroyRequest {
	return ApiPluginsInventoryDcimDevicesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDcimDevicesBulkDestroyExecute(r ApiPluginsInventoryDcimDevicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceWithConfigContextRequest == nil {
		return nil, reportError("deviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *PluginsAPIService
	deviceWithConfigContextRequest *[]DeviceWithConfigContextRequest
}

func (r ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest) DeviceWithConfigContextRequest(deviceWithConfigContextRequest []DeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest {
	r.deviceWithConfigContextRequest = &deviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest) Execute() ([]DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryDcimDevicesBulkPartialUpdate Method for PluginsInventoryDcimDevicesBulkPartialUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest {
	return ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesBulkPartialUpdateExecute(r ApiPluginsInventoryDcimDevicesBulkPartialUpdateRequest) ([]DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("deviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesBulkUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *PluginsAPIService
	deviceWithConfigContextRequest *[]DeviceWithConfigContextRequest
}

func (r ApiPluginsInventoryDcimDevicesBulkUpdateRequest) DeviceWithConfigContextRequest(deviceWithConfigContextRequest []DeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesBulkUpdateRequest {
	r.deviceWithConfigContextRequest = &deviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesBulkUpdateRequest) Execute() ([]DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesBulkUpdateExecute(r)
}

/*
PluginsInventoryDcimDevicesBulkUpdate Method for PluginsInventoryDcimDevicesBulkUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimDevicesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesBulkUpdate(ctx context.Context) ApiPluginsInventoryDcimDevicesBulkUpdateRequest {
	return ApiPluginsInventoryDcimDevicesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesBulkUpdateExecute(r ApiPluginsInventoryDcimDevicesBulkUpdateRequest) ([]DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("deviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesCreateRequest struct {
	ctx                                    context.Context
	ApiService                             *PluginsAPIService
	writableDeviceWithConfigContextRequest *WritableDeviceWithConfigContextRequest
}

func (r ApiPluginsInventoryDcimDevicesCreateRequest) WritableDeviceWithConfigContextRequest(writableDeviceWithConfigContextRequest WritableDeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesCreateRequest {
	r.writableDeviceWithConfigContextRequest = &writableDeviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesCreateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesCreateExecute(r)
}

/*
PluginsInventoryDcimDevicesCreate Method for PluginsInventoryDcimDevicesCreate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimDevicesCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesCreate(ctx context.Context) ApiPluginsInventoryDcimDevicesCreateRequest {
	return ApiPluginsInventoryDcimDevicesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesCreateExecute(r ApiPluginsInventoryDcimDevicesCreateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDcimDevicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesDestroyExecute(r)
}

/*
PluginsInventoryDcimDevicesDestroy Method for PluginsInventoryDcimDevicesDestroy

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiPluginsInventoryDcimDevicesDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesDestroy(ctx context.Context, id int32) ApiPluginsInventoryDcimDevicesDestroyRequest {
	return ApiPluginsInventoryDcimDevicesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDcimDevicesDestroyExecute(r ApiPluginsInventoryDcimDevicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesListRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	airflow              *string
	airflowN             *string
	assetTag             *[]string
	assetTagEmpty        *bool
	assetTagIc           *[]string
	assetTagIe           *[]string
	assetTagIew          *[]string
	assetTagIsw          *[]string
	assetTagN            *[]string
	assetTagNic          *[]string
	assetTagNie          *[]string
	assetTagNiew         *[]string
	assetTagNisw         *[]string
	clusterId            *[]*int32
	clusterIdN           *[]*int32
	configTemplateId     *[]*int32
	configTemplateIdN    *[]*int32
	consolePorts         *bool
	consoleServerPorts   *bool
	contact              *[]int32
	contactN             *[]int32
	contactGroup         *[]int32
	contactGroupN        *[]int32
	contactRole          *[]int32
	contactRoleN         *[]int32
	created              *[]time.Time
	createdEmpty         *[]time.Time
	createdGt            *[]time.Time
	createdGte           *[]time.Time
	createdLt            *[]time.Time
	createdLte           *[]time.Time
	createdN             *[]time.Time
	createdByRequest     *string
	description          *[]string
	descriptionEmpty     *bool
	descriptionIc        *[]string
	descriptionIe        *[]string
	descriptionIew       *[]string
	descriptionIsw       *[]string
	descriptionN         *[]string
	descriptionNic       *[]string
	descriptionNie       *[]string
	descriptionNiew      *[]string
	descriptionNisw      *[]string
	deviceBays           *bool
	deviceType           *[]string
	deviceTypeN          *[]string
	deviceTypeId         *[]int32
	deviceTypeIdN        *[]int32
	face                 *string
	faceN                *string
	hasAssetAssigned     *bool
	hasOobIp             *bool
	hasPrimaryIp         *bool
	id                   *[]int32
	idEmpty              *bool
	idGt                 *[]int32
	idGte                *[]int32
	idLt                 *[]int32
	idLte                *[]int32
	idN                  *[]int32
	interfaces           *bool
	isFullDepth          *bool
	lastUpdated          *[]time.Time
	lastUpdatedEmpty     *[]time.Time
	lastUpdatedGt        *[]time.Time
	lastUpdatedGte       *[]time.Time
	lastUpdatedLt        *[]time.Time
	lastUpdatedLte       *[]time.Time
	lastUpdatedN         *[]time.Time
	latitude             *[]float64
	latitudeEmpty        *bool
	latitudeGt           *[]float64
	latitudeGte          *[]float64
	latitudeLt           *[]float64
	latitudeLte          *[]float64
	latitudeN            *[]float64
	limit                *int32
	localContextData     *bool
	locationId           *[]int32
	locationIdN          *[]int32
	longitude            *[]float64
	longitudeEmpty       *bool
	longitudeGt          *[]float64
	longitudeGte         *[]float64
	longitudeLt          *[]float64
	longitudeLte         *[]float64
	longitudeN           *[]float64
	macAddress           *[]string
	macAddressIc         *[]string
	macAddressIe         *[]string
	macAddressIew        *[]string
	macAddressIsw        *[]string
	macAddressN          *[]string
	macAddressNic        *[]string
	macAddressNie        *[]string
	macAddressNiew       *[]string
	macAddressNisw       *[]string
	manufacturer         *[]string
	manufacturerN        *[]string
	manufacturerId       *[]int32
	manufacturerIdN      *[]int32
	model                *[]string
	modelN               *[]string
	modifiedByRequest    *string
	moduleBays           *bool
	name                 *[]string
	nameEmpty            *bool
	nameIc               *[]string
	nameIe               *[]string
	nameIew              *[]string
	nameIsw              *[]string
	nameN                *[]string
	nameNic              *[]string
	nameNie              *[]string
	nameNiew             *[]string
	nameNisw             *[]string
	offset               *int32
	oobIpId              *[]int32
	oobIpIdN             *[]int32
	ordering             *string
	parentDeviceId       *[]int32
	parentDeviceIdN      *[]int32
	passThroughPorts     *bool
	platform             *[]string
	platformN            *[]string
	platformId           *[]*int32
	platformIdN          *[]*int32
	position             *[]float64
	positionEmpty        *bool
	positionGt           *[]float64
	positionGte          *[]float64
	positionLt           *[]float64
	positionLte          *[]float64
	positionN            *[]float64
	powerOutlets         *bool
	powerPorts           *bool
	primaryIp4Id         *[]int32
	primaryIp4IdN        *[]int32
	primaryIp6Id         *[]int32
	primaryIp6IdN        *[]int32
	q                    *string
	rackId               *[]int32
	rackIdN              *[]int32
	region               *[]int32
	regionN              *[]int32
	regionId             *[]int32
	regionIdN            *[]int32
	role                 *[]string
	roleN                *[]string
	roleId               *[]int32
	roleIdN              *[]int32
	serial               *[]string
	serialEmpty          *bool
	serialIc             *[]string
	serialIe             *[]string
	serialIew            *[]string
	serialIsw            *[]string
	serialN              *[]string
	serialNic            *[]string
	serialNie            *[]string
	serialNiew           *[]string
	serialNisw           *[]string
	site                 *[]string
	siteN                *[]string
	siteGroup            *[]int32
	siteGroupN           *[]int32
	siteGroupId          *[]int32
	siteGroupIdN         *[]int32
	siteId               *[]int32
	siteIdN              *[]int32
	status               *[]string
	statusN              *[]string
	tag                  *[]string
	tagN                 *[]string
	tenant               *[]string
	tenantN              *[]string
	tenantGroup          *[]int32
	tenantGroupN         *[]int32
	tenantGroupId        *[]int32
	tenantGroupIdN       *[]int32
	tenantId             *[]*int32
	tenantIdN            *[]*int32
	updatedByRequest     *string
	vcPosition           *[]int32
	vcPositionEmpty      *bool
	vcPositionGt         *[]int32
	vcPositionGte        *[]int32
	vcPositionLt         *[]int32
	vcPositionLte        *[]int32
	vcPositionN          *[]int32
	vcPriority           *[]int32
	vcPriorityEmpty      *bool
	vcPriorityGt         *[]int32
	vcPriorityGte        *[]int32
	vcPriorityLt         *[]int32
	vcPriorityLte        *[]int32
	vcPriorityN          *[]int32
	virtualChassisId     *[]int32
	virtualChassisIdN    *[]int32
	virtualChassisMember *bool
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Airflow(airflow string) ApiPluginsInventoryDcimDevicesListRequest {
	r.airflow = &airflow
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AirflowN(airflowN string) ApiPluginsInventoryDcimDevicesListRequest {
	r.airflowN = &airflowN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTag(assetTag []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagEmpty(assetTagEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagIc(assetTagIc []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagIe(assetTagIe []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagIew(assetTagIew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagIsw(assetTagIsw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagN(assetTagN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagNic(assetTagNic []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagNie(assetTagNie []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagNiew(assetTagNiew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) AssetTagNisw(assetTagNisw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

// VM cluster (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ClusterId(clusterId []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.clusterId = &clusterId
	return r
}

// VM cluster (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ClusterIdN(clusterIdN []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

// Config template (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ConfigTemplateId(configTemplateId []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.configTemplateId = &configTemplateId
	return r
}

// Config template (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ConfigTemplateIdN(configTemplateIdN []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.configTemplateIdN = &configTemplateIdN
	return r
}

// Has console ports
func (r ApiPluginsInventoryDcimDevicesListRequest) ConsolePorts(consolePorts bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.consolePorts = &consolePorts
	return r
}

// Has console server ports
func (r ApiPluginsInventoryDcimDevicesListRequest) ConsoleServerPorts(consoleServerPorts bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.consoleServerPorts = &consoleServerPorts
	return r
}

// Contact
func (r ApiPluginsInventoryDcimDevicesListRequest) Contact(contact []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiPluginsInventoryDcimDevicesListRequest) ContactN(contactN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.contactN = &contactN
	return r
}

// Contact group
func (r ApiPluginsInventoryDcimDevicesListRequest) ContactGroup(contactGroup []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.contactGroup = &contactGroup
	return r
}

// Contact group
func (r ApiPluginsInventoryDcimDevicesListRequest) ContactGroupN(contactGroupN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiPluginsInventoryDcimDevicesListRequest) ContactRole(contactRole []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiPluginsInventoryDcimDevicesListRequest) ContactRoleN(contactRoleN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Created(created []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryDcimDevicesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Description(description []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionIc(descriptionIc []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionIe(descriptionIe []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionIew(descriptionIew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionN(descriptionN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionNic(descriptionNic []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionNie(descriptionNie []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Has device bays
func (r ApiPluginsInventoryDcimDevicesListRequest) DeviceBays(deviceBays bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.deviceBays = &deviceBays
	return r
}

// Device type (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) DeviceType(deviceType []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) DeviceTypeN(deviceTypeN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) DeviceTypeId(deviceTypeId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Face(face string) ApiPluginsInventoryDcimDevicesListRequest {
	r.face = &face
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) FaceN(faceN string) ApiPluginsInventoryDcimDevicesListRequest {
	r.faceN = &faceN
	return r
}

// Has an asset assigned
func (r ApiPluginsInventoryDcimDevicesListRequest) HasAssetAssigned(hasAssetAssigned bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.hasAssetAssigned = &hasAssetAssigned
	return r
}

// Has an out-of-band IP
func (r ApiPluginsInventoryDcimDevicesListRequest) HasOobIp(hasOobIp bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.hasOobIp = &hasOobIp
	return r
}

// Has a primary IP
func (r ApiPluginsInventoryDcimDevicesListRequest) HasPrimaryIp(hasPrimaryIp bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.hasPrimaryIp = &hasPrimaryIp
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Id(id []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) IdGt(idGt []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) IdGte(idGte []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) IdLt(idLt []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) IdLte(idLte []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) IdN(idN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.idN = &idN
	return r
}

// Has interfaces
func (r ApiPluginsInventoryDcimDevicesListRequest) Interfaces(interfaces bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.interfaces = &interfaces
	return r
}

// Is full depth
func (r ApiPluginsInventoryDcimDevicesListRequest) IsFullDepth(isFullDepth bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.isFullDepth = &isFullDepth
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryDcimDevicesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Latitude(latitude []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitude = &latitude
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LatitudeEmpty(latitudeEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitudeEmpty = &latitudeEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LatitudeGt(latitudeGt []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitudeGt = &latitudeGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LatitudeGte(latitudeGte []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitudeGte = &latitudeGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LatitudeLt(latitudeLt []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitudeLt = &latitudeLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LatitudeLte(latitudeLte []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitudeLte = &latitudeLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LatitudeN(latitudeN []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.latitudeN = &latitudeN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryDcimDevicesListRequest) Limit(limit int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.limit = &limit
	return r
}

// Has local config context data
func (r ApiPluginsInventoryDcimDevicesListRequest) LocalContextData(localContextData bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.localContextData = &localContextData
	return r
}

// Location (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) LocationId(locationId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) LocationIdN(locationIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Longitude(longitude []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitude = &longitude
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LongitudeEmpty(longitudeEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitudeEmpty = &longitudeEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LongitudeGt(longitudeGt []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitudeGt = &longitudeGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LongitudeGte(longitudeGte []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitudeGte = &longitudeGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LongitudeLt(longitudeLt []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitudeLt = &longitudeLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LongitudeLte(longitudeLte []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitudeLte = &longitudeLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) LongitudeN(longitudeN []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.longitudeN = &longitudeN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddress(macAddress []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddress = &macAddress
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressIc(macAddressIc []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressIe(macAddressIe []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressIew(macAddressIew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressIsw(macAddressIsw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressN(macAddressN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressN = &macAddressN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressNic(macAddressNic []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressNie(macAddressNie []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressNiew(macAddressNiew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) MacAddressNisw(macAddressNisw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Manufacturer(manufacturer []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) ManufacturerN(manufacturerN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ManufacturerId(manufacturerId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

// Device model (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Model(model []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.model = &model
	return r
}

// Device model (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) ModelN(modelN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryDcimDevicesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Has module bays
func (r ApiPluginsInventoryDcimDevicesListRequest) ModuleBays(moduleBays bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.moduleBays = &moduleBays
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Name(name []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameIc(nameIc []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameIe(nameIe []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameIew(nameIew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameIsw(nameIsw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameN(nameN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameNic(nameNic []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameNie(nameNie []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameNiew(nameNiew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) NameNisw(nameNisw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryDcimDevicesListRequest) Offset(offset int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.offset = &offset
	return r
}

// OOB IP (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) OobIpId(oobIpId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.oobIpId = &oobIpId
	return r
}

// OOB IP (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) OobIpIdN(oobIpIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.oobIpIdN = &oobIpIdN
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryDcimDevicesListRequest) Ordering(ordering string) ApiPluginsInventoryDcimDevicesListRequest {
	r.ordering = &ordering
	return r
}

// Parent Device (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ParentDeviceId(parentDeviceId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.parentDeviceId = &parentDeviceId
	return r
}

// Parent Device (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) ParentDeviceIdN(parentDeviceIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.parentDeviceIdN = &parentDeviceIdN
	return r
}

// Has pass-through ports
func (r ApiPluginsInventoryDcimDevicesListRequest) PassThroughPorts(passThroughPorts bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.passThroughPorts = &passThroughPorts
	return r
}

// Platform (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Platform(platform []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.platform = &platform
	return r
}

// Platform (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) PlatformN(platformN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.platformN = &platformN
	return r
}

// Platform (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) PlatformId(platformId []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.platformId = &platformId
	return r
}

// Platform (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) PlatformIdN(platformIdN []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.platformIdN = &platformIdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Position(position []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.position = &position
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) PositionEmpty(positionEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.positionEmpty = &positionEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) PositionGt(positionGt []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.positionGt = &positionGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) PositionGte(positionGte []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.positionGte = &positionGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) PositionLt(positionLt []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.positionLt = &positionLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) PositionLte(positionLte []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.positionLte = &positionLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) PositionN(positionN []float64) ApiPluginsInventoryDcimDevicesListRequest {
	r.positionN = &positionN
	return r
}

// Has power outlets
func (r ApiPluginsInventoryDcimDevicesListRequest) PowerOutlets(powerOutlets bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.powerOutlets = &powerOutlets
	return r
}

// Has power ports
func (r ApiPluginsInventoryDcimDevicesListRequest) PowerPorts(powerPorts bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.powerPorts = &powerPorts
	return r
}

// Primary IPv4 (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) PrimaryIp4Id(primaryIp4Id []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.primaryIp4Id = &primaryIp4Id
	return r
}

// Primary IPv4 (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) PrimaryIp4IdN(primaryIp4IdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.primaryIp4IdN = &primaryIp4IdN
	return r
}

// Primary IPv6 (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) PrimaryIp6Id(primaryIp6Id []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.primaryIp6Id = &primaryIp6Id
	return r
}

// Primary IPv6 (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) PrimaryIp6IdN(primaryIp6IdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.primaryIp6IdN = &primaryIp6IdN
	return r
}

// Search
func (r ApiPluginsInventoryDcimDevicesListRequest) Q(q string) ApiPluginsInventoryDcimDevicesListRequest {
	r.q = &q
	return r
}

// Rack (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) RackId(rackId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) RackIdN(rackIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.rackIdN = &rackIdN
	return r
}

// Region (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Region(region []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) RegionN(regionN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) RegionId(regionId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) RegionIdN(regionIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Role(role []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) RoleN(roleN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) RoleId(roleId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) RoleIdN(roleIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Serial(serial []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serial = &serial
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialEmpty(serialEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialIc(serialIc []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialIe(serialIe []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialIew(serialIew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialIsw(serialIsw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialN(serialN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialNic(serialNic []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialNie(serialNie []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialNiew(serialNiew []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) SerialNisw(serialNisw []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.serialNisw = &serialNisw
	return r
}

// Site name (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Site(site []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteN(siteN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteN = &siteN
	return r
}

// Site group (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteGroup(siteGroup []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteGroup = &siteGroup
	return r
}

// Site group (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteGroupN(siteGroupN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

// Site group (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteGroupId(siteGroupId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

// Site group (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteGroupIdN(siteGroupIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteId(siteId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) SiteIdN(siteIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Status(status []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.status = &status
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) StatusN(statusN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Tag(tag []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) TagN(tagN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) Tenant(tenant []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantN(tenantN []string) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantGroup(tenantGroup []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantGroupN(tenantGroupN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantGroupId(tenantGroupId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantGroupIdN(tenantGroupIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantId(tenantId []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) TenantIdN(tenantIdN []*int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryDcimDevicesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPosition(vcPosition []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPosition = &vcPosition
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPositionEmpty(vcPositionEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPositionEmpty = &vcPositionEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPositionGt(vcPositionGt []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPositionGt = &vcPositionGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPositionGte(vcPositionGte []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPositionGte = &vcPositionGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPositionLt(vcPositionLt []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPositionLt = &vcPositionLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPositionLte(vcPositionLte []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPositionLte = &vcPositionLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPositionN(vcPositionN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPositionN = &vcPositionN
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriority(vcPriority []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriority = &vcPriority
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriorityEmpty(vcPriorityEmpty bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriorityEmpty = &vcPriorityEmpty
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriorityGt(vcPriorityGt []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriorityGt = &vcPriorityGt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriorityGte(vcPriorityGte []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriorityGte = &vcPriorityGte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriorityLt(vcPriorityLt []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriorityLt = &vcPriorityLt
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriorityLte(vcPriorityLte []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriorityLte = &vcPriorityLte
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) VcPriorityN(vcPriorityN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.vcPriorityN = &vcPriorityN
	return r
}

// Virtual chassis (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) VirtualChassisId(virtualChassisId []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual chassis (ID)
func (r ApiPluginsInventoryDcimDevicesListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiPluginsInventoryDcimDevicesListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

// Is a virtual chassis member
func (r ApiPluginsInventoryDcimDevicesListRequest) VirtualChassisMember(virtualChassisMember bool) ApiPluginsInventoryDcimDevicesListRequest {
	r.virtualChassisMember = &virtualChassisMember
	return r
}

func (r ApiPluginsInventoryDcimDevicesListRequest) Execute() (*PaginatedDeviceWithConfigContextList, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesListExecute(r)
}

/*
PluginsInventoryDcimDevicesList Method for PluginsInventoryDcimDevicesList

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimDevicesListRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesList(ctx context.Context) ApiPluginsInventoryDcimDevicesListRequest {
	return ApiPluginsInventoryDcimDevicesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeviceWithConfigContextList
func (a *PluginsAPIService) PluginsInventoryDcimDevicesListExecute(r ApiPluginsInventoryDcimDevicesListRequest) (*PaginatedDeviceWithConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeviceWithConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.airflow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "airflow", r.airflow, "")
	}
	if r.airflowN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "airflow__n", r.airflowN, "")
	}
	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", t, "multi")
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", t, "multi")
		}
	}
	if r.configTemplateId != nil {
		t := *r.configTemplateId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", t, "multi")
		}
	}
	if r.configTemplateIdN != nil {
		t := *r.configTemplateIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", t, "multi")
		}
	}
	if r.consolePorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_ports", r.consolePorts, "")
	}
	if r.consoleServerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_ports", r.consoleServerPorts, "")
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceBays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_bays", r.deviceBays, "")
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.face != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "face", r.face, "")
	}
	if r.faceN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "face__n", r.faceN, "")
	}
	if r.hasAssetAssigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_asset_assigned", r.hasAssetAssigned, "")
	}
	if r.hasOobIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_oob_ip", r.hasOobIp, "")
	}
	if r.hasPrimaryIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_primary_ip", r.hasPrimaryIp, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces", r.interfaces, "")
	}
	if r.isFullDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_full_depth", r.isFullDepth, "")
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.latitude != nil {
		t := *r.latitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude", t, "multi")
		}
	}
	if r.latitudeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__empty", r.latitudeEmpty, "")
	}
	if r.latitudeGt != nil {
		t := *r.latitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gt", t, "multi")
		}
	}
	if r.latitudeGte != nil {
		t := *r.latitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gte", t, "multi")
		}
	}
	if r.latitudeLt != nil {
		t := *r.latitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lt", t, "multi")
		}
	}
	if r.latitudeLte != nil {
		t := *r.latitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lte", t, "multi")
		}
	}
	if r.latitudeN != nil {
		t := *r.latitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localContextData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local_context_data", r.localContextData, "")
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.longitude != nil {
		t := *r.longitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude", t, "multi")
		}
	}
	if r.longitudeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__empty", r.longitudeEmpty, "")
	}
	if r.longitudeGt != nil {
		t := *r.longitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gt", t, "multi")
		}
	}
	if r.longitudeGte != nil {
		t := *r.longitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gte", t, "multi")
		}
	}
	if r.longitudeLt != nil {
		t := *r.longitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lt", t, "multi")
		}
	}
	if r.longitudeLte != nil {
		t := *r.longitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lte", t, "multi")
		}
	}
	if r.longitudeN != nil {
		t := *r.longitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__n", t, "multi")
		}
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", t, "multi")
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", t, "multi")
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", t, "multi")
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", t, "multi")
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", t, "multi")
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", t, "multi")
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", t, "multi")
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", t, "multi")
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", t, "multi")
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", t, "multi")
		}
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model", t, "multi")
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleBays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module_bays", r.moduleBays, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.oobIpId != nil {
		t := *r.oobIpId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id", t, "multi")
		}
	}
	if r.oobIpIdN != nil {
		t := *r.oobIpIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id__n", t, "multi")
		}
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentDeviceId != nil {
		t := *r.parentDeviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id", t, "multi")
		}
	}
	if r.parentDeviceIdN != nil {
		t := *r.parentDeviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id__n", t, "multi")
		}
	}
	if r.passThroughPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pass_through_ports", r.passThroughPorts, "")
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform", t, "multi")
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", t, "multi")
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", t, "multi")
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", t, "multi")
		}
	}
	if r.position != nil {
		t := *r.position
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position", t, "multi")
		}
	}
	if r.positionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position__empty", r.positionEmpty, "")
	}
	if r.positionGt != nil {
		t := *r.positionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__gt", t, "multi")
		}
	}
	if r.positionGte != nil {
		t := *r.positionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__gte", t, "multi")
		}
	}
	if r.positionLt != nil {
		t := *r.positionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__lt", t, "multi")
		}
	}
	if r.positionLte != nil {
		t := *r.positionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__lte", t, "multi")
		}
	}
	if r.positionN != nil {
		t := *r.positionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", t, "multi")
		}
	}
	if r.powerOutlets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlets", r.powerOutlets, "")
	}
	if r.powerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_ports", r.powerPorts, "")
	}
	if r.primaryIp4Id != nil {
		t := *r.primaryIp4Id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id", t, "multi")
		}
	}
	if r.primaryIp4IdN != nil {
		t := *r.primaryIp4IdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id__n", t, "multi")
		}
	}
	if r.primaryIp6Id != nil {
		t := *r.primaryIp6Id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id", t, "multi")
		}
	}
	if r.primaryIp6IdN != nil {
		t := *r.primaryIp6IdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.vcPosition != nil {
		t := *r.vcPosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position", t, "multi")
		}
	}
	if r.vcPositionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__empty", r.vcPositionEmpty, "")
	}
	if r.vcPositionGt != nil {
		t := *r.vcPositionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gt", t, "multi")
		}
	}
	if r.vcPositionGte != nil {
		t := *r.vcPositionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gte", t, "multi")
		}
	}
	if r.vcPositionLt != nil {
		t := *r.vcPositionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lt", t, "multi")
		}
	}
	if r.vcPositionLte != nil {
		t := *r.vcPositionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lte", t, "multi")
		}
	}
	if r.vcPositionN != nil {
		t := *r.vcPositionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__n", t, "multi")
		}
	}
	if r.vcPriority != nil {
		t := *r.vcPriority
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority", t, "multi")
		}
	}
	if r.vcPriorityEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__empty", r.vcPriorityEmpty, "")
	}
	if r.vcPriorityGt != nil {
		t := *r.vcPriorityGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gt", t, "multi")
		}
	}
	if r.vcPriorityGte != nil {
		t := *r.vcPriorityGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gte", t, "multi")
		}
	}
	if r.vcPriorityLt != nil {
		t := *r.vcPriorityLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lt", t, "multi")
		}
	}
	if r.vcPriorityLte != nil {
		t := *r.vcPriorityLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lte", t, "multi")
		}
	}
	if r.vcPriorityN != nil {
		t := *r.vcPriorityN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	if r.virtualChassisMember != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_member", r.virtualChassisMember, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesPartialUpdateRequest struct {
	ctx                                           context.Context
	ApiService                                    *PluginsAPIService
	id                                            int32
	patchedWritableDeviceWithConfigContextRequest *PatchedWritableDeviceWithConfigContextRequest
}

func (r ApiPluginsInventoryDcimDevicesPartialUpdateRequest) PatchedWritableDeviceWithConfigContextRequest(patchedWritableDeviceWithConfigContextRequest PatchedWritableDeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesPartialUpdateRequest {
	r.patchedWritableDeviceWithConfigContextRequest = &patchedWritableDeviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesPartialUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesPartialUpdateExecute(r)
}

/*
PluginsInventoryDcimDevicesPartialUpdate Method for PluginsInventoryDcimDevicesPartialUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiPluginsInventoryDcimDevicesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryDcimDevicesPartialUpdateRequest {
	return ApiPluginsInventoryDcimDevicesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesPartialUpdateExecute(r ApiPluginsInventoryDcimDevicesPartialUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest struct {
	ctx                                    context.Context
	ApiService                             *PluginsAPIService
	id                                     int32
	writableDeviceWithConfigContextRequest *WritableDeviceWithConfigContextRequest
	format                                 *DcimDevicesRenderConfigCreateFormatParameter
}

func (r ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest) WritableDeviceWithConfigContextRequest(writableDeviceWithConfigContextRequest WritableDeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest {
	r.writableDeviceWithConfigContextRequest = &writableDeviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest) Format(format DcimDevicesRenderConfigCreateFormatParameter) ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest {
	r.format = &format
	return r
}

func (r ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesRenderConfigCreateExecute(r)
}

/*
PluginsInventoryDcimDevicesRenderConfigCreate Method for PluginsInventoryDcimDevicesRenderConfigCreate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesRenderConfigCreate(ctx context.Context, id int32) ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest {
	return ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesRenderConfigCreateExecute(r ApiPluginsInventoryDcimDevicesRenderConfigCreateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesRenderConfigCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/{id}/render-config/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContextRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDcimDevicesRetrieveRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesRetrieveExecute(r)
}

/*
PluginsInventoryDcimDevicesRetrieve Method for PluginsInventoryDcimDevicesRetrieve

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiPluginsInventoryDcimDevicesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesRetrieve(ctx context.Context, id int32) ApiPluginsInventoryDcimDevicesRetrieveRequest {
	return ApiPluginsInventoryDcimDevicesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesRetrieveExecute(r ApiPluginsInventoryDcimDevicesRetrieveRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimDevicesUpdateRequest struct {
	ctx                                    context.Context
	ApiService                             *PluginsAPIService
	id                                     int32
	writableDeviceWithConfigContextRequest *WritableDeviceWithConfigContextRequest
}

func (r ApiPluginsInventoryDcimDevicesUpdateRequest) WritableDeviceWithConfigContextRequest(writableDeviceWithConfigContextRequest WritableDeviceWithConfigContextRequest) ApiPluginsInventoryDcimDevicesUpdateRequest {
	r.writableDeviceWithConfigContextRequest = &writableDeviceWithConfigContextRequest
	return r
}

func (r ApiPluginsInventoryDcimDevicesUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimDevicesUpdateExecute(r)
}

/*
PluginsInventoryDcimDevicesUpdate Method for PluginsInventoryDcimDevicesUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiPluginsInventoryDcimDevicesUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimDevicesUpdate(ctx context.Context, id int32) ApiPluginsInventoryDcimDevicesUpdateRequest {
	return ApiPluginsInventoryDcimDevicesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *PluginsAPIService) PluginsInventoryDcimDevicesUpdateExecute(r ApiPluginsInventoryDcimDevicesUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimDevicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	inventoryItemRequest *[]InventoryItemRequest
}

func (r ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest) InventoryItemRequest(inventoryItemRequest []InventoryItemRequest) ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsBulkDestroyExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsBulkDestroy Method for PluginsInventoryDcimInventoryItemsBulkDestroy

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsBulkDestroy(ctx context.Context) ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest {
	return ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsBulkDestroyExecute(r ApiPluginsInventoryDcimInventoryItemsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	inventoryItemRequest *[]InventoryItemRequest
}

func (r ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest) InventoryItemRequest(inventoryItemRequest []InventoryItemRequest) ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest) Execute() ([]InventoryItem, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsBulkPartialUpdate Method for PluginsInventoryDcimInventoryItemsBulkPartialUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest {
	return ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItem
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsBulkPartialUpdateExecute(r ApiPluginsInventoryDcimInventoryItemsBulkPartialUpdateRequest) ([]InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest struct {
	ctx                  context.Context
	ApiService           *PluginsAPIService
	inventoryItemRequest *[]InventoryItemRequest
}

func (r ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest) InventoryItemRequest(inventoryItemRequest []InventoryItemRequest) ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest) Execute() ([]InventoryItem, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsBulkUpdateExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsBulkUpdate Method for PluginsInventoryDcimInventoryItemsBulkUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsBulkUpdate(ctx context.Context) ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest {
	return ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItem
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsBulkUpdateExecute(r ApiPluginsInventoryDcimInventoryItemsBulkUpdateRequest) ([]InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsCreateRequest struct {
	ctx                          context.Context
	ApiService                   *PluginsAPIService
	writableInventoryItemRequest *WritableInventoryItemRequest
}

func (r ApiPluginsInventoryDcimInventoryItemsCreateRequest) WritableInventoryItemRequest(writableInventoryItemRequest WritableInventoryItemRequest) ApiPluginsInventoryDcimInventoryItemsCreateRequest {
	r.writableInventoryItemRequest = &writableInventoryItemRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsCreateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsCreateExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsCreate Method for PluginsInventoryDcimInventoryItemsCreate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimInventoryItemsCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsCreate(ctx context.Context) ApiPluginsInventoryDcimInventoryItemsCreateRequest {
	return ApiPluginsInventoryDcimInventoryItemsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsCreateExecute(r ApiPluginsInventoryDcimInventoryItemsCreateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDcimInventoryItemsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsDestroyExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsDestroy Method for PluginsInventoryDcimInventoryItemsDestroy

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiPluginsInventoryDcimInventoryItemsDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsDestroy(ctx context.Context, id int32) ApiPluginsInventoryDcimInventoryItemsDestroyRequest {
	return ApiPluginsInventoryDcimInventoryItemsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsDestroyExecute(r ApiPluginsInventoryDcimInventoryItemsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	assetTag          *[]string
	assetTagEmpty     *bool
	assetTagIc        *[]string
	assetTagIe        *[]string
	assetTagIew       *[]string
	assetTagIsw       *[]string
	assetTagN         *[]string
	assetTagNic       *[]string
	assetTagNie       *[]string
	assetTagNiew      *[]string
	assetTagNisw      *[]string
	componentId       *[]int32
	componentIdEmpty  *[]int32
	componentIdGt     *[]int32
	componentIdGte    *[]int32
	componentIdLt     *[]int32
	componentIdLte    *[]int32
	componentIdN      *[]int32
	componentType     *string
	componentTypeN    *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceType        *[]string
	deviceTypeN       *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	discovered        *bool
	hasAssetAssigned  *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	manufacturer      *[]string
	manufacturerN     *[]string
	manufacturerId    *[]*int32
	manufacturerIdN   *[]*int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parentId          *[]*int32
	parentIdN         *[]*int32
	partId            *[]string
	partIdEmpty       *bool
	partIdIc          *[]string
	partIdIe          *[]string
	partIdIew         *[]string
	partIdIsw         *[]string
	partIdN           *[]string
	partIdNic         *[]string
	partIdNie         *[]string
	partIdNiew        *[]string
	partIdNisw        *[]string
	q                 *string
	rack              *[]string
	rackN             *[]string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]int32
	regionN           *[]int32
	regionId          *[]int32
	regionIdN         *[]int32
	role              *[]string
	roleN             *[]string
	roleId            *[]*int32
	roleIdN           *[]*int32
	serial            *[]string
	serialEmpty       *bool
	serialIc          *[]string
	serialIe          *[]string
	serialIew         *[]string
	serialIsw         *[]string
	serialN           *[]string
	serialNic         *[]string
	serialNie         *[]string
	serialNiew        *[]string
	serialNisw        *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]int32
	siteGroupN        *[]int32
	siteGroupId       *[]int32
	siteGroupIdN      *[]int32
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
	virtualChassis    *[]string
	virtualChassisN   *[]string
	virtualChassisId  *[]int32
	virtualChassisIdN *[]int32
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTag(assetTag []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagEmpty(assetTagEmpty bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagIc(assetTagIc []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagIe(assetTagIe []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagIew(assetTagIew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagIsw(assetTagIsw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagN(assetTagN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagNic(assetTagNic []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagNie(assetTagNie []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagNiew(assetTagNiew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) AssetTagNisw(assetTagNisw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentId(componentId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentId = &componentId
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentIdEmpty(componentIdEmpty []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentIdEmpty = &componentIdEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentIdGt(componentIdGt []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentIdGt = &componentIdGt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentIdGte(componentIdGte []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentIdGte = &componentIdGte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentIdLt(componentIdLt []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentIdLt = &componentIdLt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentIdLte(componentIdLte []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentIdLte = &componentIdLte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentIdN(componentIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentIdN = &componentIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentType(componentType string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentType = &componentType
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ComponentTypeN(componentTypeN string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.componentTypeN = &componentTypeN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Created(created []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

// Device (name)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Device(device []*string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceN(deviceN []*string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceId(deviceId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceIdN(deviceIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceRole(deviceRole []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceRoleN(deviceRoleN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceRoleId(deviceRoleId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

// Device type (model)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceType(deviceType []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceTypeN(deviceTypeN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceTypeId(deviceTypeId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Discovered(discovered bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.discovered = &discovered
	return r
}

// Has an asset assigned
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) HasAssetAssigned(hasAssetAssigned bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.hasAssetAssigned = &hasAssetAssigned
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Id(id []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) IdGt(idGt []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) IdGte(idGte []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) IdLt(idLt []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) IdLte(idLte []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) IdN(idN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Label(label []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.label = &label
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelEmpty(labelEmpty bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelIc(labelIc []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelIe(labelIe []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelIew(labelIew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelIsw(labelIsw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelN(labelN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelNic(labelNic []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelNie(labelNie []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelNiew(labelNiew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LabelNisw(labelNisw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Limit(limit int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Location(location []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LocationN(locationN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LocationId(locationId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) LocationIdN(locationIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.locationIdN = &locationIdN
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Manufacturer(manufacturer []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ManufacturerN(manufacturerN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ManufacturerId(manufacturerId []*int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ManufacturerIdN(manufacturerIdN []*int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Name(name []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameIc(nameIc []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameIe(nameIe []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameIew(nameIew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameIsw(nameIsw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameN(nameN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameNic(nameNic []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameNie(nameNie []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameNiew(nameNiew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) NameNisw(nameNisw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Offset(offset int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Ordering(ordering string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.ordering = &ordering
	return r
}

// Parent inventory item (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ParentId(parentId []*int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.parentId = &parentId
	return r
}

// Parent inventory item (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) ParentIdN(parentIdN []*int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.parentIdN = &parentIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartId(partId []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partId = &partId
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdEmpty(partIdEmpty bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdEmpty = &partIdEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdIc(partIdIc []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdIc = &partIdIc
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdIe(partIdIe []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdIe = &partIdIe
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdIew(partIdIew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdIew = &partIdIew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdIsw(partIdIsw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdIsw = &partIdIsw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdN(partIdN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdN = &partIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdNic(partIdNic []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdNic = &partIdNic
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdNie(partIdNie []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdNie = &partIdNie
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdNiew(partIdNiew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdNiew = &partIdNiew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) PartIdNisw(partIdNisw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.partIdNisw = &partIdNisw
	return r
}

// Search
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Q(q string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Rack(rack []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RackN(rackN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RackId(rackId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RackIdN(rackIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.rackIdN = &rackIdN
	return r
}

// Region (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Region(region []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RegionN(regionN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RegionId(regionId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RegionIdN(regionIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Role(role []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RoleN(roleN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RoleId(roleId []*int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) RoleIdN(roleIdN []*int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Serial(serial []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serial = &serial
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialEmpty(serialEmpty bool) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialIc(serialIc []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialIe(serialIe []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialIew(serialIew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialIsw(serialIsw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialN(serialN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialNic(serialNic []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialNie(serialNie []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialNiew(serialNiew []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SerialNisw(serialNisw []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.serialNisw = &serialNisw
	return r
}

// Site name (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Site(site []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteN(siteN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteN = &siteN
	return r
}

// Site group (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteGroup(siteGroup []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteGroup = &siteGroup
	return r
}

// Site group (slug)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteGroupN(siteGroupN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

// Site group (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteGroupId(siteGroupId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

// Site group (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteGroupIdN(siteGroupIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteId(siteId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) SiteIdN(siteIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Tag(tag []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) TagN(tagN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) VirtualChassis(virtualChassis []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) VirtualChassisN(virtualChassisN []string) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) VirtualChassisId(virtualChassisId []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiPluginsInventoryDcimInventoryItemsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiPluginsInventoryDcimInventoryItemsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsListRequest) Execute() (*PaginatedInventoryItemList, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsListExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsList Method for PluginsInventoryDcimInventoryItemsList

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimInventoryItemsListRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsList(ctx context.Context) ApiPluginsInventoryDcimInventoryItemsListRequest {
	return ApiPluginsInventoryDcimInventoryItemsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInventoryItemList
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsListExecute(r ApiPluginsInventoryDcimInventoryItemsListRequest) (*PaginatedInventoryItemList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInventoryItemList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.componentId != nil {
		t := *r.componentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id", t, "multi")
		}
	}
	if r.componentIdEmpty != nil {
		t := *r.componentIdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__empty", t, "multi")
		}
	}
	if r.componentIdGt != nil {
		t := *r.componentIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gt", t, "multi")
		}
	}
	if r.componentIdGte != nil {
		t := *r.componentIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gte", t, "multi")
		}
	}
	if r.componentIdLt != nil {
		t := *r.componentIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lt", t, "multi")
		}
	}
	if r.componentIdLte != nil {
		t := *r.componentIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lte", t, "multi")
		}
	}
	if r.componentIdN != nil {
		t := *r.componentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__n", t, "multi")
		}
	}
	if r.componentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type", r.componentType, "")
	}
	if r.componentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type__n", r.componentTypeN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.discovered != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discovered", r.discovered, "")
	}
	if r.hasAssetAssigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_asset_assigned", r.hasAssetAssigned, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id", t, "multi")
		}
	}
	if r.partIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__empty", r.partIdEmpty, "")
	}
	if r.partIdIc != nil {
		t := *r.partIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ic", t, "multi")
		}
	}
	if r.partIdIe != nil {
		t := *r.partIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ie", t, "multi")
		}
	}
	if r.partIdIew != nil {
		t := *r.partIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__iew", t, "multi")
		}
	}
	if r.partIdIsw != nil {
		t := *r.partIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__isw", t, "multi")
		}
	}
	if r.partIdN != nil {
		t := *r.partIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__n", t, "multi")
		}
	}
	if r.partIdNic != nil {
		t := *r.partIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nic", t, "multi")
		}
	}
	if r.partIdNie != nil {
		t := *r.partIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nie", t, "multi")
		}
	}
	if r.partIdNiew != nil {
		t := *r.partIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__niew", t, "multi")
		}
	}
	if r.partIdNisw != nil {
		t := *r.partIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *PluginsAPIService
	id                                  int32
	patchedWritableInventoryItemRequest *PatchedWritableInventoryItemRequest
}

func (r ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest) PatchedWritableInventoryItemRequest(patchedWritableInventoryItemRequest PatchedWritableInventoryItemRequest) ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest {
	r.patchedWritableInventoryItemRequest = &patchedWritableInventoryItemRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsPartialUpdateExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsPartialUpdate Method for PluginsInventoryDcimInventoryItemsPartialUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest {
	return ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsPartialUpdateExecute(r ApiPluginsInventoryDcimInventoryItemsPartialUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDcimInventoryItemsRetrieveRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsRetrieveExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsRetrieve Method for PluginsInventoryDcimInventoryItemsRetrieve

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiPluginsInventoryDcimInventoryItemsRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsRetrieve(ctx context.Context, id int32) ApiPluginsInventoryDcimInventoryItemsRetrieveRequest {
	return ApiPluginsInventoryDcimInventoryItemsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsRetrieveExecute(r ApiPluginsInventoryDcimInventoryItemsRetrieveRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimInventoryItemsUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *PluginsAPIService
	id                           int32
	writableInventoryItemRequest *WritableInventoryItemRequest
}

func (r ApiPluginsInventoryDcimInventoryItemsUpdateRequest) WritableInventoryItemRequest(writableInventoryItemRequest WritableInventoryItemRequest) ApiPluginsInventoryDcimInventoryItemsUpdateRequest {
	r.writableInventoryItemRequest = &writableInventoryItemRequest
	return r
}

func (r ApiPluginsInventoryDcimInventoryItemsUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimInventoryItemsUpdateExecute(r)
}

/*
PluginsInventoryDcimInventoryItemsUpdate Method for PluginsInventoryDcimInventoryItemsUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiPluginsInventoryDcimInventoryItemsUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsUpdate(ctx context.Context, id int32) ApiPluginsInventoryDcimInventoryItemsUpdateRequest {
	return ApiPluginsInventoryDcimInventoryItemsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *PluginsAPIService) PluginsInventoryDcimInventoryItemsUpdateExecute(r ApiPluginsInventoryDcimInventoryItemsUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimInventoryItemsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesBulkDestroyRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	moduleRequest *[]ModuleRequest
}

func (r ApiPluginsInventoryDcimModulesBulkDestroyRequest) ModuleRequest(moduleRequest []ModuleRequest) ApiPluginsInventoryDcimModulesBulkDestroyRequest {
	r.moduleRequest = &moduleRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesBulkDestroyExecute(r)
}

/*
PluginsInventoryDcimModulesBulkDestroy Method for PluginsInventoryDcimModulesBulkDestroy

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimModulesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesBulkDestroy(ctx context.Context) ApiPluginsInventoryDcimModulesBulkDestroyRequest {
	return ApiPluginsInventoryDcimModulesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDcimModulesBulkDestroyExecute(r ApiPluginsInventoryDcimModulesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleRequest == nil {
		return nil, reportError("moduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	moduleRequest *[]ModuleRequest
}

func (r ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest) ModuleRequest(moduleRequest []ModuleRequest) ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest {
	r.moduleRequest = &moduleRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest) Execute() ([]Module, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryDcimModulesBulkPartialUpdate Method for PluginsInventoryDcimModulesBulkPartialUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest {
	return ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Module
func (a *PluginsAPIService) PluginsInventoryDcimModulesBulkPartialUpdateExecute(r ApiPluginsInventoryDcimModulesBulkPartialUpdateRequest) ([]Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleRequest == nil {
		return localVarReturnValue, nil, reportError("moduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesBulkUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	moduleRequest *[]ModuleRequest
}

func (r ApiPluginsInventoryDcimModulesBulkUpdateRequest) ModuleRequest(moduleRequest []ModuleRequest) ApiPluginsInventoryDcimModulesBulkUpdateRequest {
	r.moduleRequest = &moduleRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesBulkUpdateRequest) Execute() ([]Module, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesBulkUpdateExecute(r)
}

/*
PluginsInventoryDcimModulesBulkUpdate Method for PluginsInventoryDcimModulesBulkUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimModulesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesBulkUpdate(ctx context.Context) ApiPluginsInventoryDcimModulesBulkUpdateRequest {
	return ApiPluginsInventoryDcimModulesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Module
func (a *PluginsAPIService) PluginsInventoryDcimModulesBulkUpdateExecute(r ApiPluginsInventoryDcimModulesBulkUpdateRequest) ([]Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleRequest == nil {
		return localVarReturnValue, nil, reportError("moduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesCreateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	writableModuleRequest *WritableModuleRequest
}

func (r ApiPluginsInventoryDcimModulesCreateRequest) WritableModuleRequest(writableModuleRequest WritableModuleRequest) ApiPluginsInventoryDcimModulesCreateRequest {
	r.writableModuleRequest = &writableModuleRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesCreateRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesCreateExecute(r)
}

/*
PluginsInventoryDcimModulesCreate Method for PluginsInventoryDcimModulesCreate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimModulesCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesCreate(ctx context.Context) ApiPluginsInventoryDcimModulesCreateRequest {
	return ApiPluginsInventoryDcimModulesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Module
func (a *PluginsAPIService) PluginsInventoryDcimModulesCreateExecute(r ApiPluginsInventoryDcimModulesCreateRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableModuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableModuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableModuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDcimModulesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesDestroyExecute(r)
}

/*
PluginsInventoryDcimModulesDestroy Method for PluginsInventoryDcimModulesDestroy

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiPluginsInventoryDcimModulesDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesDestroy(ctx context.Context, id int32) ApiPluginsInventoryDcimModulesDestroyRequest {
	return ApiPluginsInventoryDcimModulesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDcimModulesDestroyExecute(r ApiPluginsInventoryDcimModulesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	assetTag          *[]string
	assetTagEmpty     *bool
	assetTagIc        *[]string
	assetTagIe        *[]string
	assetTagIew       *[]string
	assetTagIsw       *[]string
	assetTagN         *[]string
	assetTagNic       *[]string
	assetTagNie       *[]string
	assetTagNiew      *[]string
	assetTagNisw      *[]string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceId          *[]int32
	deviceIdN         *[]int32
	hasAssetAssigned  *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	manufacturer      *[]string
	manufacturerN     *[]string
	manufacturerId    *[]int32
	manufacturerIdN   *[]int32
	modifiedByRequest *string
	moduleBayId       *[]int32
	moduleBayIdN      *[]int32
	moduleType        *[]string
	moduleTypeN       *[]string
	moduleTypeId      *[]int32
	moduleTypeIdN     *[]int32
	offset            *int32
	ordering          *string
	q                 *string
	serial            *[]string
	serialEmpty       *bool
	serialIc          *[]string
	serialIe          *[]string
	serialIew         *[]string
	serialIsw         *[]string
	serialN           *[]string
	serialNic         *[]string
	serialNie         *[]string
	serialNiew        *[]string
	serialNisw        *[]string
	status            *[]string
	statusN           *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTag(assetTag []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagEmpty(assetTagEmpty bool) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagIc(assetTagIc []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagIe(assetTagIe []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagIew(assetTagIew []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagIsw(assetTagIsw []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagN(assetTagN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagNic(assetTagNic []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagNie(assetTagNie []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagNiew(assetTagNiew []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) AssetTagNisw(assetTagNisw []string) ApiPluginsInventoryDcimModulesListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Created(created []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryDcimModulesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Description(description []string) ApiPluginsInventoryDcimModulesListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionIc(descriptionIc []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionIe(descriptionIe []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionIew(descriptionIew []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionN(descriptionN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionNic(descriptionNic []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionNie(descriptionNie []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsInventoryDcimModulesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) DeviceId(deviceId []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) DeviceIdN(deviceIdN []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Has an asset assigned
func (r ApiPluginsInventoryDcimModulesListRequest) HasAssetAssigned(hasAssetAssigned bool) ApiPluginsInventoryDcimModulesListRequest {
	r.hasAssetAssigned = &hasAssetAssigned
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Id(id []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryDcimModulesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) IdGt(idGt []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) IdGte(idGte []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) IdLt(idLt []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) IdLte(idLte []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) IdN(idN []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryDcimModulesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryDcimModulesListRequest) Limit(limit int32) ApiPluginsInventoryDcimModulesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryDcimModulesListRequest) Manufacturer(manufacturer []string) ApiPluginsInventoryDcimModulesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryDcimModulesListRequest) ManufacturerN(manufacturerN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) ManufacturerId(manufacturerId []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryDcimModulesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module Bay (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) ModuleBayId(moduleBayId []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.moduleBayId = &moduleBayId
	return r
}

// Module Bay (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) ModuleBayIdN(moduleBayIdN []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.moduleBayIdN = &moduleBayIdN
	return r
}

// Module type (model)
func (r ApiPluginsInventoryDcimModulesListRequest) ModuleType(moduleType []string) ApiPluginsInventoryDcimModulesListRequest {
	r.moduleType = &moduleType
	return r
}

// Module type (model)
func (r ApiPluginsInventoryDcimModulesListRequest) ModuleTypeN(moduleTypeN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.moduleTypeN = &moduleTypeN
	return r
}

// Module type (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) ModuleTypeId(moduleTypeId []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiPluginsInventoryDcimModulesListRequest) ModuleTypeIdN(moduleTypeIdN []int32) ApiPluginsInventoryDcimModulesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryDcimModulesListRequest) Offset(offset int32) ApiPluginsInventoryDcimModulesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryDcimModulesListRequest) Ordering(ordering string) ApiPluginsInventoryDcimModulesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsInventoryDcimModulesListRequest) Q(q string) ApiPluginsInventoryDcimModulesListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Serial(serial []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serial = &serial
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialEmpty(serialEmpty bool) ApiPluginsInventoryDcimModulesListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialIc(serialIc []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialIe(serialIe []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialIew(serialIew []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialIsw(serialIsw []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialN(serialN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialNic(serialNic []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialNie(serialNie []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialNiew(serialNiew []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) SerialNisw(serialNisw []string) ApiPluginsInventoryDcimModulesListRequest {
	r.serialNisw = &serialNisw
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Status(status []string) ApiPluginsInventoryDcimModulesListRequest {
	r.status = &status
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) StatusN(statusN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Tag(tag []string) ApiPluginsInventoryDcimModulesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) TagN(tagN []string) ApiPluginsInventoryDcimModulesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryDcimModulesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesListRequest) Execute() (*PaginatedModuleList, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesListExecute(r)
}

/*
PluginsInventoryDcimModulesList Method for PluginsInventoryDcimModulesList

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDcimModulesListRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesList(ctx context.Context) ApiPluginsInventoryDcimModulesListRequest {
	return ApiPluginsInventoryDcimModulesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedModuleList
func (a *PluginsAPIService) PluginsInventoryDcimModulesListExecute(r ApiPluginsInventoryDcimModulesListRequest) (*PaginatedModuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.hasAssetAssigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_asset_assigned", r.hasAssetAssigned, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleBayId != nil {
		t := *r.moduleBayId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id", t, "multi")
		}
	}
	if r.moduleBayIdN != nil {
		t := *r.moduleBayIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id__n", t, "multi")
		}
	}
	if r.moduleType != nil {
		t := *r.moduleType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type", t, "multi")
		}
	}
	if r.moduleTypeN != nil {
		t := *r.moduleTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type__n", t, "multi")
		}
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *PluginsAPIService
	id                           int32
	patchedWritableModuleRequest *PatchedWritableModuleRequest
}

func (r ApiPluginsInventoryDcimModulesPartialUpdateRequest) PatchedWritableModuleRequest(patchedWritableModuleRequest PatchedWritableModuleRequest) ApiPluginsInventoryDcimModulesPartialUpdateRequest {
	r.patchedWritableModuleRequest = &patchedWritableModuleRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesPartialUpdateRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesPartialUpdateExecute(r)
}

/*
PluginsInventoryDcimModulesPartialUpdate Method for PluginsInventoryDcimModulesPartialUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiPluginsInventoryDcimModulesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryDcimModulesPartialUpdateRequest {
	return ApiPluginsInventoryDcimModulesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Module
func (a *PluginsAPIService) PluginsInventoryDcimModulesPartialUpdateExecute(r ApiPluginsInventoryDcimModulesPartialUpdateRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableModuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDcimModulesRetrieveRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesRetrieveExecute(r)
}

/*
PluginsInventoryDcimModulesRetrieve Method for PluginsInventoryDcimModulesRetrieve

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiPluginsInventoryDcimModulesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesRetrieve(ctx context.Context, id int32) ApiPluginsInventoryDcimModulesRetrieveRequest {
	return ApiPluginsInventoryDcimModulesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Module
func (a *PluginsAPIService) PluginsInventoryDcimModulesRetrieveExecute(r ApiPluginsInventoryDcimModulesRetrieveRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDcimModulesUpdateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	id                    int32
	writableModuleRequest *WritableModuleRequest
}

func (r ApiPluginsInventoryDcimModulesUpdateRequest) WritableModuleRequest(writableModuleRequest WritableModuleRequest) ApiPluginsInventoryDcimModulesUpdateRequest {
	r.writableModuleRequest = &writableModuleRequest
	return r
}

func (r ApiPluginsInventoryDcimModulesUpdateRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.PluginsInventoryDcimModulesUpdateExecute(r)
}

/*
PluginsInventoryDcimModulesUpdate Method for PluginsInventoryDcimModulesUpdate

Adds option to filter on asset assignemnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiPluginsInventoryDcimModulesUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDcimModulesUpdate(ctx context.Context, id int32) ApiPluginsInventoryDcimModulesUpdateRequest {
	return ApiPluginsInventoryDcimModulesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Module
func (a *PluginsAPIService) PluginsInventoryDcimModulesUpdateExecute(r ApiPluginsInventoryDcimModulesUpdateRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDcimModulesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableModuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableModuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableModuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	deliveryRequest *[]DeliveryRequest
}

func (r ApiPluginsInventoryDeliveriesBulkDestroyRequest) DeliveryRequest(deliveryRequest []DeliveryRequest) ApiPluginsInventoryDeliveriesBulkDestroyRequest {
	r.deliveryRequest = &deliveryRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesBulkDestroyExecute(r)
}

/*
PluginsInventoryDeliveriesBulkDestroy Method for PluginsInventoryDeliveriesBulkDestroy

Delete a list of delivery objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDeliveriesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesBulkDestroy(ctx context.Context) ApiPluginsInventoryDeliveriesBulkDestroyRequest {
	return ApiPluginsInventoryDeliveriesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDeliveriesBulkDestroyExecute(r ApiPluginsInventoryDeliveriesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deliveryRequest == nil {
		return nil, reportError("deliveryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deliveryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	deliveryRequest *[]DeliveryRequest
}

func (r ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest) DeliveryRequest(deliveryRequest []DeliveryRequest) ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest {
	r.deliveryRequest = &deliveryRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest) Execute() ([]Delivery, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryDeliveriesBulkPartialUpdate Method for PluginsInventoryDeliveriesBulkPartialUpdate

Patch a list of delivery objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest {
	return ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Delivery
func (a *PluginsAPIService) PluginsInventoryDeliveriesBulkPartialUpdateExecute(r ApiPluginsInventoryDeliveriesBulkPartialUpdateRequest) ([]Delivery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Delivery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deliveryRequest == nil {
		return localVarReturnValue, nil, reportError("deliveryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deliveryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	deliveryRequest *[]DeliveryRequest
}

func (r ApiPluginsInventoryDeliveriesBulkUpdateRequest) DeliveryRequest(deliveryRequest []DeliveryRequest) ApiPluginsInventoryDeliveriesBulkUpdateRequest {
	r.deliveryRequest = &deliveryRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesBulkUpdateRequest) Execute() ([]Delivery, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesBulkUpdateExecute(r)
}

/*
PluginsInventoryDeliveriesBulkUpdate Method for PluginsInventoryDeliveriesBulkUpdate

Put a list of delivery objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDeliveriesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesBulkUpdate(ctx context.Context) ApiPluginsInventoryDeliveriesBulkUpdateRequest {
	return ApiPluginsInventoryDeliveriesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Delivery
func (a *PluginsAPIService) PluginsInventoryDeliveriesBulkUpdateExecute(r ApiPluginsInventoryDeliveriesBulkUpdateRequest) ([]Delivery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Delivery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deliveryRequest == nil {
		return localVarReturnValue, nil, reportError("deliveryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deliveryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesCreateRequest struct {
	ctx                     context.Context
	ApiService              *PluginsAPIService
	writableDeliveryRequest *WritableDeliveryRequest
}

func (r ApiPluginsInventoryDeliveriesCreateRequest) WritableDeliveryRequest(writableDeliveryRequest WritableDeliveryRequest) ApiPluginsInventoryDeliveriesCreateRequest {
	r.writableDeliveryRequest = &writableDeliveryRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesCreateRequest) Execute() (*Delivery, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesCreateExecute(r)
}

/*
PluginsInventoryDeliveriesCreate Method for PluginsInventoryDeliveriesCreate

Post a list of delivery objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDeliveriesCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesCreate(ctx context.Context) ApiPluginsInventoryDeliveriesCreateRequest {
	return ApiPluginsInventoryDeliveriesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Delivery
func (a *PluginsAPIService) PluginsInventoryDeliveriesCreateExecute(r ApiPluginsInventoryDeliveriesCreateRequest) (*Delivery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Delivery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeliveryRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeliveryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeliveryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDeliveriesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesDestroyExecute(r)
}

/*
PluginsInventoryDeliveriesDestroy Method for PluginsInventoryDeliveriesDestroy

Delete a delivery object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this delivery.
	@return ApiPluginsInventoryDeliveriesDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesDestroy(ctx context.Context, id int32) ApiPluginsInventoryDeliveriesDestroyRequest {
	return ApiPluginsInventoryDeliveriesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryDeliveriesDestroyExecute(r ApiPluginsInventoryDeliveriesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesListRequest struct {
	ctx                 context.Context
	ApiService          *PluginsAPIService
	created             *[]time.Time
	createdEmpty        *[]time.Time
	createdGt           *[]time.Time
	createdGte          *[]time.Time
	createdLt           *[]time.Time
	createdLte          *[]time.Time
	createdN            *[]time.Time
	createdByRequest    *string
	dateAfter           *string
	dateBefore          *string
	description         *[]string
	descriptionEmpty    *bool
	descriptionIc       *[]string
	descriptionIe       *[]string
	descriptionIew      *[]string
	descriptionIsw      *[]string
	descriptionN        *[]string
	descriptionNic      *[]string
	descriptionNie      *[]string
	descriptionNiew     *[]string
	descriptionNisw     *[]string
	id                  *[]int32
	idEmpty             *bool
	idGt                *[]int32
	idGte               *[]int32
	idLt                *[]int32
	idLte               *[]int32
	idN                 *[]int32
	lastUpdated         *[]time.Time
	lastUpdatedEmpty    *[]time.Time
	lastUpdatedGt       *[]time.Time
	lastUpdatedGte      *[]time.Time
	lastUpdatedLt       *[]time.Time
	lastUpdatedLte      *[]time.Time
	lastUpdatedN        *[]time.Time
	limit               *int32
	modifiedByRequest   *string
	name                *[]string
	nameEmpty           *bool
	nameIc              *[]string
	nameIe              *[]string
	nameIew             *[]string
	nameIsw             *[]string
	nameN               *[]string
	nameNic             *[]string
	nameNie             *[]string
	nameNiew            *[]string
	nameNisw            *[]string
	offset              *int32
	ordering            *string
	purchase            *int32
	purchaseN           *int32
	purchaseId          *[]int32
	purchaseIdN         *[]int32
	q                   *string
	receivingContact    *int32
	receivingContactN   *int32
	receivingContactId  *[]int32
	receivingContactIdN *[]int32
	supplierId          *[]int32
	supplierIdN         *[]int32
	tag                 *[]string
	tagN                *[]string
	updatedByRequest    *string
}

func (r ApiPluginsInventoryDeliveriesListRequest) Created(created []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryDeliveriesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DateAfter(dateAfter string) ApiPluginsInventoryDeliveriesListRequest {
	r.dateAfter = &dateAfter
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DateBefore(dateBefore string) ApiPluginsInventoryDeliveriesListRequest {
	r.dateBefore = &dateBefore
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) Description(description []string) ApiPluginsInventoryDeliveriesListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionIc(descriptionIc []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionIe(descriptionIe []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionIew(descriptionIew []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionN(descriptionN []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionNic(descriptionNic []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionNie(descriptionNie []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsInventoryDeliveriesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) Id(id []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryDeliveriesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) IdGt(idGt []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) IdGte(idGte []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) IdLt(idLt []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) IdLte(idLte []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) IdN(idN []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryDeliveriesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryDeliveriesListRequest) Limit(limit int32) ApiPluginsInventoryDeliveriesListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryDeliveriesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) Name(name []string) ApiPluginsInventoryDeliveriesListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventoryDeliveriesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameIc(nameIc []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameIe(nameIe []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameIew(nameIew []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameIsw(nameIsw []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameN(nameN []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameNic(nameNic []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameNie(nameNie []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameNiew(nameNiew []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) NameNisw(nameNisw []string) ApiPluginsInventoryDeliveriesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryDeliveriesListRequest) Offset(offset int32) ApiPluginsInventoryDeliveriesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryDeliveriesListRequest) Ordering(ordering string) ApiPluginsInventoryDeliveriesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) Purchase(purchase int32) ApiPluginsInventoryDeliveriesListRequest {
	r.purchase = &purchase
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) PurchaseN(purchaseN int32) ApiPluginsInventoryDeliveriesListRequest {
	r.purchaseN = &purchaseN
	return r
}

// Purchase (ID)
func (r ApiPluginsInventoryDeliveriesListRequest) PurchaseId(purchaseId []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.purchaseId = &purchaseId
	return r
}

// Purchase (ID)
func (r ApiPluginsInventoryDeliveriesListRequest) PurchaseIdN(purchaseIdN []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.purchaseIdN = &purchaseIdN
	return r
}

// Search
func (r ApiPluginsInventoryDeliveriesListRequest) Q(q string) ApiPluginsInventoryDeliveriesListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) ReceivingContact(receivingContact int32) ApiPluginsInventoryDeliveriesListRequest {
	r.receivingContact = &receivingContact
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) ReceivingContactN(receivingContactN int32) ApiPluginsInventoryDeliveriesListRequest {
	r.receivingContactN = &receivingContactN
	return r
}

// Contact (ID)
func (r ApiPluginsInventoryDeliveriesListRequest) ReceivingContactId(receivingContactId []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.receivingContactId = &receivingContactId
	return r
}

// Contact (ID)
func (r ApiPluginsInventoryDeliveriesListRequest) ReceivingContactIdN(receivingContactIdN []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.receivingContactIdN = &receivingContactIdN
	return r
}

// Supplier (ID)
func (r ApiPluginsInventoryDeliveriesListRequest) SupplierId(supplierId []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.supplierId = &supplierId
	return r
}

// Supplier (ID)
func (r ApiPluginsInventoryDeliveriesListRequest) SupplierIdN(supplierIdN []int32) ApiPluginsInventoryDeliveriesListRequest {
	r.supplierIdN = &supplierIdN
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) Tag(tag []string) ApiPluginsInventoryDeliveriesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) TagN(tagN []string) ApiPluginsInventoryDeliveriesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryDeliveriesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesListRequest) Execute() (*PaginatedDeliveryList, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesListExecute(r)
}

/*
PluginsInventoryDeliveriesList Method for PluginsInventoryDeliveriesList

Get a list of delivery objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryDeliveriesListRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesList(ctx context.Context) ApiPluginsInventoryDeliveriesListRequest {
	return ApiPluginsInventoryDeliveriesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeliveryList
func (a *PluginsAPIService) PluginsInventoryDeliveriesListExecute(r ApiPluginsInventoryDeliveriesListRequest) (*PaginatedDeliveryList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeliveryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.dateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_after", r.dateAfter, "")
	}
	if r.dateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_before", r.dateBefore, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.purchase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase", r.purchase, "")
	}
	if r.purchaseN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purchase__n", r.purchaseN, "")
	}
	if r.purchaseId != nil {
		t := *r.purchaseId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id", t, "multi")
		}
	}
	if r.purchaseIdN != nil {
		t := *r.purchaseIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "purchase_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.receivingContact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "receiving_contact", r.receivingContact, "")
	}
	if r.receivingContactN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "receiving_contact__n", r.receivingContactN, "")
	}
	if r.receivingContactId != nil {
		t := *r.receivingContactId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "receiving_contact_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "receiving_contact_id", t, "multi")
		}
	}
	if r.receivingContactIdN != nil {
		t := *r.receivingContactIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "receiving_contact_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "receiving_contact_id__n", t, "multi")
		}
	}
	if r.supplierId != nil {
		t := *r.supplierId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id", t, "multi")
		}
	}
	if r.supplierIdN != nil {
		t := *r.supplierIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *PluginsAPIService
	id                             int32
	patchedWritableDeliveryRequest *PatchedWritableDeliveryRequest
}

func (r ApiPluginsInventoryDeliveriesPartialUpdateRequest) PatchedWritableDeliveryRequest(patchedWritableDeliveryRequest PatchedWritableDeliveryRequest) ApiPluginsInventoryDeliveriesPartialUpdateRequest {
	r.patchedWritableDeliveryRequest = &patchedWritableDeliveryRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesPartialUpdateRequest) Execute() (*Delivery, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesPartialUpdateExecute(r)
}

/*
PluginsInventoryDeliveriesPartialUpdate Method for PluginsInventoryDeliveriesPartialUpdate

Patch a delivery object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this delivery.
	@return ApiPluginsInventoryDeliveriesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryDeliveriesPartialUpdateRequest {
	return ApiPluginsInventoryDeliveriesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Delivery
func (a *PluginsAPIService) PluginsInventoryDeliveriesPartialUpdateExecute(r ApiPluginsInventoryDeliveriesPartialUpdateRequest) (*Delivery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Delivery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeliveryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryDeliveriesRetrieveRequest) Execute() (*Delivery, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesRetrieveExecute(r)
}

/*
PluginsInventoryDeliveriesRetrieve Method for PluginsInventoryDeliveriesRetrieve

Get a delivery object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this delivery.
	@return ApiPluginsInventoryDeliveriesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesRetrieve(ctx context.Context, id int32) ApiPluginsInventoryDeliveriesRetrieveRequest {
	return ApiPluginsInventoryDeliveriesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Delivery
func (a *PluginsAPIService) PluginsInventoryDeliveriesRetrieveExecute(r ApiPluginsInventoryDeliveriesRetrieveRequest) (*Delivery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Delivery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryDeliveriesUpdateRequest struct {
	ctx                     context.Context
	ApiService              *PluginsAPIService
	id                      int32
	writableDeliveryRequest *WritableDeliveryRequest
}

func (r ApiPluginsInventoryDeliveriesUpdateRequest) WritableDeliveryRequest(writableDeliveryRequest WritableDeliveryRequest) ApiPluginsInventoryDeliveriesUpdateRequest {
	r.writableDeliveryRequest = &writableDeliveryRequest
	return r
}

func (r ApiPluginsInventoryDeliveriesUpdateRequest) Execute() (*Delivery, *http.Response, error) {
	return r.ApiService.PluginsInventoryDeliveriesUpdateExecute(r)
}

/*
PluginsInventoryDeliveriesUpdate Method for PluginsInventoryDeliveriesUpdate

Put a delivery object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this delivery.
	@return ApiPluginsInventoryDeliveriesUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryDeliveriesUpdate(ctx context.Context, id int32) ApiPluginsInventoryDeliveriesUpdateRequest {
	return ApiPluginsInventoryDeliveriesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Delivery
func (a *PluginsAPIService) PluginsInventoryDeliveriesUpdateExecute(r ApiPluginsInventoryDeliveriesUpdateRequest) (*Delivery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Delivery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryDeliveriesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/deliveries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeliveryRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeliveryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeliveryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	inventoryItemGroupRequest *[]InventoryItemGroupRequest
}

func (r ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest) InventoryItemGroupRequest(inventoryItemGroupRequest []InventoryItemGroupRequest) ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest {
	r.inventoryItemGroupRequest = &inventoryItemGroupRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsBulkDestroyExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsBulkDestroy Method for PluginsInventoryInventoryItemGroupsBulkDestroy

Delete a list of inventory item group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsBulkDestroy(ctx context.Context) ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest {
	return ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsBulkDestroyExecute(r ApiPluginsInventoryInventoryItemGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemGroupRequest == nil {
		return nil, reportError("inventoryItemGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	inventoryItemGroupRequest *[]InventoryItemGroupRequest
}

func (r ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest) InventoryItemGroupRequest(inventoryItemGroupRequest []InventoryItemGroupRequest) ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest {
	r.inventoryItemGroupRequest = &inventoryItemGroupRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest) Execute() ([]InventoryItemGroup, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsBulkPartialUpdate Method for PluginsInventoryInventoryItemGroupsBulkPartialUpdate

Patch a list of inventory item group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest {
	return ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemGroup
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsBulkPartialUpdateExecute(r ApiPluginsInventoryInventoryItemGroupsBulkPartialUpdateRequest) ([]InventoryItemGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemGroupRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest struct {
	ctx                       context.Context
	ApiService                *PluginsAPIService
	inventoryItemGroupRequest *[]InventoryItemGroupRequest
}

func (r ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest) InventoryItemGroupRequest(inventoryItemGroupRequest []InventoryItemGroupRequest) ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest {
	r.inventoryItemGroupRequest = &inventoryItemGroupRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest) Execute() ([]InventoryItemGroup, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsBulkUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsBulkUpdate Method for PluginsInventoryInventoryItemGroupsBulkUpdate

Put a list of inventory item group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsBulkUpdate(ctx context.Context) ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest {
	return ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemGroup
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsBulkUpdateExecute(r ApiPluginsInventoryInventoryItemGroupsBulkUpdateRequest) ([]InventoryItemGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemGroupRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsCreateRequest struct {
	ctx                               context.Context
	ApiService                        *PluginsAPIService
	writableInventoryItemGroupRequest *WritableInventoryItemGroupRequest
}

func (r ApiPluginsInventoryInventoryItemGroupsCreateRequest) WritableInventoryItemGroupRequest(writableInventoryItemGroupRequest WritableInventoryItemGroupRequest) ApiPluginsInventoryInventoryItemGroupsCreateRequest {
	r.writableInventoryItemGroupRequest = &writableInventoryItemGroupRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsCreateRequest) Execute() (*InventoryItemGroup, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsCreateExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsCreate Method for PluginsInventoryInventoryItemGroupsCreate

Post a list of inventory item group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemGroupsCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsCreate(ctx context.Context) ApiPluginsInventoryInventoryItemGroupsCreateRequest {
	return ApiPluginsInventoryInventoryItemGroupsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InventoryItemGroup
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsCreateExecute(r ApiPluginsInventoryInventoryItemGroupsCreateRequest) (*InventoryItemGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItemGroupRequest == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItemGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItemGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryInventoryItemGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsDestroyExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsDestroy Method for PluginsInventoryInventoryItemGroupsDestroy

Delete a inventory item group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item group.
	@return ApiPluginsInventoryInventoryItemGroupsDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsDestroy(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemGroupsDestroyRequest {
	return ApiPluginsInventoryInventoryItemGroupsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsDestroyExecute(r ApiPluginsInventoryInventoryItemGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parentId          *[]*int32
	parentIdN         *[]*int32
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Created(created []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Id(id []int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) IdGt(idGt []int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) IdGte(idGte []int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) IdLt(idLt []int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) IdLte(idLte []int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) IdN(idN []int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Limit(limit int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Name(name []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameIc(nameIc []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameIe(nameIe []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameIew(nameIew []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameIsw(nameIsw []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameN(nameN []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameNic(nameNic []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameNie(nameNie []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameNiew(nameNiew []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) NameNisw(nameNisw []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Offset(offset int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Ordering(ordering string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.ordering = &ordering
	return r
}

// Parent group (ID)
func (r ApiPluginsInventoryInventoryItemGroupsListRequest) ParentId(parentId []*int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.parentId = &parentId
	return r
}

// Parent group (ID)
func (r ApiPluginsInventoryInventoryItemGroupsListRequest) ParentIdN(parentIdN []*int32) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Q(q string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Tag(tag []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) TagN(tagN []string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryInventoryItemGroupsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsListRequest) Execute() (*PaginatedInventoryItemGroupList, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsListExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsList Method for PluginsInventoryInventoryItemGroupsList

Get a list of inventory item group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemGroupsListRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsList(ctx context.Context) ApiPluginsInventoryInventoryItemGroupsListRequest {
	return ApiPluginsInventoryInventoryItemGroupsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInventoryItemGroupList
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsListExecute(r ApiPluginsInventoryInventoryItemGroupsListRequest) (*PaginatedInventoryItemGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInventoryItemGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest struct {
	ctx                                      context.Context
	ApiService                               *PluginsAPIService
	id                                       int32
	patchedWritableInventoryItemGroupRequest *PatchedWritableInventoryItemGroupRequest
}

func (r ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest) PatchedWritableInventoryItemGroupRequest(patchedWritableInventoryItemGroupRequest PatchedWritableInventoryItemGroupRequest) ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest {
	r.patchedWritableInventoryItemGroupRequest = &patchedWritableInventoryItemGroupRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest) Execute() (*InventoryItemGroup, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsPartialUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsPartialUpdate Method for PluginsInventoryInventoryItemGroupsPartialUpdate

Patch a inventory item group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item group.
	@return ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest {
	return ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemGroup
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsPartialUpdateExecute(r ApiPluginsInventoryInventoryItemGroupsPartialUpdateRequest) (*InventoryItemGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInventoryItemGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryInventoryItemGroupsRetrieveRequest) Execute() (*InventoryItemGroup, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsRetrieveExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsRetrieve Method for PluginsInventoryInventoryItemGroupsRetrieve

Get a inventory item group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item group.
	@return ApiPluginsInventoryInventoryItemGroupsRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsRetrieve(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemGroupsRetrieveRequest {
	return ApiPluginsInventoryInventoryItemGroupsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemGroup
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsRetrieveExecute(r ApiPluginsInventoryInventoryItemGroupsRetrieveRequest) (*InventoryItemGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemGroupsUpdateRequest struct {
	ctx                               context.Context
	ApiService                        *PluginsAPIService
	id                                int32
	writableInventoryItemGroupRequest *WritableInventoryItemGroupRequest
}

func (r ApiPluginsInventoryInventoryItemGroupsUpdateRequest) WritableInventoryItemGroupRequest(writableInventoryItemGroupRequest WritableInventoryItemGroupRequest) ApiPluginsInventoryInventoryItemGroupsUpdateRequest {
	r.writableInventoryItemGroupRequest = &writableInventoryItemGroupRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemGroupsUpdateRequest) Execute() (*InventoryItemGroup, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemGroupsUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemGroupsUpdate Method for PluginsInventoryInventoryItemGroupsUpdate

Put a inventory item group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item group.
	@return ApiPluginsInventoryInventoryItemGroupsUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsUpdate(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemGroupsUpdateRequest {
	return ApiPluginsInventoryInventoryItemGroupsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemGroup
func (a *PluginsAPIService) PluginsInventoryInventoryItemGroupsUpdateExecute(r ApiPluginsInventoryInventoryItemGroupsUpdateRequest) (*InventoryItemGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItemGroupRequest == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItemGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItemGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	inventoryItemTypeRequest *[]InventoryItemTypeRequest
}

func (r ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest) InventoryItemTypeRequest(inventoryItemTypeRequest []InventoryItemTypeRequest) ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest {
	r.inventoryItemTypeRequest = &inventoryItemTypeRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesBulkDestroyExecute(r)
}

/*
PluginsInventoryInventoryItemTypesBulkDestroy Method for PluginsInventoryInventoryItemTypesBulkDestroy

Delete a list of inventory item type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesBulkDestroy(ctx context.Context) ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest {
	return ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesBulkDestroyExecute(r ApiPluginsInventoryInventoryItemTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTypeRequest == nil {
		return nil, reportError("inventoryItemTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	inventoryItemTypeRequest *[]InventoryItemTypeRequest
}

func (r ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest) InventoryItemTypeRequest(inventoryItemTypeRequest []InventoryItemTypeRequest) ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest {
	r.inventoryItemTypeRequest = &inventoryItemTypeRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest) Execute() ([]InventoryItemType, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemTypesBulkPartialUpdate Method for PluginsInventoryInventoryItemTypesBulkPartialUpdate

Patch a list of inventory item type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest {
	return ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemType
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesBulkPartialUpdateExecute(r ApiPluginsInventoryInventoryItemTypesBulkPartialUpdateRequest) ([]InventoryItemType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTypeRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	inventoryItemTypeRequest *[]InventoryItemTypeRequest
}

func (r ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest) InventoryItemTypeRequest(inventoryItemTypeRequest []InventoryItemTypeRequest) ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest {
	r.inventoryItemTypeRequest = &inventoryItemTypeRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest) Execute() ([]InventoryItemType, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesBulkUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemTypesBulkUpdate Method for PluginsInventoryInventoryItemTypesBulkUpdate

Put a list of inventory item type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesBulkUpdate(ctx context.Context) ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest {
	return ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemType
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesBulkUpdateExecute(r ApiPluginsInventoryInventoryItemTypesBulkUpdateRequest) ([]InventoryItemType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTypeRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesCreateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	writableInventoryItemTypeRequest *WritableInventoryItemTypeRequest
}

func (r ApiPluginsInventoryInventoryItemTypesCreateRequest) WritableInventoryItemTypeRequest(writableInventoryItemTypeRequest WritableInventoryItemTypeRequest) ApiPluginsInventoryInventoryItemTypesCreateRequest {
	r.writableInventoryItemTypeRequest = &writableInventoryItemTypeRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesCreateRequest) Execute() (*InventoryItemType, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesCreateExecute(r)
}

/*
PluginsInventoryInventoryItemTypesCreate Method for PluginsInventoryInventoryItemTypesCreate

Post a list of inventory item type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemTypesCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesCreate(ctx context.Context) ApiPluginsInventoryInventoryItemTypesCreateRequest {
	return ApiPluginsInventoryInventoryItemTypesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InventoryItemType
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesCreateExecute(r ApiPluginsInventoryInventoryItemTypesCreateRequest) (*InventoryItemType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItemTypeRequest == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItemTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItemTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryInventoryItemTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesDestroyExecute(r)
}

/*
PluginsInventoryInventoryItemTypesDestroy Method for PluginsInventoryInventoryItemTypesDestroy

Delete a inventory item type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item type.
	@return ApiPluginsInventoryInventoryItemTypesDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesDestroy(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemTypesDestroyRequest {
	return ApiPluginsInventoryInventoryItemTypesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesDestroyExecute(r ApiPluginsInventoryInventoryItemTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesListRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	created               *[]time.Time
	createdEmpty          *[]time.Time
	createdGt             *[]time.Time
	createdGte            *[]time.Time
	createdLt             *[]time.Time
	createdLte            *[]time.Time
	createdN              *[]time.Time
	createdByRequest      *string
	id                    *[]int32
	idEmpty               *bool
	idGt                  *[]int32
	idGte                 *[]int32
	idLt                  *[]int32
	idLte                 *[]int32
	idN                   *[]int32
	inventoryitemGroupId  *[]int32
	inventoryitemGroupIdN *[]int32
	lastUpdated           *[]time.Time
	lastUpdatedEmpty      *[]time.Time
	lastUpdatedGt         *[]time.Time
	lastUpdatedGte        *[]time.Time
	lastUpdatedLt         *[]time.Time
	lastUpdatedLte        *[]time.Time
	lastUpdatedN          *[]time.Time
	limit                 *int32
	manufacturer          *[]string
	manufacturerN         *[]string
	manufacturerId        *[]int32
	manufacturerIdN       *[]int32
	model                 *[]string
	modelEmpty            *bool
	modelIc               *[]string
	modelIe               *[]string
	modelIew              *[]string
	modelIsw              *[]string
	modelN                *[]string
	modelNic              *[]string
	modelNie              *[]string
	modelNiew             *[]string
	modelNisw             *[]string
	modifiedByRequest     *string
	offset                *int32
	ordering              *string
	partNumber            *[]string
	partNumberEmpty       *bool
	partNumberIc          *[]string
	partNumberIe          *[]string
	partNumberIew         *[]string
	partNumberIsw         *[]string
	partNumberN           *[]string
	partNumberNic         *[]string
	partNumberNie         *[]string
	partNumberNiew        *[]string
	partNumberNisw        *[]string
	q                     *string
	slug                  *[]string
	slugEmpty             *bool
	slugIc                *[]string
	slugIe                *[]string
	slugIew               *[]string
	slugIsw               *[]string
	slugN                 *[]string
	slugNic               *[]string
	slugNie               *[]string
	slugNiew              *[]string
	slugNisw              *[]string
	tag                   *[]string
	tagN                  *[]string
	updatedByRequest      *string
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) Created(created []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) Id(id []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) IdGt(idGt []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) IdGte(idGte []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) IdLt(idLt []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) IdLte(idLte []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) IdN(idN []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.idN = &idN
	return r
}

// Inventory item group (ID)
func (r ApiPluginsInventoryInventoryItemTypesListRequest) InventoryitemGroupId(inventoryitemGroupId []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.inventoryitemGroupId = &inventoryitemGroupId
	return r
}

// Inventory item group (ID)
func (r ApiPluginsInventoryInventoryItemTypesListRequest) InventoryitemGroupIdN(inventoryitemGroupIdN []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.inventoryitemGroupIdN = &inventoryitemGroupIdN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryInventoryItemTypesListRequest) Limit(limit int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryInventoryItemTypesListRequest) Manufacturer(manufacturer []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiPluginsInventoryInventoryItemTypesListRequest) ManufacturerN(manufacturerN []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryInventoryItemTypesListRequest) ManufacturerId(manufacturerId []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiPluginsInventoryInventoryItemTypesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) Model(model []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.model = &model
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelEmpty(modelEmpty bool) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelEmpty = &modelEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelIc(modelIc []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelIc = &modelIc
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelIe(modelIe []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelIe = &modelIe
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelIew(modelIew []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelIew = &modelIew
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelIsw(modelIsw []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelIsw = &modelIsw
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelN(modelN []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelNic(modelNic []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelNic = &modelNic
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelNie(modelNie []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelNie = &modelNie
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelNiew(modelNiew []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelNiew = &modelNiew
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModelNisw(modelNisw []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modelNisw = &modelNisw
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryInventoryItemTypesListRequest) Offset(offset int32) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryInventoryItemTypesListRequest) Ordering(ordering string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumber(partNumber []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumber = &partNumber
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberEmpty(partNumberEmpty bool) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberEmpty = &partNumberEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberIc(partNumberIc []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberIc = &partNumberIc
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberIe(partNumberIe []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberIe = &partNumberIe
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberIew(partNumberIew []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberIew = &partNumberIew
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberIsw(partNumberIsw []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberIsw = &partNumberIsw
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberN(partNumberN []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberN = &partNumberN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberNic(partNumberNic []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberNic = &partNumberNic
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberNie(partNumberNie []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberNie = &partNumberNie
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberNiew(partNumberNiew []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberNiew = &partNumberNiew
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) PartNumberNisw(partNumberNisw []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.partNumberNisw = &partNumberNisw
	return r
}

// Search
func (r ApiPluginsInventoryInventoryItemTypesListRequest) Q(q string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) Slug(slug []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slug = &slug
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugEmpty(slugEmpty bool) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugIc(slugIc []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugIe(slugIe []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugIew(slugIew []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugIsw(slugIsw []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugN(slugN []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugNic(slugNic []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugNie(slugNie []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugNiew(slugNiew []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) SlugNisw(slugNisw []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) Tag(tag []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) TagN(tagN []string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryInventoryItemTypesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesListRequest) Execute() (*PaginatedInventoryItemTypeList, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesListExecute(r)
}

/*
PluginsInventoryInventoryItemTypesList Method for PluginsInventoryInventoryItemTypesList

Get a list of inventory item type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryInventoryItemTypesListRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesList(ctx context.Context) ApiPluginsInventoryInventoryItemTypesListRequest {
	return ApiPluginsInventoryInventoryItemTypesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInventoryItemTypeList
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesListExecute(r ApiPluginsInventoryInventoryItemTypesListRequest) (*PaginatedInventoryItemTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInventoryItemTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.inventoryitemGroupId != nil {
		t := *r.inventoryitemGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id", t, "multi")
		}
	}
	if r.inventoryitemGroupIdN != nil {
		t := *r.inventoryitemGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryitem_group_id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model", t, "multi")
		}
	}
	if r.modelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model__empty", r.modelEmpty, "")
	}
	if r.modelIc != nil {
		t := *r.modelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", t, "multi")
		}
	}
	if r.modelIe != nil {
		t := *r.modelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", t, "multi")
		}
	}
	if r.modelIew != nil {
		t := *r.modelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", t, "multi")
		}
	}
	if r.modelIsw != nil {
		t := *r.modelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", t, "multi")
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", t, "multi")
		}
	}
	if r.modelNic != nil {
		t := *r.modelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", t, "multi")
		}
	}
	if r.modelNie != nil {
		t := *r.modelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", t, "multi")
		}
	}
	if r.modelNiew != nil {
		t := *r.modelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", t, "multi")
		}
	}
	if r.modelNisw != nil {
		t := *r.modelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.partNumber != nil {
		t := *r.partNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number", t, "multi")
		}
	}
	if r.partNumberEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__empty", r.partNumberEmpty, "")
	}
	if r.partNumberIc != nil {
		t := *r.partNumberIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ic", t, "multi")
		}
	}
	if r.partNumberIe != nil {
		t := *r.partNumberIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ie", t, "multi")
		}
	}
	if r.partNumberIew != nil {
		t := *r.partNumberIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__iew", t, "multi")
		}
	}
	if r.partNumberIsw != nil {
		t := *r.partNumberIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__isw", t, "multi")
		}
	}
	if r.partNumberN != nil {
		t := *r.partNumberN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__n", t, "multi")
		}
	}
	if r.partNumberNic != nil {
		t := *r.partNumberNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nic", t, "multi")
		}
	}
	if r.partNumberNie != nil {
		t := *r.partNumberNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nie", t, "multi")
		}
	}
	if r.partNumberNiew != nil {
		t := *r.partNumberNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__niew", t, "multi")
		}
	}
	if r.partNumberNisw != nil {
		t := *r.partNumberNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *PluginsAPIService
	id                                      int32
	patchedWritableInventoryItemTypeRequest *PatchedWritableInventoryItemTypeRequest
}

func (r ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest) PatchedWritableInventoryItemTypeRequest(patchedWritableInventoryItemTypeRequest PatchedWritableInventoryItemTypeRequest) ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest {
	r.patchedWritableInventoryItemTypeRequest = &patchedWritableInventoryItemTypeRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest) Execute() (*InventoryItemType, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesPartialUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemTypesPartialUpdate Method for PluginsInventoryInventoryItemTypesPartialUpdate

Patch a inventory item type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item type.
	@return ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest {
	return ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemType
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesPartialUpdateExecute(r ApiPluginsInventoryInventoryItemTypesPartialUpdateRequest) (*InventoryItemType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInventoryItemTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryInventoryItemTypesRetrieveRequest) Execute() (*InventoryItemType, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesRetrieveExecute(r)
}

/*
PluginsInventoryInventoryItemTypesRetrieve Method for PluginsInventoryInventoryItemTypesRetrieve

Get a inventory item type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item type.
	@return ApiPluginsInventoryInventoryItemTypesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesRetrieve(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemTypesRetrieveRequest {
	return ApiPluginsInventoryInventoryItemTypesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemType
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesRetrieveExecute(r ApiPluginsInventoryInventoryItemTypesRetrieveRequest) (*InventoryItemType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryInventoryItemTypesUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *PluginsAPIService
	id                               int32
	writableInventoryItemTypeRequest *WritableInventoryItemTypeRequest
}

func (r ApiPluginsInventoryInventoryItemTypesUpdateRequest) WritableInventoryItemTypeRequest(writableInventoryItemTypeRequest WritableInventoryItemTypeRequest) ApiPluginsInventoryInventoryItemTypesUpdateRequest {
	r.writableInventoryItemTypeRequest = &writableInventoryItemTypeRequest
	return r
}

func (r ApiPluginsInventoryInventoryItemTypesUpdateRequest) Execute() (*InventoryItemType, *http.Response, error) {
	return r.ApiService.PluginsInventoryInventoryItemTypesUpdateExecute(r)
}

/*
PluginsInventoryInventoryItemTypesUpdate Method for PluginsInventoryInventoryItemTypesUpdate

Put a inventory item type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item type.
	@return ApiPluginsInventoryInventoryItemTypesUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesUpdate(ctx context.Context, id int32) ApiPluginsInventoryInventoryItemTypesUpdateRequest {
	return ApiPluginsInventoryInventoryItemTypesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemType
func (a *PluginsAPIService) PluginsInventoryInventoryItemTypesUpdateExecute(r ApiPluginsInventoryInventoryItemTypesUpdateRequest) (*InventoryItemType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryInventoryItemTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/inventory-item-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItemTypeRequest == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItemTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItemTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	purchaseRequest *[]PurchaseRequest
}

func (r ApiPluginsInventoryPurchasesBulkDestroyRequest) PurchaseRequest(purchaseRequest []PurchaseRequest) ApiPluginsInventoryPurchasesBulkDestroyRequest {
	r.purchaseRequest = &purchaseRequest
	return r
}

func (r ApiPluginsInventoryPurchasesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesBulkDestroyExecute(r)
}

/*
PluginsInventoryPurchasesBulkDestroy Method for PluginsInventoryPurchasesBulkDestroy

Delete a list of purchase objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryPurchasesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesBulkDestroy(ctx context.Context) ApiPluginsInventoryPurchasesBulkDestroyRequest {
	return ApiPluginsInventoryPurchasesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryPurchasesBulkDestroyExecute(r ApiPluginsInventoryPurchasesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.purchaseRequest == nil {
		return nil, reportError("purchaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.purchaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	purchaseRequest *[]PurchaseRequest
}

func (r ApiPluginsInventoryPurchasesBulkPartialUpdateRequest) PurchaseRequest(purchaseRequest []PurchaseRequest) ApiPluginsInventoryPurchasesBulkPartialUpdateRequest {
	r.purchaseRequest = &purchaseRequest
	return r
}

func (r ApiPluginsInventoryPurchasesBulkPartialUpdateRequest) Execute() ([]Purchase, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesBulkPartialUpdateExecute(r)
}

/*
PluginsInventoryPurchasesBulkPartialUpdate Method for PluginsInventoryPurchasesBulkPartialUpdate

Patch a list of purchase objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryPurchasesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesBulkPartialUpdate(ctx context.Context) ApiPluginsInventoryPurchasesBulkPartialUpdateRequest {
	return ApiPluginsInventoryPurchasesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Purchase
func (a *PluginsAPIService) PluginsInventoryPurchasesBulkPartialUpdateExecute(r ApiPluginsInventoryPurchasesBulkPartialUpdateRequest) ([]Purchase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Purchase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.purchaseRequest == nil {
		return localVarReturnValue, nil, reportError("purchaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.purchaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	purchaseRequest *[]PurchaseRequest
}

func (r ApiPluginsInventoryPurchasesBulkUpdateRequest) PurchaseRequest(purchaseRequest []PurchaseRequest) ApiPluginsInventoryPurchasesBulkUpdateRequest {
	r.purchaseRequest = &purchaseRequest
	return r
}

func (r ApiPluginsInventoryPurchasesBulkUpdateRequest) Execute() ([]Purchase, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesBulkUpdateExecute(r)
}

/*
PluginsInventoryPurchasesBulkUpdate Method for PluginsInventoryPurchasesBulkUpdate

Put a list of purchase objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryPurchasesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesBulkUpdate(ctx context.Context) ApiPluginsInventoryPurchasesBulkUpdateRequest {
	return ApiPluginsInventoryPurchasesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Purchase
func (a *PluginsAPIService) PluginsInventoryPurchasesBulkUpdateExecute(r ApiPluginsInventoryPurchasesBulkUpdateRequest) ([]Purchase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Purchase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.purchaseRequest == nil {
		return localVarReturnValue, nil, reportError("purchaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.purchaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesCreateRequest struct {
	ctx                     context.Context
	ApiService              *PluginsAPIService
	writablePurchaseRequest *WritablePurchaseRequest
}

func (r ApiPluginsInventoryPurchasesCreateRequest) WritablePurchaseRequest(writablePurchaseRequest WritablePurchaseRequest) ApiPluginsInventoryPurchasesCreateRequest {
	r.writablePurchaseRequest = &writablePurchaseRequest
	return r
}

func (r ApiPluginsInventoryPurchasesCreateRequest) Execute() (*Purchase, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesCreateExecute(r)
}

/*
PluginsInventoryPurchasesCreate Method for PluginsInventoryPurchasesCreate

Post a list of purchase objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryPurchasesCreateRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesCreate(ctx context.Context) ApiPluginsInventoryPurchasesCreateRequest {
	return ApiPluginsInventoryPurchasesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Purchase
func (a *PluginsAPIService) PluginsInventoryPurchasesCreateExecute(r ApiPluginsInventoryPurchasesCreateRequest) (*Purchase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Purchase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePurchaseRequest == nil {
		return localVarReturnValue, nil, reportError("writablePurchaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePurchaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryPurchasesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesDestroyExecute(r)
}

/*
PluginsInventoryPurchasesDestroy Method for PluginsInventoryPurchasesDestroy

Delete a purchase object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this purchase.
	@return ApiPluginsInventoryPurchasesDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesDestroy(ctx context.Context, id int32) ApiPluginsInventoryPurchasesDestroyRequest {
	return ApiPluginsInventoryPurchasesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventoryPurchasesDestroyExecute(r ApiPluginsInventoryPurchasesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	dateAfter         *string
	dateBefore        *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	status            *[]string
	statusN           *[]string
	supplier          *int32
	supplierN         *int32
	supplierId        *[]int32
	supplierIdN       *[]int32
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsInventoryPurchasesListRequest) Created(created []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedN(createdN []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventoryPurchasesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DateAfter(dateAfter string) ApiPluginsInventoryPurchasesListRequest {
	r.dateAfter = &dateAfter
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DateBefore(dateBefore string) ApiPluginsInventoryPurchasesListRequest {
	r.dateBefore = &dateBefore
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) Description(description []string) ApiPluginsInventoryPurchasesListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionIc(descriptionIc []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionIe(descriptionIe []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionIew(descriptionIew []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionN(descriptionN []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionNic(descriptionNic []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionNie(descriptionNie []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsInventoryPurchasesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) Id(id []int32) ApiPluginsInventoryPurchasesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) IdEmpty(idEmpty bool) ApiPluginsInventoryPurchasesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) IdGt(idGt []int32) ApiPluginsInventoryPurchasesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) IdGte(idGte []int32) ApiPluginsInventoryPurchasesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) IdLt(idLt []int32) ApiPluginsInventoryPurchasesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) IdLte(idLte []int32) ApiPluginsInventoryPurchasesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) IdN(idN []int32) ApiPluginsInventoryPurchasesListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventoryPurchasesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventoryPurchasesListRequest) Limit(limit int32) ApiPluginsInventoryPurchasesListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventoryPurchasesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) Name(name []string) ApiPluginsInventoryPurchasesListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventoryPurchasesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameIc(nameIc []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameIe(nameIe []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameIew(nameIew []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameIsw(nameIsw []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameN(nameN []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameNic(nameNic []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameNie(nameNie []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameNiew(nameNiew []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) NameNisw(nameNisw []string) ApiPluginsInventoryPurchasesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventoryPurchasesListRequest) Offset(offset int32) ApiPluginsInventoryPurchasesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventoryPurchasesListRequest) Ordering(ordering string) ApiPluginsInventoryPurchasesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsInventoryPurchasesListRequest) Q(q string) ApiPluginsInventoryPurchasesListRequest {
	r.q = &q
	return r
}

// Status of purchase
func (r ApiPluginsInventoryPurchasesListRequest) Status(status []string) ApiPluginsInventoryPurchasesListRequest {
	r.status = &status
	return r
}

// Status of purchase
func (r ApiPluginsInventoryPurchasesListRequest) StatusN(statusN []string) ApiPluginsInventoryPurchasesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) Supplier(supplier int32) ApiPluginsInventoryPurchasesListRequest {
	r.supplier = &supplier
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) SupplierN(supplierN int32) ApiPluginsInventoryPurchasesListRequest {
	r.supplierN = &supplierN
	return r
}

// Supplier (ID)
func (r ApiPluginsInventoryPurchasesListRequest) SupplierId(supplierId []int32) ApiPluginsInventoryPurchasesListRequest {
	r.supplierId = &supplierId
	return r
}

// Supplier (ID)
func (r ApiPluginsInventoryPurchasesListRequest) SupplierIdN(supplierIdN []int32) ApiPluginsInventoryPurchasesListRequest {
	r.supplierIdN = &supplierIdN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) Tag(tag []string) ApiPluginsInventoryPurchasesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) TagN(tagN []string) ApiPluginsInventoryPurchasesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventoryPurchasesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventoryPurchasesListRequest) Execute() (*PaginatedPurchaseList, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesListExecute(r)
}

/*
PluginsInventoryPurchasesList Method for PluginsInventoryPurchasesList

Get a list of purchase objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventoryPurchasesListRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesList(ctx context.Context) ApiPluginsInventoryPurchasesListRequest {
	return ApiPluginsInventoryPurchasesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPurchaseList
func (a *PluginsAPIService) PluginsInventoryPurchasesListExecute(r ApiPluginsInventoryPurchasesListRequest) (*PaginatedPurchaseList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPurchaseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.dateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_after", r.dateAfter, "")
	}
	if r.dateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_before", r.dateBefore, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.supplier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier", r.supplier, "")
	}
	if r.supplierN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supplier__n", r.supplierN, "")
	}
	if r.supplierId != nil {
		t := *r.supplierId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id", t, "multi")
		}
	}
	if r.supplierIdN != nil {
		t := *r.supplierIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "supplier_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *PluginsAPIService
	id                             int32
	patchedWritablePurchaseRequest *PatchedWritablePurchaseRequest
}

func (r ApiPluginsInventoryPurchasesPartialUpdateRequest) PatchedWritablePurchaseRequest(patchedWritablePurchaseRequest PatchedWritablePurchaseRequest) ApiPluginsInventoryPurchasesPartialUpdateRequest {
	r.patchedWritablePurchaseRequest = &patchedWritablePurchaseRequest
	return r
}

func (r ApiPluginsInventoryPurchasesPartialUpdateRequest) Execute() (*Purchase, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesPartialUpdateExecute(r)
}

/*
PluginsInventoryPurchasesPartialUpdate Method for PluginsInventoryPurchasesPartialUpdate

Patch a purchase object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this purchase.
	@return ApiPluginsInventoryPurchasesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesPartialUpdate(ctx context.Context, id int32) ApiPluginsInventoryPurchasesPartialUpdateRequest {
	return ApiPluginsInventoryPurchasesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Purchase
func (a *PluginsAPIService) PluginsInventoryPurchasesPartialUpdateExecute(r ApiPluginsInventoryPurchasesPartialUpdateRequest) (*Purchase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Purchase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePurchaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventoryPurchasesRetrieveRequest) Execute() (*Purchase, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesRetrieveExecute(r)
}

/*
PluginsInventoryPurchasesRetrieve Method for PluginsInventoryPurchasesRetrieve

Get a purchase object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this purchase.
	@return ApiPluginsInventoryPurchasesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesRetrieve(ctx context.Context, id int32) ApiPluginsInventoryPurchasesRetrieveRequest {
	return ApiPluginsInventoryPurchasesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Purchase
func (a *PluginsAPIService) PluginsInventoryPurchasesRetrieveExecute(r ApiPluginsInventoryPurchasesRetrieveRequest) (*Purchase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Purchase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventoryPurchasesUpdateRequest struct {
	ctx                     context.Context
	ApiService              *PluginsAPIService
	id                      int32
	writablePurchaseRequest *WritablePurchaseRequest
}

func (r ApiPluginsInventoryPurchasesUpdateRequest) WritablePurchaseRequest(writablePurchaseRequest WritablePurchaseRequest) ApiPluginsInventoryPurchasesUpdateRequest {
	r.writablePurchaseRequest = &writablePurchaseRequest
	return r
}

func (r ApiPluginsInventoryPurchasesUpdateRequest) Execute() (*Purchase, *http.Response, error) {
	return r.ApiService.PluginsInventoryPurchasesUpdateExecute(r)
}

/*
PluginsInventoryPurchasesUpdate Method for PluginsInventoryPurchasesUpdate

Put a purchase object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this purchase.
	@return ApiPluginsInventoryPurchasesUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventoryPurchasesUpdate(ctx context.Context, id int32) ApiPluginsInventoryPurchasesUpdateRequest {
	return ApiPluginsInventoryPurchasesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Purchase
func (a *PluginsAPIService) PluginsInventoryPurchasesUpdateExecute(r ApiPluginsInventoryPurchasesUpdateRequest) (*Purchase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Purchase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventoryPurchasesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/purchases/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePurchaseRequest == nil {
		return localVarReturnValue, nil, reportError("writablePurchaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePurchaseRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	supplierRequest *[]SupplierRequest
}

func (r ApiPluginsInventorySuppliersBulkDestroyRequest) SupplierRequest(supplierRequest []SupplierRequest) ApiPluginsInventorySuppliersBulkDestroyRequest {
	r.supplierRequest = &supplierRequest
	return r
}

func (r ApiPluginsInventorySuppliersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersBulkDestroyExecute(r)
}

/*
PluginsInventorySuppliersBulkDestroy Method for PluginsInventorySuppliersBulkDestroy

Delete a list of supplier objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventorySuppliersBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersBulkDestroy(ctx context.Context) ApiPluginsInventorySuppliersBulkDestroyRequest {
	return ApiPluginsInventorySuppliersBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventorySuppliersBulkDestroyExecute(r ApiPluginsInventorySuppliersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supplierRequest == nil {
		return nil, reportError("supplierRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supplierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	supplierRequest *[]SupplierRequest
}

func (r ApiPluginsInventorySuppliersBulkPartialUpdateRequest) SupplierRequest(supplierRequest []SupplierRequest) ApiPluginsInventorySuppliersBulkPartialUpdateRequest {
	r.supplierRequest = &supplierRequest
	return r
}

func (r ApiPluginsInventorySuppliersBulkPartialUpdateRequest) Execute() ([]Supplier, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersBulkPartialUpdateExecute(r)
}

/*
PluginsInventorySuppliersBulkPartialUpdate Method for PluginsInventorySuppliersBulkPartialUpdate

Patch a list of supplier objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventorySuppliersBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersBulkPartialUpdate(ctx context.Context) ApiPluginsInventorySuppliersBulkPartialUpdateRequest {
	return ApiPluginsInventorySuppliersBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Supplier
func (a *PluginsAPIService) PluginsInventorySuppliersBulkPartialUpdateExecute(r ApiPluginsInventorySuppliersBulkPartialUpdateRequest) ([]Supplier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Supplier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supplierRequest == nil {
		return localVarReturnValue, nil, reportError("supplierRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supplierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	supplierRequest *[]SupplierRequest
}

func (r ApiPluginsInventorySuppliersBulkUpdateRequest) SupplierRequest(supplierRequest []SupplierRequest) ApiPluginsInventorySuppliersBulkUpdateRequest {
	r.supplierRequest = &supplierRequest
	return r
}

func (r ApiPluginsInventorySuppliersBulkUpdateRequest) Execute() ([]Supplier, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersBulkUpdateExecute(r)
}

/*
PluginsInventorySuppliersBulkUpdate Method for PluginsInventorySuppliersBulkUpdate

Put a list of supplier objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventorySuppliersBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersBulkUpdate(ctx context.Context) ApiPluginsInventorySuppliersBulkUpdateRequest {
	return ApiPluginsInventorySuppliersBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Supplier
func (a *PluginsAPIService) PluginsInventorySuppliersBulkUpdateExecute(r ApiPluginsInventorySuppliersBulkUpdateRequest) ([]Supplier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Supplier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supplierRequest == nil {
		return localVarReturnValue, nil, reportError("supplierRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supplierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersCreateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	supplierRequest *SupplierRequest
}

func (r ApiPluginsInventorySuppliersCreateRequest) SupplierRequest(supplierRequest SupplierRequest) ApiPluginsInventorySuppliersCreateRequest {
	r.supplierRequest = &supplierRequest
	return r
}

func (r ApiPluginsInventorySuppliersCreateRequest) Execute() (*Supplier, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersCreateExecute(r)
}

/*
PluginsInventorySuppliersCreate Method for PluginsInventorySuppliersCreate

Post a list of supplier objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventorySuppliersCreateRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersCreate(ctx context.Context) ApiPluginsInventorySuppliersCreateRequest {
	return ApiPluginsInventorySuppliersCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Supplier
func (a *PluginsAPIService) PluginsInventorySuppliersCreateExecute(r ApiPluginsInventorySuppliersCreateRequest) (*Supplier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Supplier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supplierRequest == nil {
		return localVarReturnValue, nil, reportError("supplierRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supplierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventorySuppliersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersDestroyExecute(r)
}

/*
PluginsInventorySuppliersDestroy Method for PluginsInventorySuppliersDestroy

Delete a supplier object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this supplier.
	@return ApiPluginsInventorySuppliersDestroyRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersDestroy(ctx context.Context, id int32) ApiPluginsInventorySuppliersDestroyRequest {
	return ApiPluginsInventorySuppliersDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsInventorySuppliersDestroyExecute(r ApiPluginsInventorySuppliersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]int32
	contactGroupN     *[]int32
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

// Contact
func (r ApiPluginsInventorySuppliersListRequest) Contact(contact []int32) ApiPluginsInventorySuppliersListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiPluginsInventorySuppliersListRequest) ContactN(contactN []int32) ApiPluginsInventorySuppliersListRequest {
	r.contactN = &contactN
	return r
}

// Contact group
func (r ApiPluginsInventorySuppliersListRequest) ContactGroup(contactGroup []int32) ApiPluginsInventorySuppliersListRequest {
	r.contactGroup = &contactGroup
	return r
}

// Contact group
func (r ApiPluginsInventorySuppliersListRequest) ContactGroupN(contactGroupN []int32) ApiPluginsInventorySuppliersListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiPluginsInventorySuppliersListRequest) ContactRole(contactRole []int32) ApiPluginsInventorySuppliersListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiPluginsInventorySuppliersListRequest) ContactRoleN(contactRoleN []int32) ApiPluginsInventorySuppliersListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Created(created []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedGt(createdGt []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedGte(createdGte []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedLt(createdLt []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedLte(createdLte []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedN(createdN []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) CreatedByRequest(createdByRequest string) ApiPluginsInventorySuppliersListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Description(description []string) ApiPluginsInventorySuppliersListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsInventorySuppliersListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionIc(descriptionIc []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionIe(descriptionIe []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionIew(descriptionIew []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionN(descriptionN []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionNic(descriptionNic []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionNie(descriptionNie []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsInventorySuppliersListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Id(id []int32) ApiPluginsInventorySuppliersListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) IdEmpty(idEmpty bool) ApiPluginsInventorySuppliersListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) IdGt(idGt []int32) ApiPluginsInventorySuppliersListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) IdGte(idGte []int32) ApiPluginsInventorySuppliersListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) IdLt(idLt []int32) ApiPluginsInventorySuppliersListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) IdLte(idLte []int32) ApiPluginsInventorySuppliersListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) IdN(idN []int32) ApiPluginsInventorySuppliersListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsInventorySuppliersListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsInventorySuppliersListRequest) Limit(limit int32) ApiPluginsInventorySuppliersListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsInventorySuppliersListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Name(name []string) ApiPluginsInventorySuppliersListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameEmpty(nameEmpty bool) ApiPluginsInventorySuppliersListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameIc(nameIc []string) ApiPluginsInventorySuppliersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameIe(nameIe []string) ApiPluginsInventorySuppliersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameIew(nameIew []string) ApiPluginsInventorySuppliersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameIsw(nameIsw []string) ApiPluginsInventorySuppliersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameN(nameN []string) ApiPluginsInventorySuppliersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameNic(nameNic []string) ApiPluginsInventorySuppliersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameNie(nameNie []string) ApiPluginsInventorySuppliersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameNiew(nameNiew []string) ApiPluginsInventorySuppliersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) NameNisw(nameNisw []string) ApiPluginsInventorySuppliersListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsInventorySuppliersListRequest) Offset(offset int32) ApiPluginsInventorySuppliersListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsInventorySuppliersListRequest) Ordering(ordering string) ApiPluginsInventorySuppliersListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsInventorySuppliersListRequest) Q(q string) ApiPluginsInventorySuppliersListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Slug(slug []string) ApiPluginsInventorySuppliersListRequest {
	r.slug = &slug
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugEmpty(slugEmpty bool) ApiPluginsInventorySuppliersListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugIc(slugIc []string) ApiPluginsInventorySuppliersListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugIe(slugIe []string) ApiPluginsInventorySuppliersListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugIew(slugIew []string) ApiPluginsInventorySuppliersListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugIsw(slugIsw []string) ApiPluginsInventorySuppliersListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugN(slugN []string) ApiPluginsInventorySuppliersListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugNic(slugNic []string) ApiPluginsInventorySuppliersListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugNie(slugNie []string) ApiPluginsInventorySuppliersListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugNiew(slugNiew []string) ApiPluginsInventorySuppliersListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) SlugNisw(slugNisw []string) ApiPluginsInventorySuppliersListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Tag(tag []string) ApiPluginsInventorySuppliersListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) TagN(tagN []string) ApiPluginsInventorySuppliersListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsInventorySuppliersListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsInventorySuppliersListRequest) Execute() (*PaginatedSupplierList, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersListExecute(r)
}

/*
PluginsInventorySuppliersList Method for PluginsInventorySuppliersList

Get a list of supplier objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsInventorySuppliersListRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersList(ctx context.Context) ApiPluginsInventorySuppliersListRequest {
	return ApiPluginsInventorySuppliersListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSupplierList
func (a *PluginsAPIService) PluginsInventorySuppliersListExecute(r ApiPluginsInventorySuppliersListRequest) (*PaginatedSupplierList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSupplierList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersPartialUpdateRequest struct {
	ctx                    context.Context
	ApiService             *PluginsAPIService
	id                     int32
	patchedSupplierRequest *PatchedSupplierRequest
}

func (r ApiPluginsInventorySuppliersPartialUpdateRequest) PatchedSupplierRequest(patchedSupplierRequest PatchedSupplierRequest) ApiPluginsInventorySuppliersPartialUpdateRequest {
	r.patchedSupplierRequest = &patchedSupplierRequest
	return r
}

func (r ApiPluginsInventorySuppliersPartialUpdateRequest) Execute() (*Supplier, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersPartialUpdateExecute(r)
}

/*
PluginsInventorySuppliersPartialUpdate Method for PluginsInventorySuppliersPartialUpdate

Patch a supplier object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this supplier.
	@return ApiPluginsInventorySuppliersPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersPartialUpdate(ctx context.Context, id int32) ApiPluginsInventorySuppliersPartialUpdateRequest {
	return ApiPluginsInventorySuppliersPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Supplier
func (a *PluginsAPIService) PluginsInventorySuppliersPartialUpdateExecute(r ApiPluginsInventorySuppliersPartialUpdateRequest) (*Supplier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Supplier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSupplierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsInventorySuppliersRetrieveRequest) Execute() (*Supplier, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersRetrieveExecute(r)
}

/*
PluginsInventorySuppliersRetrieve Method for PluginsInventorySuppliersRetrieve

Get a supplier object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this supplier.
	@return ApiPluginsInventorySuppliersRetrieveRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersRetrieve(ctx context.Context, id int32) ApiPluginsInventorySuppliersRetrieveRequest {
	return ApiPluginsInventorySuppliersRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Supplier
func (a *PluginsAPIService) PluginsInventorySuppliersRetrieveExecute(r ApiPluginsInventorySuppliersRetrieveRequest) (*Supplier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Supplier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsInventorySuppliersUpdateRequest struct {
	ctx             context.Context
	ApiService      *PluginsAPIService
	id              int32
	supplierRequest *SupplierRequest
}

func (r ApiPluginsInventorySuppliersUpdateRequest) SupplierRequest(supplierRequest SupplierRequest) ApiPluginsInventorySuppliersUpdateRequest {
	r.supplierRequest = &supplierRequest
	return r
}

func (r ApiPluginsInventorySuppliersUpdateRequest) Execute() (*Supplier, *http.Response, error) {
	return r.ApiService.PluginsInventorySuppliersUpdateExecute(r)
}

/*
PluginsInventorySuppliersUpdate Method for PluginsInventorySuppliersUpdate

Put a supplier object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this supplier.
	@return ApiPluginsInventorySuppliersUpdateRequest
*/
func (a *PluginsAPIService) PluginsInventorySuppliersUpdate(ctx context.Context, id int32) ApiPluginsInventorySuppliersUpdateRequest {
	return ApiPluginsInventorySuppliersUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Supplier
func (a *PluginsAPIService) PluginsInventorySuppliersUpdateExecute(r ApiPluginsInventorySuppliersUpdateRequest) (*Supplier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Supplier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsInventorySuppliersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/inventory/suppliers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supplierRequest == nil {
		return localVarReturnValue, nil, reportError("supplierRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supplierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsGenerateRsaKeyPairListRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
}

func (r ApiPluginsSecretsGenerateRsaKeyPairListRequest) Execute() ([]RSAKeyPair, *http.Response, error) {
	return r.ApiService.PluginsSecretsGenerateRsaKeyPairListExecute(r)
}

/*
PluginsSecretsGenerateRsaKeyPairList Method for PluginsSecretsGenerateRsaKeyPairList

This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.

	   {
	       "public_key": "<public key>",
	       "private_key": "<private key>"
	   }

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsGenerateRsaKeyPairListRequest
*/
func (a *PluginsAPIService) PluginsSecretsGenerateRsaKeyPairList(ctx context.Context) ApiPluginsSecretsGenerateRsaKeyPairListRequest {
	return ApiPluginsSecretsGenerateRsaKeyPairListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RSAKeyPair
func (a *PluginsAPIService) PluginsSecretsGenerateRsaKeyPairListExecute(r ApiPluginsSecretsGenerateRsaKeyPairListRequest) ([]RSAKeyPair, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RSAKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsGenerateRsaKeyPairList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/generate-rsa-key-pair/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsGetSessionKeyCreateRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
}

func (r ApiPluginsSecretsGetSessionKeyCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsGetSessionKeyCreateExecute(r)
}

/*
PluginsSecretsGetSessionKeyCreate Method for PluginsSecretsGetSessionKeyCreate

Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user's private RSA
key is POSTed with the name `private_key`.
This endpoint accepts one optional parameter: `preserve_key`. If True and a session key exists, the existing session
key will be returned instead of a new one.

Deprecation notice: This endpoint is deprecated and will be removed in a future release. Use the `SessionKeyViewSet`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsGetSessionKeyCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsGetSessionKeyCreate(ctx context.Context) ApiPluginsSecretsGetSessionKeyCreateRequest {
	return ApiPluginsSecretsGetSessionKeyCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsGetSessionKeyCreateExecute(r ApiPluginsSecretsGetSessionKeyCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsGetSessionKeyCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/get-session-key/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *[]SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesBulkDestroyRequest) SecretRoleRequest(secretRoleRequest []SecretRoleRequest) ApiPluginsSecretsSecretRolesBulkDestroyRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesBulkDestroyExecute(r)
}

/*
PluginsSecretsSecretRolesBulkDestroy Method for PluginsSecretsSecretRolesBulkDestroy

Delete a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkDestroy(ctx context.Context) ApiPluginsSecretsSecretRolesBulkDestroyRequest {
	return ApiPluginsSecretsSecretRolesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkDestroyExecute(r ApiPluginsSecretsSecretRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *[]SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest) SecretRoleRequest(secretRoleRequest []SecretRoleRequest) ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest) Execute() ([]SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesBulkPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesBulkPartialUpdate Method for PluginsSecretsSecretRolesBulkPartialUpdate

Patch a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkPartialUpdate(ctx context.Context) ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest {
	return ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkPartialUpdateExecute(r ApiPluginsSecretsSecretRolesBulkPartialUpdateRequest) ([]SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *[]SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesBulkUpdateRequest) SecretRoleRequest(secretRoleRequest []SecretRoleRequest) ApiPluginsSecretsSecretRolesBulkUpdateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesBulkUpdateRequest) Execute() ([]SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesBulkUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesBulkUpdate Method for PluginsSecretsSecretRolesBulkUpdate

Put a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkUpdate(ctx context.Context) ApiPluginsSecretsSecretRolesBulkUpdateRequest {
	return ApiPluginsSecretsSecretRolesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesBulkUpdateExecute(r ApiPluginsSecretsSecretRolesBulkUpdateRequest) ([]SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesCreateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	secretRoleRequest *SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesCreateRequest) SecretRoleRequest(secretRoleRequest SecretRoleRequest) ApiPluginsSecretsSecretRolesCreateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesCreateRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesCreateExecute(r)
}

/*
PluginsSecretsSecretRolesCreate Method for PluginsSecretsSecretRolesCreate

Post a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesCreate(ctx context.Context) ApiPluginsSecretsSecretRolesCreateRequest {
	return ApiPluginsSecretsSecretRolesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesCreateExecute(r ApiPluginsSecretsSecretRolesCreateRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesDestroyExecute(r)
}

/*
PluginsSecretsSecretRolesDestroy Method for PluginsSecretsSecretRolesDestroy

Delete a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesDestroy(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesDestroyRequest {
	return ApiPluginsSecretsSecretRolesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretRolesDestroyExecute(r ApiPluginsSecretsSecretRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesListRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	comments          *string
	commentsIc        *string
	commentsIe        *string
	commentsIew       *string
	commentsIsw       *string
	commentsN         *string
	commentsNic       *string
	commentsNie       *string
	commentsNiew      *string
	commentsNisw      *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiPluginsSecretsSecretRolesListRequest) Comments(comments string) ApiPluginsSecretsSecretRolesListRequest {
	r.comments = &comments
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIc(commentsIc string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIe(commentsIe string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIew(commentsIew string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsIsw(commentsIsw string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsN(commentsN string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNic(commentsNic string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNie(commentsNie string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNiew(commentsNiew string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CommentsNisw(commentsNisw string) ApiPluginsSecretsSecretRolesListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Created(created []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedGt(createdGt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedGte(createdGte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedLt(createdLt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedLte(createdLte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedN(createdN []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) CreatedByRequest(createdByRequest string) ApiPluginsSecretsSecretRolesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Description(description []string) ApiPluginsSecretsSecretRolesListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIc(descriptionIc []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIe(descriptionIe []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIew(descriptionIew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionN(descriptionN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNic(descriptionNic []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNie(descriptionNie []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Id(id []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdEmpty(idEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdGt(idGt []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdGte(idGte []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdLt(idLt []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdLte(idLte []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) IdN(idN []int32) ApiPluginsSecretsSecretRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsSecretsSecretRolesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsSecretsSecretRolesListRequest) Limit(limit int32) ApiPluginsSecretsSecretRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsSecretsSecretRolesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Name(name []string) ApiPluginsSecretsSecretRolesListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameEmpty(nameEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIc(nameIc []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIe(nameIe []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIew(nameIew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameIsw(nameIsw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameN(nameN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNic(nameNic []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNie(nameNie []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNiew(nameNiew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) NameNisw(nameNisw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsSecretRolesListRequest) Offset(offset int32) ApiPluginsSecretsSecretRolesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsSecretRolesListRequest) Ordering(ordering string) ApiPluginsSecretsSecretRolesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsSecretsSecretRolesListRequest) Q(q string) ApiPluginsSecretsSecretRolesListRequest {
	r.q = &q
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Slug(slug []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugEmpty(slugEmpty bool) ApiPluginsSecretsSecretRolesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIc(slugIc []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIe(slugIe []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIew(slugIew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugIsw(slugIsw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugN(slugN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNic(slugNic []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNie(slugNie []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNiew(slugNiew []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) SlugNisw(slugNisw []string) ApiPluginsSecretsSecretRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Tag(tag []string) ApiPluginsSecretsSecretRolesListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) TagN(tagN []string) ApiPluginsSecretsSecretRolesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsSecretsSecretRolesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesListRequest) Execute() (*PaginatedSecretRoleList, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesListExecute(r)
}

/*
PluginsSecretsSecretRolesList Method for PluginsSecretsSecretRolesList

Get a list of secret role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretRolesListRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesList(ctx context.Context) ApiPluginsSecretsSecretRolesListRequest {
	return ApiPluginsSecretsSecretRolesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSecretRoleList
func (a *PluginsAPIService) PluginsSecretsSecretRolesListExecute(r ApiPluginsSecretsSecretRolesListRequest) (*PaginatedSecretRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSecretRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "")
	}
	if r.commentsIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", r.commentsIc, "")
	}
	if r.commentsIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", r.commentsIe, "")
	}
	if r.commentsIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", r.commentsIew, "")
	}
	if r.commentsIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", r.commentsIsw, "")
	}
	if r.commentsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", r.commentsN, "")
	}
	if r.commentsNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", r.commentsNic, "")
	}
	if r.commentsNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", r.commentsNie, "")
	}
	if r.commentsNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", r.commentsNiew, "")
	}
	if r.commentsNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", r.commentsNisw, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *PluginsAPIService
	id                       int32
	patchedSecretRoleRequest *PatchedSecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesPartialUpdateRequest) PatchedSecretRoleRequest(patchedSecretRoleRequest PatchedSecretRoleRequest) ApiPluginsSecretsSecretRolesPartialUpdateRequest {
	r.patchedSecretRoleRequest = &patchedSecretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesPartialUpdateRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesPartialUpdate Method for PluginsSecretsSecretRolesPartialUpdate

Patch a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesPartialUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesPartialUpdateRequest {
	return ApiPluginsSecretsSecretRolesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesPartialUpdateExecute(r ApiPluginsSecretsSecretRolesPartialUpdateRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretRolesRetrieveRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesRetrieveExecute(r)
}

/*
PluginsSecretsSecretRolesRetrieve Method for PluginsSecretsSecretRolesRetrieve

Get a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesRetrieve(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesRetrieveRequest {
	return ApiPluginsSecretsSecretRolesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesRetrieveExecute(r ApiPluginsSecretsSecretRolesRetrieveRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretRolesUpdateRequest struct {
	ctx               context.Context
	ApiService        *PluginsAPIService
	id                int32
	secretRoleRequest *SecretRoleRequest
}

func (r ApiPluginsSecretsSecretRolesUpdateRequest) SecretRoleRequest(secretRoleRequest SecretRoleRequest) ApiPluginsSecretsSecretRolesUpdateRequest {
	r.secretRoleRequest = &secretRoleRequest
	return r
}

func (r ApiPluginsSecretsSecretRolesUpdateRequest) Execute() (*SecretRole, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretRolesUpdateExecute(r)
}

/*
PluginsSecretsSecretRolesUpdate Method for PluginsSecretsSecretRolesUpdate

Put a secret role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret role.
	@return ApiPluginsSecretsSecretRolesUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretRolesUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretRolesUpdateRequest {
	return ApiPluginsSecretsSecretRolesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SecretRole
func (a *PluginsAPIService) PluginsSecretsSecretRolesUpdateExecute(r ApiPluginsSecretsSecretRolesUpdateRequest) (*SecretRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secret-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRoleRequest == nil {
		return localVarReturnValue, nil, reportError("secretRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsBulkDestroyRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *[]SecretRequest
}

func (r ApiPluginsSecretsSecretsBulkDestroyRequest) SecretRequest(secretRequest []SecretRequest) ApiPluginsSecretsSecretsBulkDestroyRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsBulkDestroyExecute(r)
}

/*
PluginsSecretsSecretsBulkDestroy Method for PluginsSecretsSecretsBulkDestroy

Delete a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsBulkDestroy(ctx context.Context) ApiPluginsSecretsSecretsBulkDestroyRequest {
	return ApiPluginsSecretsSecretsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretsBulkDestroyExecute(r ApiPluginsSecretsSecretsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsBulkPartialUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *[]SecretRequest
}

func (r ApiPluginsSecretsSecretsBulkPartialUpdateRequest) SecretRequest(secretRequest []SecretRequest) ApiPluginsSecretsSecretsBulkPartialUpdateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsBulkPartialUpdateRequest) Execute() ([]Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsBulkPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretsBulkPartialUpdate Method for PluginsSecretsSecretsBulkPartialUpdate

Patch a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsBulkPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsBulkPartialUpdate(ctx context.Context) ApiPluginsSecretsSecretsBulkPartialUpdateRequest {
	return ApiPluginsSecretsSecretsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Secret
func (a *PluginsAPIService) PluginsSecretsSecretsBulkPartialUpdateExecute(r ApiPluginsSecretsSecretsBulkPartialUpdateRequest) ([]Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsBulkUpdateRequest struct {
	ctx           context.Context
	ApiService    *PluginsAPIService
	secretRequest *[]SecretRequest
}

func (r ApiPluginsSecretsSecretsBulkUpdateRequest) SecretRequest(secretRequest []SecretRequest) ApiPluginsSecretsSecretsBulkUpdateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiPluginsSecretsSecretsBulkUpdateRequest) Execute() ([]Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsBulkUpdateExecute(r)
}

/*
PluginsSecretsSecretsBulkUpdate Method for PluginsSecretsSecretsBulkUpdate

Put a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsBulkUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsBulkUpdate(ctx context.Context) ApiPluginsSecretsSecretsBulkUpdateRequest {
	return ApiPluginsSecretsSecretsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Secret
func (a *PluginsAPIService) PluginsSecretsSecretsBulkUpdateExecute(r ApiPluginsSecretsSecretsBulkUpdateRequest) ([]Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsCreateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	writableSecretRequest *WritableSecretRequest
}

func (r ApiPluginsSecretsSecretsCreateRequest) WritableSecretRequest(writableSecretRequest WritableSecretRequest) ApiPluginsSecretsSecretsCreateRequest {
	r.writableSecretRequest = &writableSecretRequest
	return r
}

func (r ApiPluginsSecretsSecretsCreateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsCreateExecute(r)
}

/*
PluginsSecretsSecretsCreate Method for PluginsSecretsSecretsCreate

Post a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsCreate(ctx context.Context) ApiPluginsSecretsSecretsCreateRequest {
	return ApiPluginsSecretsSecretsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsCreateExecute(r ApiPluginsSecretsSecretsCreateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSecretRequest == nil {
		return localVarReturnValue, nil, reportError("writableSecretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsDestroyExecute(r)
}

/*
PluginsSecretsSecretsDestroy Method for PluginsSecretsSecretsDestroy

Delete a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsDestroy(ctx context.Context, id int32) ApiPluginsSecretsSecretsDestroyRequest {
	return ApiPluginsSecretsSecretsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSecretsDestroyExecute(r ApiPluginsSecretsSecretsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsListRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	objectRepr            *[]string
	objectReprEmpty       *bool
	objectReprIc          *[]string
	objectReprIe          *[]string
	objectReprIew         *[]string
	objectReprIsw         *[]string
	objectReprN           *[]string
	objectReprNic         *[]string
	objectReprNie         *[]string
	objectReprNiew        *[]string
	objectReprNisw        *[]string
	assignedObjectId      *[]int32
	assignedObjectIdEmpty *bool
	assignedObjectIdGt    *[]int32
	assignedObjectIdGte   *[]int32
	assignedObjectIdLt    *[]int32
	assignedObjectIdLte   *[]int32
	assignedObjectIdN     *[]int32
	assignedObjectType    *string
	assignedObjectTypeN   *string
	assignedObjectTypeId  *[]int32
	assignedObjectTypeIdN *[]int32
	comments              *string
	commentsIc            *string
	commentsIe            *string
	commentsIew           *string
	commentsIsw           *string
	commentsN             *string
	commentsNic           *string
	commentsNie           *string
	commentsNiew          *string
	commentsNisw          *string
	contact               *[]int32
	contactN              *[]int32
	created               *[]time.Time
	createdEmpty          *[]time.Time
	createdGt             *[]time.Time
	createdGte            *[]time.Time
	createdLt             *[]time.Time
	createdLte            *[]time.Time
	createdN              *[]time.Time
	createdByRequest      *string
	description           *[]string
	descriptionEmpty      *bool
	descriptionIc         *[]string
	descriptionIe         *[]string
	descriptionIew        *[]string
	descriptionIsw        *[]string
	descriptionN          *[]string
	descriptionNic        *[]string
	descriptionNie        *[]string
	descriptionNiew       *[]string
	descriptionNisw       *[]string
	id                    *[]int32
	idEmpty               *bool
	idGt                  *[]int32
	idGte                 *[]int32
	idLt                  *[]int32
	idLte                 *[]int32
	idN                   *[]int32
	lastUpdated           *[]time.Time
	lastUpdatedEmpty      *[]time.Time
	lastUpdatedGt         *[]time.Time
	lastUpdatedGte        *[]time.Time
	lastUpdatedLt         *[]time.Time
	lastUpdatedLte        *[]time.Time
	lastUpdatedN          *[]time.Time
	limit                 *int32
	modifiedByRequest     *string
	name                  *[]string
	nameEmpty             *bool
	nameIc                *[]string
	nameIe                *[]string
	nameIew               *[]string
	nameIsw               *[]string
	nameN                 *[]string
	nameNic               *[]string
	nameNie               *[]string
	nameNiew              *[]string
	nameNisw              *[]string
	offset                *int32
	ordering              *string
	q                     *string
	role                  *[]string
	roleN                 *[]string
	roleId                *[]int32
	roleIdN               *[]int32
	tag                   *[]string
	tagN                  *[]string
	updatedByRequest      *string
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectRepr(objectRepr []string) ApiPluginsSecretsSecretsListRequest {
	r.objectRepr = &objectRepr
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprEmpty(objectReprEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.objectReprEmpty = &objectReprEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIc(objectReprIc []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIc = &objectReprIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIe(objectReprIe []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIe = &objectReprIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIew(objectReprIew []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIew = &objectReprIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprIsw(objectReprIsw []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprIsw = &objectReprIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprN(objectReprN []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprN = &objectReprN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNic(objectReprNic []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNic = &objectReprNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNie(objectReprNie []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNie = &objectReprNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNiew(objectReprNiew []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNiew = &objectReprNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ObjectReprNisw(objectReprNisw []string) ApiPluginsSecretsSecretsListRequest {
	r.objectReprNisw = &objectReprNisw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectId(assignedObjectId []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectId = &assignedObjectId
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdEmpty(assignedObjectIdEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdEmpty = &assignedObjectIdEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdGt(assignedObjectIdGt []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdGt = &assignedObjectIdGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdGte(assignedObjectIdGte []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdGte = &assignedObjectIdGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdLt(assignedObjectIdLt []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdLt = &assignedObjectIdLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdLte(assignedObjectIdLte []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdLte = &assignedObjectIdLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectIdN(assignedObjectIdN []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectIdN = &assignedObjectIdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectType(assignedObjectType string) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectType = &assignedObjectType
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectTypeN(assignedObjectTypeN string) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectTypeN = &assignedObjectTypeN
	return r
}

// Object type (ID)
func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectTypeId(assignedObjectTypeId []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectTypeId = &assignedObjectTypeId
	return r
}

// Object type (ID)
func (r ApiPluginsSecretsSecretsListRequest) AssignedObjectTypeIdN(assignedObjectTypeIdN []int32) ApiPluginsSecretsSecretsListRequest {
	r.assignedObjectTypeIdN = &assignedObjectTypeIdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Comments(comments string) ApiPluginsSecretsSecretsListRequest {
	r.comments = &comments
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIc(commentsIc string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIe(commentsIe string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIew(commentsIew string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsIsw(commentsIsw string) ApiPluginsSecretsSecretsListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsN(commentsN string) ApiPluginsSecretsSecretsListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNic(commentsNic string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNie(commentsNie string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNiew(commentsNiew string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CommentsNisw(commentsNisw string) ApiPluginsSecretsSecretsListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

// Contact
func (r ApiPluginsSecretsSecretsListRequest) Contact(contact []int32) ApiPluginsSecretsSecretsListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiPluginsSecretsSecretsListRequest) ContactN(contactN []int32) ApiPluginsSecretsSecretsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Created(created []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.created = &created
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedGt(createdGt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedGte(createdGte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedLt(createdLt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedLte(createdLte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedN(createdN []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) CreatedByRequest(createdByRequest string) ApiPluginsSecretsSecretsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Description(description []string) ApiPluginsSecretsSecretsListRequest {
	r.description = &description
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIc(descriptionIc []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIe(descriptionIe []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIew(descriptionIew []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionIsw(descriptionIsw []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionN(descriptionN []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNic(descriptionNic []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNie(descriptionNie []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNiew(descriptionNiew []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) DescriptionNisw(descriptionNisw []string) ApiPluginsSecretsSecretsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Id(id []int32) ApiPluginsSecretsSecretsListRequest {
	r.id = &id
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdEmpty(idEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdGt(idGt []int32) ApiPluginsSecretsSecretsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdGte(idGte []int32) ApiPluginsSecretsSecretsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdLt(idLt []int32) ApiPluginsSecretsSecretsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdLte(idLte []int32) ApiPluginsSecretsSecretsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) IdN(idN []int32) ApiPluginsSecretsSecretsListRequest {
	r.idN = &idN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdated(lastUpdated []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiPluginsSecretsSecretsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiPluginsSecretsSecretsListRequest) Limit(limit int32) ApiPluginsSecretsSecretsListRequest {
	r.limit = &limit
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) ModifiedByRequest(modifiedByRequest string) ApiPluginsSecretsSecretsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Name(name []string) ApiPluginsSecretsSecretsListRequest {
	r.name = &name
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameEmpty(nameEmpty bool) ApiPluginsSecretsSecretsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIc(nameIc []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIe(nameIe []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIew(nameIew []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameIsw(nameIsw []string) ApiPluginsSecretsSecretsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameN(nameN []string) ApiPluginsSecretsSecretsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNic(nameNic []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNie(nameNie []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNiew(nameNiew []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) NameNisw(nameNisw []string) ApiPluginsSecretsSecretsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsSecretsListRequest) Offset(offset int32) ApiPluginsSecretsSecretsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsSecretsListRequest) Ordering(ordering string) ApiPluginsSecretsSecretsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiPluginsSecretsSecretsListRequest) Q(q string) ApiPluginsSecretsSecretsListRequest {
	r.q = &q
	return r
}

// Role (slug)
func (r ApiPluginsSecretsSecretsListRequest) Role(role []string) ApiPluginsSecretsSecretsListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiPluginsSecretsSecretsListRequest) RoleN(roleN []string) ApiPluginsSecretsSecretsListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiPluginsSecretsSecretsListRequest) RoleId(roleId []int32) ApiPluginsSecretsSecretsListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiPluginsSecretsSecretsListRequest) RoleIdN(roleIdN []int32) ApiPluginsSecretsSecretsListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Tag(tag []string) ApiPluginsSecretsSecretsListRequest {
	r.tag = &tag
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) TagN(tagN []string) ApiPluginsSecretsSecretsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) UpdatedByRequest(updatedByRequest string) ApiPluginsSecretsSecretsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiPluginsSecretsSecretsListRequest) Execute() (*PaginatedSecretList, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsListExecute(r)
}

/*
PluginsSecretsSecretsList Method for PluginsSecretsSecretsList

Get a list of secret objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSecretsListRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsList(ctx context.Context) ApiPluginsSecretsSecretsListRequest {
	return ApiPluginsSecretsSecretsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSecretList
func (a *PluginsAPIService) PluginsSecretsSecretsListExecute(r ApiPluginsSecretsSecretsListRequest) (*PaginatedSecretList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSecretList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.objectRepr != nil {
		t := *r.objectRepr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr", t, "multi")
		}
	}
	if r.objectReprEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__empty", r.objectReprEmpty, "")
	}
	if r.objectReprIc != nil {
		t := *r.objectReprIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ic", t, "multi")
		}
	}
	if r.objectReprIe != nil {
		t := *r.objectReprIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__ie", t, "multi")
		}
	}
	if r.objectReprIew != nil {
		t := *r.objectReprIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__iew", t, "multi")
		}
	}
	if r.objectReprIsw != nil {
		t := *r.objectReprIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__isw", t, "multi")
		}
	}
	if r.objectReprN != nil {
		t := *r.objectReprN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__n", t, "multi")
		}
	}
	if r.objectReprNic != nil {
		t := *r.objectReprNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nic", t, "multi")
		}
	}
	if r.objectReprNie != nil {
		t := *r.objectReprNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nie", t, "multi")
		}
	}
	if r.objectReprNiew != nil {
		t := *r.objectReprNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__niew", t, "multi")
		}
	}
	if r.objectReprNisw != nil {
		t := *r.objectReprNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "_object_repr__nisw", t, "multi")
		}
	}
	if r.assignedObjectId != nil {
		t := *r.assignedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", t, "multi")
		}
	}
	if r.assignedObjectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__empty", r.assignedObjectIdEmpty, "")
	}
	if r.assignedObjectIdGt != nil {
		t := *r.assignedObjectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gt", t, "multi")
		}
	}
	if r.assignedObjectIdGte != nil {
		t := *r.assignedObjectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gte", t, "multi")
		}
	}
	if r.assignedObjectIdLt != nil {
		t := *r.assignedObjectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lt", t, "multi")
		}
	}
	if r.assignedObjectIdLte != nil {
		t := *r.assignedObjectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lte", t, "multi")
		}
	}
	if r.assignedObjectIdN != nil {
		t := *r.assignedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", t, "multi")
		}
	}
	if r.assignedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type", r.assignedObjectType, "")
	}
	if r.assignedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__n", r.assignedObjectTypeN, "")
	}
	if r.assignedObjectTypeId != nil {
		t := *r.assignedObjectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", t, "multi")
		}
	}
	if r.assignedObjectTypeIdN != nil {
		t := *r.assignedObjectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", t, "multi")
		}
	}
	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "")
	}
	if r.commentsIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", r.commentsIc, "")
	}
	if r.commentsIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", r.commentsIe, "")
	}
	if r.commentsIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", r.commentsIew, "")
	}
	if r.commentsIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", r.commentsIsw, "")
	}
	if r.commentsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", r.commentsN, "")
	}
	if r.commentsNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", r.commentsNic, "")
	}
	if r.commentsNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", r.commentsNie, "")
	}
	if r.commentsNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", r.commentsNiew, "")
	}
	if r.commentsNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", r.commentsNisw, "")
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *PluginsAPIService
	id                           int32
	patchedWritableSecretRequest *PatchedWritableSecretRequest
}

func (r ApiPluginsSecretsSecretsPartialUpdateRequest) PatchedWritableSecretRequest(patchedWritableSecretRequest PatchedWritableSecretRequest) ApiPluginsSecretsSecretsPartialUpdateRequest {
	r.patchedWritableSecretRequest = &patchedWritableSecretRequest
	return r
}

func (r ApiPluginsSecretsSecretsPartialUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsPartialUpdateExecute(r)
}

/*
PluginsSecretsSecretsPartialUpdate Method for PluginsSecretsSecretsPartialUpdate

Patch a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsPartialUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretsPartialUpdateRequest {
	return ApiPluginsSecretsSecretsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsPartialUpdateExecute(r ApiPluginsSecretsSecretsPartialUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSecretsRetrieveRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsRetrieveExecute(r)
}

/*
PluginsSecretsSecretsRetrieve Method for PluginsSecretsSecretsRetrieve

Get a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsRetrieve(ctx context.Context, id int32) ApiPluginsSecretsSecretsRetrieveRequest {
	return ApiPluginsSecretsSecretsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsRetrieveExecute(r ApiPluginsSecretsSecretsRetrieveRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSecretsUpdateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	id                    int32
	writableSecretRequest *WritableSecretRequest
}

func (r ApiPluginsSecretsSecretsUpdateRequest) WritableSecretRequest(writableSecretRequest WritableSecretRequest) ApiPluginsSecretsSecretsUpdateRequest {
	r.writableSecretRequest = &writableSecretRequest
	return r
}

func (r ApiPluginsSecretsSecretsUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.PluginsSecretsSecretsUpdateExecute(r)
}

/*
PluginsSecretsSecretsUpdate Method for PluginsSecretsSecretsUpdate

Put a secret object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this secret.
	@return ApiPluginsSecretsSecretsUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSecretsUpdate(ctx context.Context, id int32) ApiPluginsSecretsSecretsUpdateRequest {
	return ApiPluginsSecretsSecretsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *PluginsAPIService) PluginsSecretsSecretsUpdateExecute(r ApiPluginsSecretsSecretsUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSecretsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSecretRequest == nil {
		return localVarReturnValue, nil, reportError("writableSecretRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysBulkDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
}

func (r ApiPluginsSecretsSessionKeysBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysBulkDestroyExecute(r)
}

/*
PluginsSecretsSessionKeysBulkDestroy Method for PluginsSecretsSessionKeysBulkDestroy

Delete a list of session key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSessionKeysBulkDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysBulkDestroy(ctx context.Context) ApiPluginsSecretsSessionKeysBulkDestroyRequest {
	return ApiPluginsSecretsSessionKeysBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSessionKeysBulkDestroyExecute(r ApiPluginsSecretsSessionKeysBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysCreateRequest struct {
	ctx                     context.Context
	ApiService              *PluginsAPIService
	sessionKeyCreateRequest *SessionKeyCreateRequest
}

func (r ApiPluginsSecretsSessionKeysCreateRequest) SessionKeyCreateRequest(sessionKeyCreateRequest SessionKeyCreateRequest) ApiPluginsSecretsSessionKeysCreateRequest {
	r.sessionKeyCreateRequest = &sessionKeyCreateRequest
	return r
}

func (r ApiPluginsSecretsSessionKeysCreateRequest) Execute() (*SessionKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysCreateExecute(r)
}

/*
PluginsSecretsSessionKeysCreate Method for PluginsSecretsSessionKeysCreate

Creates a new session key for the current user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSessionKeysCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysCreate(ctx context.Context) ApiPluginsSecretsSessionKeysCreateRequest {
	return ApiPluginsSecretsSessionKeysCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SessionKey
func (a *PluginsAPIService) PluginsSecretsSessionKeysCreateExecute(r ApiPluginsSecretsSessionKeysCreateRequest) (*SessionKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SessionKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionKeyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("sessionKeyCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sessionKeyCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSessionKeysDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysDestroyExecute(r)
}

/*
PluginsSecretsSessionKeysDestroy Method for PluginsSecretsSessionKeysDestroy

Delete a session key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this session key.
	@return ApiPluginsSecretsSessionKeysDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysDestroy(ctx context.Context, id int32) ApiPluginsSecretsSessionKeysDestroyRequest {
	return ApiPluginsSecretsSessionKeysDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsSessionKeysDestroyExecute(r ApiPluginsSecretsSessionKeysDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysListRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	limit      *int32
	offset     *int32
	ordering   *string
}

// Number of results to return per page.
func (r ApiPluginsSecretsSessionKeysListRequest) Limit(limit int32) ApiPluginsSecretsSessionKeysListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsSessionKeysListRequest) Offset(offset int32) ApiPluginsSecretsSessionKeysListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsSessionKeysListRequest) Ordering(ordering string) ApiPluginsSecretsSessionKeysListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsSecretsSessionKeysListRequest) Execute() (*PaginatedSessionKeyList, *http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysListExecute(r)
}

/*
PluginsSecretsSessionKeysList Method for PluginsSecretsSessionKeysList

Get a list of session key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsSessionKeysListRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysList(ctx context.Context) ApiPluginsSecretsSessionKeysListRequest {
	return ApiPluginsSecretsSessionKeysListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSessionKeyList
func (a *PluginsAPIService) PluginsSecretsSessionKeysListExecute(r ApiPluginsSecretsSessionKeysListRequest) (*PaginatedSessionKeyList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSessionKeyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsSessionKeysRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsSessionKeysRetrieveRequest) Execute() (*SessionKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsSessionKeysRetrieveExecute(r)
}

/*
PluginsSecretsSessionKeysRetrieve Method for PluginsSecretsSessionKeysRetrieve

Get a session key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this session key.
	@return ApiPluginsSecretsSessionKeysRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsSessionKeysRetrieve(ctx context.Context, id int32) ApiPluginsSecretsSessionKeysRetrieveRequest {
	return ApiPluginsSecretsSessionKeysRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SessionKey
func (a *PluginsAPIService) PluginsSecretsSessionKeysRetrieveExecute(r ApiPluginsSecretsSessionKeysRetrieveRequest) (*SessionKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SessionKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsSessionKeysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/session-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysCreateRequest struct {
	ctx            context.Context
	ApiService     *PluginsAPIService
	userKeyRequest *UserKeyRequest
}

func (r ApiPluginsSecretsUserKeysCreateRequest) UserKeyRequest(userKeyRequest UserKeyRequest) ApiPluginsSecretsUserKeysCreateRequest {
	r.userKeyRequest = &userKeyRequest
	return r
}

func (r ApiPluginsSecretsUserKeysCreateRequest) Execute() (*UserKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysCreateExecute(r)
}

/*
PluginsSecretsUserKeysCreate Method for PluginsSecretsUserKeysCreate

Post a list of user key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsUserKeysCreateRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysCreate(ctx context.Context) ApiPluginsSecretsUserKeysCreateRequest {
	return ApiPluginsSecretsUserKeysCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return UserKey
func (a *PluginsAPIService) PluginsSecretsUserKeysCreateExecute(r ApiPluginsSecretsUserKeysCreateRequest) (*UserKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UserKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userKeyRequest == nil {
		return localVarReturnValue, nil, reportError("userKeyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysDestroyRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsUserKeysDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysDestroyExecute(r)
}

/*
PluginsSecretsUserKeysDestroy Method for PluginsSecretsUserKeysDestroy

Delete a user key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this user key.
	@return ApiPluginsSecretsUserKeysDestroyRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysDestroy(ctx context.Context, id int32) ApiPluginsSecretsUserKeysDestroyRequest {
	return ApiPluginsSecretsUserKeysDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PluginsAPIService) PluginsSecretsUserKeysDestroyExecute(r ApiPluginsSecretsUserKeysDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysListRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	limit      *int32
	offset     *int32
	ordering   *string
}

// Number of results to return per page.
func (r ApiPluginsSecretsUserKeysListRequest) Limit(limit int32) ApiPluginsSecretsUserKeysListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiPluginsSecretsUserKeysListRequest) Offset(offset int32) ApiPluginsSecretsUserKeysListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiPluginsSecretsUserKeysListRequest) Ordering(ordering string) ApiPluginsSecretsUserKeysListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiPluginsSecretsUserKeysListRequest) Execute() (*PaginatedUserKeyList, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysListExecute(r)
}

/*
PluginsSecretsUserKeysList Method for PluginsSecretsUserKeysList

Get a list of user key objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPluginsSecretsUserKeysListRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysList(ctx context.Context) ApiPluginsSecretsUserKeysListRequest {
	return ApiPluginsSecretsUserKeysListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedUserKeyList
func (a *PluginsAPIService) PluginsSecretsUserKeysListExecute(r ApiPluginsSecretsUserKeysListRequest) (*PaginatedUserKeyList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedUserKeyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysPartialUpdateRequest struct {
	ctx                   context.Context
	ApiService            *PluginsAPIService
	id                    int32
	patchedUserKeyRequest *PatchedUserKeyRequest
}

func (r ApiPluginsSecretsUserKeysPartialUpdateRequest) PatchedUserKeyRequest(patchedUserKeyRequest PatchedUserKeyRequest) ApiPluginsSecretsUserKeysPartialUpdateRequest {
	r.patchedUserKeyRequest = &patchedUserKeyRequest
	return r
}

func (r ApiPluginsSecretsUserKeysPartialUpdateRequest) Execute() (*UserKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysPartialUpdateExecute(r)
}

/*
PluginsSecretsUserKeysPartialUpdate Method for PluginsSecretsUserKeysPartialUpdate

Patch a user key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this user key.
	@return ApiPluginsSecretsUserKeysPartialUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysPartialUpdate(ctx context.Context, id int32) ApiPluginsSecretsUserKeysPartialUpdateRequest {
	return ApiPluginsSecretsUserKeysPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return UserKey
func (a *PluginsAPIService) PluginsSecretsUserKeysPartialUpdateExecute(r ApiPluginsSecretsUserKeysPartialUpdateRequest) (*UserKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UserKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedUserKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysRetrieveRequest struct {
	ctx        context.Context
	ApiService *PluginsAPIService
	id         int32
}

func (r ApiPluginsSecretsUserKeysRetrieveRequest) Execute() (*UserKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysRetrieveExecute(r)
}

/*
PluginsSecretsUserKeysRetrieve Method for PluginsSecretsUserKeysRetrieve

Get a user key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this user key.
	@return ApiPluginsSecretsUserKeysRetrieveRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysRetrieve(ctx context.Context, id int32) ApiPluginsSecretsUserKeysRetrieveRequest {
	return ApiPluginsSecretsUserKeysRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return UserKey
func (a *PluginsAPIService) PluginsSecretsUserKeysRetrieveExecute(r ApiPluginsSecretsUserKeysRetrieveRequest) (*UserKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UserKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPluginsSecretsUserKeysUpdateRequest struct {
	ctx            context.Context
	ApiService     *PluginsAPIService
	id             int32
	userKeyRequest *UserKeyRequest
}

func (r ApiPluginsSecretsUserKeysUpdateRequest) UserKeyRequest(userKeyRequest UserKeyRequest) ApiPluginsSecretsUserKeysUpdateRequest {
	r.userKeyRequest = &userKeyRequest
	return r
}

func (r ApiPluginsSecretsUserKeysUpdateRequest) Execute() (*UserKey, *http.Response, error) {
	return r.ApiService.PluginsSecretsUserKeysUpdateExecute(r)
}

/*
PluginsSecretsUserKeysUpdate Method for PluginsSecretsUserKeysUpdate

Put a user key object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this user key.
	@return ApiPluginsSecretsUserKeysUpdateRequest
*/
func (a *PluginsAPIService) PluginsSecretsUserKeysUpdate(ctx context.Context, id int32) ApiPluginsSecretsUserKeysUpdateRequest {
	return ApiPluginsSecretsUserKeysUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return UserKey
func (a *PluginsAPIService) PluginsSecretsUserKeysUpdateExecute(r ApiPluginsSecretsUserKeysUpdateRequest) (*UserKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UserKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsAPIService.PluginsSecretsUserKeysUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/plugins/secrets/user-keys/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userKeyRequest == nil {
		return localVarReturnValue, nil, reportError("userKeyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
