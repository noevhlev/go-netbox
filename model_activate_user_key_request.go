/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the ActivateUserKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivateUserKeyRequest{}

// ActivateUserKeyRequest struct for ActivateUserKeyRequest
type ActivateUserKeyRequest struct {
	PrivateKey           string        `json:"private_key"`
	UserKeys             []interface{} `json:"user_keys"`
	AdditionalProperties map[string]interface{}
}

type _ActivateUserKeyRequest ActivateUserKeyRequest

// NewActivateUserKeyRequest instantiates a new ActivateUserKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateUserKeyRequest(privateKey string, userKeys []interface{}) *ActivateUserKeyRequest {
	this := ActivateUserKeyRequest{}
	this.PrivateKey = privateKey
	this.UserKeys = userKeys
	return &this
}

// NewActivateUserKeyRequestWithDefaults instantiates a new ActivateUserKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateUserKeyRequestWithDefaults() *ActivateUserKeyRequest {
	this := ActivateUserKeyRequest{}
	return &this
}

// GetPrivateKey returns the PrivateKey field value
func (o *ActivateUserKeyRequest) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *ActivateUserKeyRequest) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *ActivateUserKeyRequest) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetUserKeys returns the UserKeys field value
func (o *ActivateUserKeyRequest) GetUserKeys() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.UserKeys
}

// GetUserKeysOk returns a tuple with the UserKeys field value
// and a boolean to check if the value has been set.
func (o *ActivateUserKeyRequest) GetUserKeysOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserKeys, true
}

// SetUserKeys sets field value
func (o *ActivateUserKeyRequest) SetUserKeys(v []interface{}) {
	o.UserKeys = v
}

func (o ActivateUserKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivateUserKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private_key"] = o.PrivateKey
	toSerialize["user_keys"] = o.UserKeys

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ActivateUserKeyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private_key",
		"user_keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivateUserKeyRequest := _ActivateUserKeyRequest{}

	err = json.Unmarshal(data, &varActivateUserKeyRequest)

	if err != nil {
		return err
	}

	*o = ActivateUserKeyRequest(varActivateUserKeyRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "private_key")
		delete(additionalProperties, "user_keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActivateUserKeyRequest struct {
	value *ActivateUserKeyRequest
	isSet bool
}

func (v NullableActivateUserKeyRequest) Get() *ActivateUserKeyRequest {
	return v.value
}

func (v *NullableActivateUserKeyRequest) Set(val *ActivateUserKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateUserKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateUserKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateUserKeyRequest(val *ActivateUserKeyRequest) *NullableActivateUserKeyRequest {
	return &NullableActivateUserKeyRequest{value: val, isSet: true}
}

func (v NullableActivateUserKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateUserKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
