/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Asset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Asset{}

// Asset Adds support for custom fields and tags.
type Asset struct {
	Id      int32  `json:"id"`
	Url     string `json:"url"`
	Display string `json:"display"`
	// Can be used to quickly identify a particular asset
	Name *string `json:"name,omitempty"`
	// Identifier assigned by owner
	AssetTag NullableString `json:"asset_tag,omitempty"`
	// Identifier assigned by manufacturer
	Serial            NullableString                  `json:"serial,omitempty"`
	Status            AssetStatus                     `json:"status"`
	Kind              string                          `json:"kind"`
	DeviceType        NullableNestedDeviceType        `json:"device_type,omitempty"`
	Device            NullableNestedDevice            `json:"device,omitempty"`
	ModuleType        NullableNestedModuleType        `json:"module_type,omitempty"`
	Module            NullableNestedModule            `json:"module,omitempty"`
	InventoryitemType NullableNestedInventoryItemType `json:"inventoryitem_type,omitempty"`
	Inventoryitem     NullableNestedInventoryItem     `json:"inventoryitem,omitempty"`
	Tenant            NullableNestedTenant            `json:"tenant,omitempty"`
	Contact           NullableNestedContact           `json:"contact,omitempty"`
	StorageLocation   NullableNestedLocation          `json:"storage_location,omitempty"`
	Owner             NullableNestedTenant            `json:"owner,omitempty"`
	Delivery          NullableNestedDelivery          `json:"delivery,omitempty"`
	Purchase          NullableNestedPurchase          `json:"purchase,omitempty"`
	// First date warranty for this asset is valid
	WarrantyStart NullableString `json:"warranty_start,omitempty"`
	// Last date warranty for this asset is valid
	WarrantyEnd          NullableString         `json:"warranty_end,omitempty"`
	Comments             *string                `json:"comments,omitempty"`
	Tags                 []NestedTag            `json:"tags,omitempty"`
	CustomFields         map[string]interface{} `json:"custom_fields,omitempty"`
	Created              NullableTime           `json:"created"`
	LastUpdated          NullableTime           `json:"last_updated"`
	AdditionalProperties map[string]interface{}
}

type _Asset Asset

// NewAsset instantiates a new Asset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsset(id int32, url string, display string, status AssetStatus, kind string, created NullableTime, lastUpdated NullableTime) *Asset {
	this := Asset{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.Status = status
	this.Kind = kind
	this.Created = created
	this.LastUpdated = lastUpdated
	return &this
}

// NewAssetWithDefaults instantiates a new Asset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetWithDefaults() *Asset {
	this := Asset{}
	return &this
}

// GetId returns the Id field value
func (o *Asset) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Asset) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Asset) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Asset) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Asset) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Asset) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *Asset) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Asset) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Asset) SetDisplay(v string) {
	o.Display = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Asset) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Asset) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Asset) SetName(v string) {
	o.Name = &v
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetAssetTag() string {
	if o == nil || IsNil(o.AssetTag.Get()) {
		var ret string
		return ret
	}
	return *o.AssetTag.Get()
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetAssetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssetTag.Get(), o.AssetTag.IsSet()
}

// HasAssetTag returns a boolean if a field has been set.
func (o *Asset) HasAssetTag() bool {
	if o != nil && o.AssetTag.IsSet() {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given NullableString and assigns it to the AssetTag field.
func (o *Asset) SetAssetTag(v string) {
	o.AssetTag.Set(&v)
}

// SetAssetTagNil sets the value for AssetTag to be an explicit nil
func (o *Asset) SetAssetTagNil() {
	o.AssetTag.Set(nil)
}

// UnsetAssetTag ensures that no value is present for AssetTag, not even an explicit nil
func (o *Asset) UnsetAssetTag() {
	o.AssetTag.Unset()
}

// GetSerial returns the Serial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetSerial() string {
	if o == nil || IsNil(o.Serial.Get()) {
		var ret string
		return ret
	}
	return *o.Serial.Get()
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Serial.Get(), o.Serial.IsSet()
}

// HasSerial returns a boolean if a field has been set.
func (o *Asset) HasSerial() bool {
	if o != nil && o.Serial.IsSet() {
		return true
	}

	return false
}

// SetSerial gets a reference to the given NullableString and assigns it to the Serial field.
func (o *Asset) SetSerial(v string) {
	o.Serial.Set(&v)
}

// SetSerialNil sets the value for Serial to be an explicit nil
func (o *Asset) SetSerialNil() {
	o.Serial.Set(nil)
}

// UnsetSerial ensures that no value is present for Serial, not even an explicit nil
func (o *Asset) UnsetSerial() {
	o.Serial.Unset()
}

// GetStatus returns the Status field value
func (o *Asset) GetStatus() AssetStatus {
	if o == nil {
		var ret AssetStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Asset) GetStatusOk() (*AssetStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Asset) SetStatus(v AssetStatus) {
	o.Status = v
}

// GetKind returns the Kind field value
func (o *Asset) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Asset) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Asset) SetKind(v string) {
	o.Kind = v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetDeviceType() NestedDeviceType {
	if o == nil || IsNil(o.DeviceType.Get()) {
		var ret NestedDeviceType
		return ret
	}
	return *o.DeviceType.Get()
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetDeviceTypeOk() (*NestedDeviceType, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceType.Get(), o.DeviceType.IsSet()
}

// HasDeviceType returns a boolean if a field has been set.
func (o *Asset) HasDeviceType() bool {
	if o != nil && o.DeviceType.IsSet() {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given NullableNestedDeviceType and assigns it to the DeviceType field.
func (o *Asset) SetDeviceType(v NestedDeviceType) {
	o.DeviceType.Set(&v)
}

// SetDeviceTypeNil sets the value for DeviceType to be an explicit nil
func (o *Asset) SetDeviceTypeNil() {
	o.DeviceType.Set(nil)
}

// UnsetDeviceType ensures that no value is present for DeviceType, not even an explicit nil
func (o *Asset) UnsetDeviceType() {
	o.DeviceType.Unset()
}

// GetDevice returns the Device field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetDevice() NestedDevice {
	if o == nil || IsNil(o.Device.Get()) {
		var ret NestedDevice
		return ret
	}
	return *o.Device.Get()
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetDeviceOk() (*NestedDevice, bool) {
	if o == nil {
		return nil, false
	}
	return o.Device.Get(), o.Device.IsSet()
}

// HasDevice returns a boolean if a field has been set.
func (o *Asset) HasDevice() bool {
	if o != nil && o.Device.IsSet() {
		return true
	}

	return false
}

// SetDevice gets a reference to the given NullableNestedDevice and assigns it to the Device field.
func (o *Asset) SetDevice(v NestedDevice) {
	o.Device.Set(&v)
}

// SetDeviceNil sets the value for Device to be an explicit nil
func (o *Asset) SetDeviceNil() {
	o.Device.Set(nil)
}

// UnsetDevice ensures that no value is present for Device, not even an explicit nil
func (o *Asset) UnsetDevice() {
	o.Device.Unset()
}

// GetModuleType returns the ModuleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetModuleType() NestedModuleType {
	if o == nil || IsNil(o.ModuleType.Get()) {
		var ret NestedModuleType
		return ret
	}
	return *o.ModuleType.Get()
}

// GetModuleTypeOk returns a tuple with the ModuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetModuleTypeOk() (*NestedModuleType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModuleType.Get(), o.ModuleType.IsSet()
}

// HasModuleType returns a boolean if a field has been set.
func (o *Asset) HasModuleType() bool {
	if o != nil && o.ModuleType.IsSet() {
		return true
	}

	return false
}

// SetModuleType gets a reference to the given NullableNestedModuleType and assigns it to the ModuleType field.
func (o *Asset) SetModuleType(v NestedModuleType) {
	o.ModuleType.Set(&v)
}

// SetModuleTypeNil sets the value for ModuleType to be an explicit nil
func (o *Asset) SetModuleTypeNil() {
	o.ModuleType.Set(nil)
}

// UnsetModuleType ensures that no value is present for ModuleType, not even an explicit nil
func (o *Asset) UnsetModuleType() {
	o.ModuleType.Unset()
}

// GetModule returns the Module field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetModule() NestedModule {
	if o == nil || IsNil(o.Module.Get()) {
		var ret NestedModule
		return ret
	}
	return *o.Module.Get()
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetModuleOk() (*NestedModule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Module.Get(), o.Module.IsSet()
}

// HasModule returns a boolean if a field has been set.
func (o *Asset) HasModule() bool {
	if o != nil && o.Module.IsSet() {
		return true
	}

	return false
}

// SetModule gets a reference to the given NullableNestedModule and assigns it to the Module field.
func (o *Asset) SetModule(v NestedModule) {
	o.Module.Set(&v)
}

// SetModuleNil sets the value for Module to be an explicit nil
func (o *Asset) SetModuleNil() {
	o.Module.Set(nil)
}

// UnsetModule ensures that no value is present for Module, not even an explicit nil
func (o *Asset) UnsetModule() {
	o.Module.Unset()
}

// GetInventoryitemType returns the InventoryitemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetInventoryitemType() NestedInventoryItemType {
	if o == nil || IsNil(o.InventoryitemType.Get()) {
		var ret NestedInventoryItemType
		return ret
	}
	return *o.InventoryitemType.Get()
}

// GetInventoryitemTypeOk returns a tuple with the InventoryitemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetInventoryitemTypeOk() (*NestedInventoryItemType, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryitemType.Get(), o.InventoryitemType.IsSet()
}

// HasInventoryitemType returns a boolean if a field has been set.
func (o *Asset) HasInventoryitemType() bool {
	if o != nil && o.InventoryitemType.IsSet() {
		return true
	}

	return false
}

// SetInventoryitemType gets a reference to the given NullableNestedInventoryItemType and assigns it to the InventoryitemType field.
func (o *Asset) SetInventoryitemType(v NestedInventoryItemType) {
	o.InventoryitemType.Set(&v)
}

// SetInventoryitemTypeNil sets the value for InventoryitemType to be an explicit nil
func (o *Asset) SetInventoryitemTypeNil() {
	o.InventoryitemType.Set(nil)
}

// UnsetInventoryitemType ensures that no value is present for InventoryitemType, not even an explicit nil
func (o *Asset) UnsetInventoryitemType() {
	o.InventoryitemType.Unset()
}

// GetInventoryitem returns the Inventoryitem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetInventoryitem() NestedInventoryItem {
	if o == nil || IsNil(o.Inventoryitem.Get()) {
		var ret NestedInventoryItem
		return ret
	}
	return *o.Inventoryitem.Get()
}

// GetInventoryitemOk returns a tuple with the Inventoryitem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetInventoryitemOk() (*NestedInventoryItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inventoryitem.Get(), o.Inventoryitem.IsSet()
}

// HasInventoryitem returns a boolean if a field has been set.
func (o *Asset) HasInventoryitem() bool {
	if o != nil && o.Inventoryitem.IsSet() {
		return true
	}

	return false
}

// SetInventoryitem gets a reference to the given NullableNestedInventoryItem and assigns it to the Inventoryitem field.
func (o *Asset) SetInventoryitem(v NestedInventoryItem) {
	o.Inventoryitem.Set(&v)
}

// SetInventoryitemNil sets the value for Inventoryitem to be an explicit nil
func (o *Asset) SetInventoryitemNil() {
	o.Inventoryitem.Set(nil)
}

// UnsetInventoryitem ensures that no value is present for Inventoryitem, not even an explicit nil
func (o *Asset) UnsetInventoryitem() {
	o.Inventoryitem.Unset()
}

// GetTenant returns the Tenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetTenant() NestedTenant {
	if o == nil || IsNil(o.Tenant.Get()) {
		var ret NestedTenant
		return ret
	}
	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetTenantOk() (*NestedTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// HasTenant returns a boolean if a field has been set.
func (o *Asset) HasTenant() bool {
	if o != nil && o.Tenant.IsSet() {
		return true
	}

	return false
}

// SetTenant gets a reference to the given NullableNestedTenant and assigns it to the Tenant field.
func (o *Asset) SetTenant(v NestedTenant) {
	o.Tenant.Set(&v)
}

// SetTenantNil sets the value for Tenant to be an explicit nil
func (o *Asset) SetTenantNil() {
	o.Tenant.Set(nil)
}

// UnsetTenant ensures that no value is present for Tenant, not even an explicit nil
func (o *Asset) UnsetTenant() {
	o.Tenant.Unset()
}

// GetContact returns the Contact field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetContact() NestedContact {
	if o == nil || IsNil(o.Contact.Get()) {
		var ret NestedContact
		return ret
	}
	return *o.Contact.Get()
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetContactOk() (*NestedContact, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contact.Get(), o.Contact.IsSet()
}

// HasContact returns a boolean if a field has been set.
func (o *Asset) HasContact() bool {
	if o != nil && o.Contact.IsSet() {
		return true
	}

	return false
}

// SetContact gets a reference to the given NullableNestedContact and assigns it to the Contact field.
func (o *Asset) SetContact(v NestedContact) {
	o.Contact.Set(&v)
}

// SetContactNil sets the value for Contact to be an explicit nil
func (o *Asset) SetContactNil() {
	o.Contact.Set(nil)
}

// UnsetContact ensures that no value is present for Contact, not even an explicit nil
func (o *Asset) UnsetContact() {
	o.Contact.Unset()
}

// GetStorageLocation returns the StorageLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetStorageLocation() NestedLocation {
	if o == nil || IsNil(o.StorageLocation.Get()) {
		var ret NestedLocation
		return ret
	}
	return *o.StorageLocation.Get()
}

// GetStorageLocationOk returns a tuple with the StorageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetStorageLocationOk() (*NestedLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageLocation.Get(), o.StorageLocation.IsSet()
}

// HasStorageLocation returns a boolean if a field has been set.
func (o *Asset) HasStorageLocation() bool {
	if o != nil && o.StorageLocation.IsSet() {
		return true
	}

	return false
}

// SetStorageLocation gets a reference to the given NullableNestedLocation and assigns it to the StorageLocation field.
func (o *Asset) SetStorageLocation(v NestedLocation) {
	o.StorageLocation.Set(&v)
}

// SetStorageLocationNil sets the value for StorageLocation to be an explicit nil
func (o *Asset) SetStorageLocationNil() {
	o.StorageLocation.Set(nil)
}

// UnsetStorageLocation ensures that no value is present for StorageLocation, not even an explicit nil
func (o *Asset) UnsetStorageLocation() {
	o.StorageLocation.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetOwner() NestedTenant {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret NestedTenant
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetOwnerOk() (*NestedTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *Asset) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableNestedTenant and assigns it to the Owner field.
func (o *Asset) SetOwner(v NestedTenant) {
	o.Owner.Set(&v)
}

// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *Asset) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *Asset) UnsetOwner() {
	o.Owner.Unset()
}

// GetDelivery returns the Delivery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetDelivery() NestedDelivery {
	if o == nil || IsNil(o.Delivery.Get()) {
		var ret NestedDelivery
		return ret
	}
	return *o.Delivery.Get()
}

// GetDeliveryOk returns a tuple with the Delivery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetDeliveryOk() (*NestedDelivery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Delivery.Get(), o.Delivery.IsSet()
}

// HasDelivery returns a boolean if a field has been set.
func (o *Asset) HasDelivery() bool {
	if o != nil && o.Delivery.IsSet() {
		return true
	}

	return false
}

// SetDelivery gets a reference to the given NullableNestedDelivery and assigns it to the Delivery field.
func (o *Asset) SetDelivery(v NestedDelivery) {
	o.Delivery.Set(&v)
}

// SetDeliveryNil sets the value for Delivery to be an explicit nil
func (o *Asset) SetDeliveryNil() {
	o.Delivery.Set(nil)
}

// UnsetDelivery ensures that no value is present for Delivery, not even an explicit nil
func (o *Asset) UnsetDelivery() {
	o.Delivery.Unset()
}

// GetPurchase returns the Purchase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetPurchase() NestedPurchase {
	if o == nil || IsNil(o.Purchase.Get()) {
		var ret NestedPurchase
		return ret
	}
	return *o.Purchase.Get()
}

// GetPurchaseOk returns a tuple with the Purchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetPurchaseOk() (*NestedPurchase, bool) {
	if o == nil {
		return nil, false
	}
	return o.Purchase.Get(), o.Purchase.IsSet()
}

// HasPurchase returns a boolean if a field has been set.
func (o *Asset) HasPurchase() bool {
	if o != nil && o.Purchase.IsSet() {
		return true
	}

	return false
}

// SetPurchase gets a reference to the given NullableNestedPurchase and assigns it to the Purchase field.
func (o *Asset) SetPurchase(v NestedPurchase) {
	o.Purchase.Set(&v)
}

// SetPurchaseNil sets the value for Purchase to be an explicit nil
func (o *Asset) SetPurchaseNil() {
	o.Purchase.Set(nil)
}

// UnsetPurchase ensures that no value is present for Purchase, not even an explicit nil
func (o *Asset) UnsetPurchase() {
	o.Purchase.Unset()
}

// GetWarrantyStart returns the WarrantyStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetWarrantyStart() string {
	if o == nil || IsNil(o.WarrantyStart.Get()) {
		var ret string
		return ret
	}
	return *o.WarrantyStart.Get()
}

// GetWarrantyStartOk returns a tuple with the WarrantyStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetWarrantyStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WarrantyStart.Get(), o.WarrantyStart.IsSet()
}

// HasWarrantyStart returns a boolean if a field has been set.
func (o *Asset) HasWarrantyStart() bool {
	if o != nil && o.WarrantyStart.IsSet() {
		return true
	}

	return false
}

// SetWarrantyStart gets a reference to the given NullableString and assigns it to the WarrantyStart field.
func (o *Asset) SetWarrantyStart(v string) {
	o.WarrantyStart.Set(&v)
}

// SetWarrantyStartNil sets the value for WarrantyStart to be an explicit nil
func (o *Asset) SetWarrantyStartNil() {
	o.WarrantyStart.Set(nil)
}

// UnsetWarrantyStart ensures that no value is present for WarrantyStart, not even an explicit nil
func (o *Asset) UnsetWarrantyStart() {
	o.WarrantyStart.Unset()
}

// GetWarrantyEnd returns the WarrantyEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetWarrantyEnd() string {
	if o == nil || IsNil(o.WarrantyEnd.Get()) {
		var ret string
		return ret
	}
	return *o.WarrantyEnd.Get()
}

// GetWarrantyEndOk returns a tuple with the WarrantyEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetWarrantyEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WarrantyEnd.Get(), o.WarrantyEnd.IsSet()
}

// HasWarrantyEnd returns a boolean if a field has been set.
func (o *Asset) HasWarrantyEnd() bool {
	if o != nil && o.WarrantyEnd.IsSet() {
		return true
	}

	return false
}

// SetWarrantyEnd gets a reference to the given NullableString and assigns it to the WarrantyEnd field.
func (o *Asset) SetWarrantyEnd(v string) {
	o.WarrantyEnd.Set(&v)
}

// SetWarrantyEndNil sets the value for WarrantyEnd to be an explicit nil
func (o *Asset) SetWarrantyEndNil() {
	o.WarrantyEnd.Set(nil)
}

// UnsetWarrantyEnd ensures that no value is present for WarrantyEnd, not even an explicit nil
func (o *Asset) UnsetWarrantyEnd() {
	o.WarrantyEnd.Unset()
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Asset) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Asset) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *Asset) SetComments(v string) {
	o.Comments = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Asset) GetTags() []NestedTag {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Asset) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *Asset) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Asset) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Asset) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Asset) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Asset) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Asset) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Asset) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *Asset) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

func (o Asset) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Asset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.AssetTag.IsSet() {
		toSerialize["asset_tag"] = o.AssetTag.Get()
	}
	if o.Serial.IsSet() {
		toSerialize["serial"] = o.Serial.Get()
	}
	toSerialize["status"] = o.Status
	toSerialize["kind"] = o.Kind
	if o.DeviceType.IsSet() {
		toSerialize["device_type"] = o.DeviceType.Get()
	}
	if o.Device.IsSet() {
		toSerialize["device"] = o.Device.Get()
	}
	if o.ModuleType.IsSet() {
		toSerialize["module_type"] = o.ModuleType.Get()
	}
	if o.Module.IsSet() {
		toSerialize["module"] = o.Module.Get()
	}
	if o.InventoryitemType.IsSet() {
		toSerialize["inventoryitem_type"] = o.InventoryitemType.Get()
	}
	if o.Inventoryitem.IsSet() {
		toSerialize["inventoryitem"] = o.Inventoryitem.Get()
	}
	if o.Tenant.IsSet() {
		toSerialize["tenant"] = o.Tenant.Get()
	}
	if o.Contact.IsSet() {
		toSerialize["contact"] = o.Contact.Get()
	}
	if o.StorageLocation.IsSet() {
		toSerialize["storage_location"] = o.StorageLocation.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.Delivery.IsSet() {
		toSerialize["delivery"] = o.Delivery.Get()
	}
	if o.Purchase.IsSet() {
		toSerialize["purchase"] = o.Purchase.Get()
	}
	if o.WarrantyStart.IsSet() {
		toSerialize["warranty_start"] = o.WarrantyStart.Get()
	}
	if o.WarrantyEnd.IsSet() {
		toSerialize["warranty_end"] = o.WarrantyEnd.Get()
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Asset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"status",
		"kind",
		"created",
		"last_updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsset := _Asset{}

	err = json.Unmarshal(data, &varAsset)

	if err != nil {
		return err
	}

	*o = Asset(varAsset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "name")
		delete(additionalProperties, "asset_tag")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "status")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "device")
		delete(additionalProperties, "module_type")
		delete(additionalProperties, "module")
		delete(additionalProperties, "inventoryitem_type")
		delete(additionalProperties, "inventoryitem")
		delete(additionalProperties, "tenant")
		delete(additionalProperties, "contact")
		delete(additionalProperties, "storage_location")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "delivery")
		delete(additionalProperties, "purchase")
		delete(additionalProperties, "warranty_start")
		delete(additionalProperties, "warranty_end")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsset struct {
	value *Asset
	isSet bool
}

func (v NullableAsset) Get() *Asset {
	return v.value
}

func (v *NullableAsset) Set(val *Asset) {
	v.value = val
	v.isSet = true
}

func (v NullableAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsset(val *Asset) *NullableAsset {
	return &NullableAsset{value: val, isSet: true}
}

func (v NullableAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
