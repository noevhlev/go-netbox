/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the BGPPeerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BGPPeerGroup{}

// BGPPeerGroup Adds support for custom fields and tags.
type BGPPeerGroup struct {
	Id                   int32    `json:"id"`
	Display              string   `json:"display"`
	Name                 string   `json:"name"`
	Description          string   `json:"description"`
	ImportPolicies       []*int32 `json:"import_policies,omitempty"`
	ExportPolicies       []*int32 `json:"export_policies,omitempty"`
	Comments             *string  `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BGPPeerGroup BGPPeerGroup

// NewBGPPeerGroup instantiates a new BGPPeerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBGPPeerGroup(id int32, display string, name string, description string) *BGPPeerGroup {
	this := BGPPeerGroup{}
	this.Id = id
	this.Display = display
	this.Name = name
	this.Description = description
	return &this
}

// NewBGPPeerGroupWithDefaults instantiates a new BGPPeerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBGPPeerGroupWithDefaults() *BGPPeerGroup {
	this := BGPPeerGroup{}
	return &this
}

// GetId returns the Id field value
func (o *BGPPeerGroup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BGPPeerGroup) SetId(v int32) {
	o.Id = v
}

// GetDisplay returns the Display field value
func (o *BGPPeerGroup) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *BGPPeerGroup) SetDisplay(v string) {
	o.Display = v
}

// GetName returns the Name field value
func (o *BGPPeerGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BGPPeerGroup) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *BGPPeerGroup) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *BGPPeerGroup) SetDescription(v string) {
	o.Description = v
}

// GetImportPolicies returns the ImportPolicies field value if set, zero value otherwise.
func (o *BGPPeerGroup) GetImportPolicies() []*int32 {
	if o == nil || IsNil(o.ImportPolicies) {
		var ret []*int32
		return ret
	}
	return o.ImportPolicies
}

// GetImportPoliciesOk returns a tuple with the ImportPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetImportPoliciesOk() ([]*int32, bool) {
	if o == nil || IsNil(o.ImportPolicies) {
		return nil, false
	}
	return o.ImportPolicies, true
}

// HasImportPolicies returns a boolean if a field has been set.
func (o *BGPPeerGroup) HasImportPolicies() bool {
	if o != nil && !IsNil(o.ImportPolicies) {
		return true
	}

	return false
}

// SetImportPolicies gets a reference to the given []*int32 and assigns it to the ImportPolicies field.
func (o *BGPPeerGroup) SetImportPolicies(v []*int32) {
	o.ImportPolicies = v
}

// GetExportPolicies returns the ExportPolicies field value if set, zero value otherwise.
func (o *BGPPeerGroup) GetExportPolicies() []*int32 {
	if o == nil || IsNil(o.ExportPolicies) {
		var ret []*int32
		return ret
	}
	return o.ExportPolicies
}

// GetExportPoliciesOk returns a tuple with the ExportPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetExportPoliciesOk() ([]*int32, bool) {
	if o == nil || IsNil(o.ExportPolicies) {
		return nil, false
	}
	return o.ExportPolicies, true
}

// HasExportPolicies returns a boolean if a field has been set.
func (o *BGPPeerGroup) HasExportPolicies() bool {
	if o != nil && !IsNil(o.ExportPolicies) {
		return true
	}

	return false
}

// SetExportPolicies gets a reference to the given []*int32 and assigns it to the ExportPolicies field.
func (o *BGPPeerGroup) SetExportPolicies(v []*int32) {
	o.ExportPolicies = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *BGPPeerGroup) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BGPPeerGroup) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *BGPPeerGroup) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *BGPPeerGroup) SetComments(v string) {
	o.Comments = &v
}

func (o BGPPeerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BGPPeerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["display"] = o.Display
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.ImportPolicies) {
		toSerialize["import_policies"] = o.ImportPolicies
	}
	if !IsNil(o.ExportPolicies) {
		toSerialize["export_policies"] = o.ExportPolicies
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BGPPeerGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"display",
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBGPPeerGroup := _BGPPeerGroup{}

	err = json.Unmarshal(data, &varBGPPeerGroup)

	if err != nil {
		return err
	}

	*o = BGPPeerGroup(varBGPPeerGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "display")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "import_policies")
		delete(additionalProperties, "export_policies")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBGPPeerGroup struct {
	value *BGPPeerGroup
	isSet bool
}

func (v NullableBGPPeerGroup) Get() *BGPPeerGroup {
	return v.value
}

func (v *NullableBGPPeerGroup) Set(val *BGPPeerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBGPPeerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBGPPeerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBGPPeerGroup(val *BGPPeerGroup) *NullableBGPPeerGroup {
	return &NullableBGPPeerGroup{value: val, isSet: true}
}

func (v NullableBGPPeerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBGPPeerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
