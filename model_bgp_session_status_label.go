/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// BGPSessionStatusLabel the model 'BGPSessionStatusLabel'
type BGPSessionStatusLabel string

// List of BGPSession_status_label
const (
	BGPSESSIONSTATUSLABEL_OFFLINE BGPSessionStatusLabel = "Offline"
	BGPSESSIONSTATUSLABEL_ACTIVE  BGPSessionStatusLabel = "Active"
	BGPSESSIONSTATUSLABEL_PLANNED BGPSessionStatusLabel = "Planned"
	BGPSESSIONSTATUSLABEL_FAILED  BGPSessionStatusLabel = "Failed"
)

// All allowed values of BGPSessionStatusLabel enum
var AllowedBGPSessionStatusLabelEnumValues = []BGPSessionStatusLabel{
	"Offline",
	"Active",
	"Planned",
	"Failed",
}

func (v *BGPSessionStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BGPSessionStatusLabel(value)
	for _, existing := range AllowedBGPSessionStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BGPSessionStatusLabel", value)
}

// NewBGPSessionStatusLabelFromValue returns a pointer to a valid BGPSessionStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBGPSessionStatusLabelFromValue(v string) (*BGPSessionStatusLabel, error) {
	ev := BGPSessionStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BGPSessionStatusLabel: valid values are %v", v, AllowedBGPSessionStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BGPSessionStatusLabel) IsValid() bool {
	for _, existing := range AllowedBGPSessionStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BGPSession_status_label value
func (v BGPSessionStatusLabel) Ptr() *BGPSessionStatusLabel {
	return &v
}

type NullableBGPSessionStatusLabel struct {
	value *BGPSessionStatusLabel
	isSet bool
}

func (v NullableBGPSessionStatusLabel) Get() *BGPSessionStatusLabel {
	return v.value
}

func (v *NullableBGPSessionStatusLabel) Set(val *BGPSessionStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableBGPSessionStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableBGPSessionStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBGPSessionStatusLabel(val *BGPSessionStatusLabel) *NullableBGPSessionStatusLabel {
	return &NullableBGPSessionStatusLabel{value: val, isSet: true}
}

func (v NullableBGPSessionStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBGPSessionStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
