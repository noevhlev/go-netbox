/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the BriefPrefixRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BriefPrefixRequest{}

// BriefPrefixRequest Adds support for custom fields and tags.
type BriefPrefixRequest struct {
	Prefix               string  `json:"prefix"`
	Description          *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BriefPrefixRequest BriefPrefixRequest

// NewBriefPrefixRequest instantiates a new BriefPrefixRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBriefPrefixRequest(prefix string) *BriefPrefixRequest {
	this := BriefPrefixRequest{}
	this.Prefix = prefix
	return &this
}

// NewBriefPrefixRequestWithDefaults instantiates a new BriefPrefixRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBriefPrefixRequestWithDefaults() *BriefPrefixRequest {
	this := BriefPrefixRequest{}
	return &this
}

// GetPrefix returns the Prefix field value
func (o *BriefPrefixRequest) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *BriefPrefixRequest) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *BriefPrefixRequest) SetPrefix(v string) {
	o.Prefix = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BriefPrefixRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefPrefixRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BriefPrefixRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BriefPrefixRequest) SetDescription(v string) {
	o.Description = &v
}

func (o BriefPrefixRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BriefPrefixRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prefix"] = o.Prefix
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BriefPrefixRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBriefPrefixRequest := _BriefPrefixRequest{}

	err = json.Unmarshal(data, &varBriefPrefixRequest)

	if err != nil {
		return err
	}

	*o = BriefPrefixRequest(varBriefPrefixRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBriefPrefixRequest struct {
	value *BriefPrefixRequest
	isSet bool
}

func (v NullableBriefPrefixRequest) Get() *BriefPrefixRequest {
	return v.value
}

func (v *NullableBriefPrefixRequest) Set(val *BriefPrefixRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefPrefixRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefPrefixRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefPrefixRequest(val *BriefPrefixRequest) *NullableBriefPrefixRequest {
	return &NullableBriefPrefixRequest{value: val, isSet: true}
}

func (v NullableBriefPrefixRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefPrefixRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
