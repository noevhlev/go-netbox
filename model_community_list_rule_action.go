/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CommunityListRuleAction * `permit` - Permit * `deny` - Deny
type CommunityListRuleAction string

// List of CommunityListRule_action
const (
	COMMUNITYLISTRULEACTION_PERMIT CommunityListRuleAction = "permit"
	COMMUNITYLISTRULEACTION_DENY   CommunityListRuleAction = "deny"
)

// All allowed values of CommunityListRuleAction enum
var AllowedCommunityListRuleActionEnumValues = []CommunityListRuleAction{
	"permit",
	"deny",
}

func (v *CommunityListRuleAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommunityListRuleAction(value)
	for _, existing := range AllowedCommunityListRuleActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommunityListRuleAction", value)
}

// NewCommunityListRuleActionFromValue returns a pointer to a valid CommunityListRuleAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommunityListRuleActionFromValue(v string) (*CommunityListRuleAction, error) {
	ev := CommunityListRuleAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommunityListRuleAction: valid values are %v", v, AllowedCommunityListRuleActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommunityListRuleAction) IsValid() bool {
	for _, existing := range AllowedCommunityListRuleActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommunityListRule_action value
func (v CommunityListRuleAction) Ptr() *CommunityListRuleAction {
	return &v
}

type NullableCommunityListRuleAction struct {
	value *CommunityListRuleAction
	isSet bool
}

func (v NullableCommunityListRuleAction) Get() *CommunityListRuleAction {
	return v.value
}

func (v *NullableCommunityListRuleAction) Set(val *CommunityListRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunityListRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunityListRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunityListRuleAction(val *CommunityListRuleAction) *NullableCommunityListRuleAction {
	return &NullableCommunityListRuleAction{value: val, isSet: true}
}

func (v NullableCommunityListRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunityListRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
