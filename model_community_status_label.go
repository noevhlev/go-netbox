/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CommunityStatusLabel the model 'CommunityStatusLabel'
type CommunityStatusLabel string

// List of Community_status_label
const (
	COMMUNITYSTATUSLABEL_ACTIVE     CommunityStatusLabel = "Active"
	COMMUNITYSTATUSLABEL_RESERVED   CommunityStatusLabel = "Reserved"
	COMMUNITYSTATUSLABEL_DEPRECATED CommunityStatusLabel = "Deprecated"
)

// All allowed values of CommunityStatusLabel enum
var AllowedCommunityStatusLabelEnumValues = []CommunityStatusLabel{
	"Active",
	"Reserved",
	"Deprecated",
}

func (v *CommunityStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommunityStatusLabel(value)
	for _, existing := range AllowedCommunityStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommunityStatusLabel", value)
}

// NewCommunityStatusLabelFromValue returns a pointer to a valid CommunityStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommunityStatusLabelFromValue(v string) (*CommunityStatusLabel, error) {
	ev := CommunityStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommunityStatusLabel: valid values are %v", v, AllowedCommunityStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommunityStatusLabel) IsValid() bool {
	for _, existing := range AllowedCommunityStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Community_status_label value
func (v CommunityStatusLabel) Ptr() *CommunityStatusLabel {
	return &v
}

type NullableCommunityStatusLabel struct {
	value *CommunityStatusLabel
	isSet bool
}

func (v NullableCommunityStatusLabel) Get() *CommunityStatusLabel {
	return v.value
}

func (v *NullableCommunityStatusLabel) Set(val *CommunityStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunityStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunityStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunityStatusLabel(val *CommunityStatusLabel) *NullableCommunityStatusLabel {
	return &NullableCommunityStatusLabel{value: val, isSet: true}
}

func (v NullableCommunityStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunityStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
