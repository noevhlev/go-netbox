/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the NestedCommunity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedCommunity{}

// NestedCommunity Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
type NestedCommunity struct {
	Id                   int32  `json:"id"`
	Url                  string `json:"url"`
	Display              string `json:"display"`
	Value                string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _NestedCommunity NestedCommunity

// NewNestedCommunity instantiates a new NestedCommunity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedCommunity(id int32, url string, display string, value string) *NestedCommunity {
	this := NestedCommunity{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.Value = value
	return &this
}

// NewNestedCommunityWithDefaults instantiates a new NestedCommunity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedCommunityWithDefaults() *NestedCommunity {
	this := NestedCommunity{}
	return &this
}

// GetId returns the Id field value
func (o *NestedCommunity) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NestedCommunity) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NestedCommunity) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *NestedCommunity) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NestedCommunity) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NestedCommunity) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *NestedCommunity) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *NestedCommunity) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *NestedCommunity) SetDisplay(v string) {
	o.Display = v
}

// GetValue returns the Value field value
func (o *NestedCommunity) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *NestedCommunity) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *NestedCommunity) SetValue(v string) {
	o.Value = v
}

func (o NestedCommunity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedCommunity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedCommunity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNestedCommunity := _NestedCommunity{}

	err = json.Unmarshal(data, &varNestedCommunity)

	if err != nil {
		return err
	}

	*o = NestedCommunity(varNestedCommunity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedCommunity struct {
	value *NestedCommunity
	isSet bool
}

func (v NullableNestedCommunity) Get() *NestedCommunity {
	return v.value
}

func (v *NullableNestedCommunity) Set(val *NestedCommunity) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedCommunity) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedCommunity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedCommunity(val *NestedCommunity) *NullableNestedCommunity {
	return &NullableNestedCommunity{value: val, isSet: true}
}

func (v NullableNestedCommunity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedCommunity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
