/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the NestedInventoryItemTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedInventoryItemTypeRequest{}

// NestedInventoryItemTypeRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
type NestedInventoryItemTypeRequest struct {
	Model                string `json:"model"`
	Slug                 string `json:"slug"`
	AdditionalProperties map[string]interface{}
}

type _NestedInventoryItemTypeRequest NestedInventoryItemTypeRequest

// NewNestedInventoryItemTypeRequest instantiates a new NestedInventoryItemTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedInventoryItemTypeRequest(model string, slug string) *NestedInventoryItemTypeRequest {
	this := NestedInventoryItemTypeRequest{}
	this.Model = model
	this.Slug = slug
	return &this
}

// NewNestedInventoryItemTypeRequestWithDefaults instantiates a new NestedInventoryItemTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedInventoryItemTypeRequestWithDefaults() *NestedInventoryItemTypeRequest {
	this := NestedInventoryItemTypeRequest{}
	return &this
}

// GetModel returns the Model field value
func (o *NestedInventoryItemTypeRequest) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *NestedInventoryItemTypeRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *NestedInventoryItemTypeRequest) SetModel(v string) {
	o.Model = v
}

// GetSlug returns the Slug field value
func (o *NestedInventoryItemTypeRequest) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *NestedInventoryItemTypeRequest) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *NestedInventoryItemTypeRequest) SetSlug(v string) {
	o.Slug = v
}

func (o NestedInventoryItemTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedInventoryItemTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	toSerialize["slug"] = o.Slug

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedInventoryItemTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNestedInventoryItemTypeRequest := _NestedInventoryItemTypeRequest{}

	err = json.Unmarshal(data, &varNestedInventoryItemTypeRequest)

	if err != nil {
		return err
	}

	*o = NestedInventoryItemTypeRequest(varNestedInventoryItemTypeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "slug")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedInventoryItemTypeRequest struct {
	value *NestedInventoryItemTypeRequest
	isSet bool
}

func (v NullableNestedInventoryItemTypeRequest) Get() *NestedInventoryItemTypeRequest {
	return v.value
}

func (v *NullableNestedInventoryItemTypeRequest) Set(val *NestedInventoryItemTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedInventoryItemTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedInventoryItemTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedInventoryItemTypeRequest(val *NestedInventoryItemTypeRequest) *NullableNestedInventoryItemTypeRequest {
	return &NullableNestedInventoryItemTypeRequest{value: val, isSet: true}
}

func (v NullableNestedInventoryItemTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedInventoryItemTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
