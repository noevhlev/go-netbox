/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the NestedPurchase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedPurchase{}

// NestedPurchase Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
type NestedPurchase struct {
	Id       int32                `json:"id"`
	Url      string               `json:"url"`
	Display  string               `json:"display"`
	Supplier NestedSupplier       `json:"supplier"`
	Name     string               `json:"name"`
	Status   NestedPurchaseStatus `json:"status"`
	// Date when this purchase was made
	Date                 NullableString `json:"date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NestedPurchase NestedPurchase

// NewNestedPurchase instantiates a new NestedPurchase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedPurchase(id int32, url string, display string, supplier NestedSupplier, name string, status NestedPurchaseStatus) *NestedPurchase {
	this := NestedPurchase{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.Supplier = supplier
	this.Name = name
	this.Status = status
	return &this
}

// NewNestedPurchaseWithDefaults instantiates a new NestedPurchase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedPurchaseWithDefaults() *NestedPurchase {
	this := NestedPurchase{}
	return &this
}

// GetId returns the Id field value
func (o *NestedPurchase) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NestedPurchase) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NestedPurchase) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *NestedPurchase) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NestedPurchase) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NestedPurchase) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *NestedPurchase) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *NestedPurchase) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *NestedPurchase) SetDisplay(v string) {
	o.Display = v
}

// GetSupplier returns the Supplier field value
func (o *NestedPurchase) GetSupplier() NestedSupplier {
	if o == nil {
		var ret NestedSupplier
		return ret
	}

	return o.Supplier
}

// GetSupplierOk returns a tuple with the Supplier field value
// and a boolean to check if the value has been set.
func (o *NestedPurchase) GetSupplierOk() (*NestedSupplier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supplier, true
}

// SetSupplier sets field value
func (o *NestedPurchase) SetSupplier(v NestedSupplier) {
	o.Supplier = v
}

// GetName returns the Name field value
func (o *NestedPurchase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NestedPurchase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NestedPurchase) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *NestedPurchase) GetStatus() NestedPurchaseStatus {
	if o == nil {
		var ret NestedPurchaseStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NestedPurchase) GetStatusOk() (*NestedPurchaseStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NestedPurchase) SetStatus(v NestedPurchaseStatus) {
	o.Status = v
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedPurchase) GetDate() string {
	if o == nil || IsNil(o.Date.Get()) {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedPurchase) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *NestedPurchase) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *NestedPurchase) SetDate(v string) {
	o.Date.Set(&v)
}

// SetDateNil sets the value for Date to be an explicit nil
func (o *NestedPurchase) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *NestedPurchase) UnsetDate() {
	o.Date.Unset()
}

func (o NestedPurchase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedPurchase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["supplier"] = o.Supplier
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedPurchase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"supplier",
		"name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNestedPurchase := _NestedPurchase{}

	err = json.Unmarshal(data, &varNestedPurchase)

	if err != nil {
		return err
	}

	*o = NestedPurchase(varNestedPurchase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "supplier")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedPurchase struct {
	value *NestedPurchase
	isSet bool
}

func (v NullableNestedPurchase) Get() *NestedPurchase {
	return v.value
}

func (v *NullableNestedPurchase) Set(val *NestedPurchase) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedPurchase) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedPurchase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedPurchase(val *NestedPurchase) *NullableNestedPurchase {
	return &NullableNestedPurchase{value: val, isSet: true}
}

func (v NullableNestedPurchase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedPurchase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
