/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// NestedPurchaseStatus Status of purchase  * `open` - Open * `partial` - Partial * `closed` - Closed
type NestedPurchaseStatus string

// List of NestedPurchase_status
const (
	NESTEDPURCHASESTATUS_OPEN    NestedPurchaseStatus = "open"
	NESTEDPURCHASESTATUS_PARTIAL NestedPurchaseStatus = "partial"
	NESTEDPURCHASESTATUS_CLOSED  NestedPurchaseStatus = "closed"
)

// All allowed values of NestedPurchaseStatus enum
var AllowedNestedPurchaseStatusEnumValues = []NestedPurchaseStatus{
	"open",
	"partial",
	"closed",
}

func (v *NestedPurchaseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NestedPurchaseStatus(value)
	for _, existing := range AllowedNestedPurchaseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NestedPurchaseStatus", value)
}

// NewNestedPurchaseStatusFromValue returns a pointer to a valid NestedPurchaseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNestedPurchaseStatusFromValue(v string) (*NestedPurchaseStatus, error) {
	ev := NestedPurchaseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NestedPurchaseStatus: valid values are %v", v, AllowedNestedPurchaseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NestedPurchaseStatus) IsValid() bool {
	for _, existing := range AllowedNestedPurchaseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NestedPurchase_status value
func (v NestedPurchaseStatus) Ptr() *NestedPurchaseStatus {
	return &v
}

type NullableNestedPurchaseStatus struct {
	value *NestedPurchaseStatus
	isSet bool
}

func (v NullableNestedPurchaseStatus) Get() *NestedPurchaseStatus {
	return v.value
}

func (v *NullableNestedPurchaseStatus) Set(val *NestedPurchaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedPurchaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedPurchaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedPurchaseStatus(val *NestedPurchaseStatus) *NullableNestedPurchaseStatus {
	return &NullableNestedPurchaseStatus{value: val, isSet: true}
}

func (v NullableNestedPurchaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedPurchaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
