/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedPrefixListRequestFamily * `ipv4` - IPv4 * `ipv6` - IPv6
type PatchedPrefixListRequestFamily string

// List of PatchedPrefixListRequest_family
const (
	PATCHEDPREFIXLISTREQUESTFAMILY_IPV4 PatchedPrefixListRequestFamily = "ipv4"
	PATCHEDPREFIXLISTREQUESTFAMILY_IPV6 PatchedPrefixListRequestFamily = "ipv6"
)

// All allowed values of PatchedPrefixListRequestFamily enum
var AllowedPatchedPrefixListRequestFamilyEnumValues = []PatchedPrefixListRequestFamily{
	"ipv4",
	"ipv6",
}

func (v *PatchedPrefixListRequestFamily) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedPrefixListRequestFamily(value)
	for _, existing := range AllowedPatchedPrefixListRequestFamilyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedPrefixListRequestFamily", value)
}

// NewPatchedPrefixListRequestFamilyFromValue returns a pointer to a valid PatchedPrefixListRequestFamily
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedPrefixListRequestFamilyFromValue(v string) (*PatchedPrefixListRequestFamily, error) {
	ev := PatchedPrefixListRequestFamily(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedPrefixListRequestFamily: valid values are %v", v, AllowedPatchedPrefixListRequestFamilyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedPrefixListRequestFamily) IsValid() bool {
	for _, existing := range AllowedPatchedPrefixListRequestFamilyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedPrefixListRequest_family value
func (v PatchedPrefixListRequestFamily) Ptr() *PatchedPrefixListRequestFamily {
	return &v
}

type NullablePatchedPrefixListRequestFamily struct {
	value *PatchedPrefixListRequestFamily
	isSet bool
}

func (v NullablePatchedPrefixListRequestFamily) Get() *PatchedPrefixListRequestFamily {
	return v.value
}

func (v *NullablePatchedPrefixListRequestFamily) Set(val *PatchedPrefixListRequestFamily) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedPrefixListRequestFamily) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedPrefixListRequestFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedPrefixListRequestFamily(val *PatchedPrefixListRequestFamily) *NullablePatchedPrefixListRequestFamily {
	return &NullablePatchedPrefixListRequestFamily{value: val, isSet: true}
}

func (v NullablePatchedPrefixListRequestFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedPrefixListRequestFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
