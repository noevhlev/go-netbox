/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// checks if the PatchedUserKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedUserKeyRequest{}

// PatchedUserKeyRequest struct for PatchedUserKeyRequest
type PatchedUserKeyRequest struct {
	PublicKey            *string `json:"public_key,omitempty"`
	PrivateKey           *string `json:"private_key,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedUserKeyRequest PatchedUserKeyRequest

// NewPatchedUserKeyRequest instantiates a new PatchedUserKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedUserKeyRequest() *PatchedUserKeyRequest {
	this := PatchedUserKeyRequest{}
	return &this
}

// NewPatchedUserKeyRequestWithDefaults instantiates a new PatchedUserKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedUserKeyRequestWithDefaults() *PatchedUserKeyRequest {
	this := PatchedUserKeyRequest{}
	return &this
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *PatchedUserKeyRequest) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUserKeyRequest) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *PatchedUserKeyRequest) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *PatchedUserKeyRequest) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *PatchedUserKeyRequest) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUserKeyRequest) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *PatchedUserKeyRequest) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *PatchedUserKeyRequest) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

func (o PatchedUserKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedUserKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedUserKeyRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedUserKeyRequest := _PatchedUserKeyRequest{}

	err = json.Unmarshal(data, &varPatchedUserKeyRequest)

	if err != nil {
		return err
	}

	*o = PatchedUserKeyRequest(varPatchedUserKeyRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "private_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedUserKeyRequest struct {
	value *PatchedUserKeyRequest
	isSet bool
}

func (v NullablePatchedUserKeyRequest) Get() *PatchedUserKeyRequest {
	return v.value
}

func (v *NullablePatchedUserKeyRequest) Set(val *PatchedUserKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedUserKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedUserKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedUserKeyRequest(val *PatchedUserKeyRequest) *NullablePatchedUserKeyRequest {
	return &NullablePatchedUserKeyRequest{value: val, isSet: true}
}

func (v NullablePatchedUserKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedUserKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
