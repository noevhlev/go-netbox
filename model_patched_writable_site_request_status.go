/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableSiteRequestStatus * `planned` - Planned * `staging` - Staging * `active` - Active * `decommissioning` - Decommissioning * `retired` - Retired
type PatchedWritableSiteRequestStatus string

// List of PatchedWritableSiteRequest_status
const (
	PATCHEDWRITABLESITEREQUESTSTATUS_PLANNED         PatchedWritableSiteRequestStatus = "planned"
	PATCHEDWRITABLESITEREQUESTSTATUS_STAGING         PatchedWritableSiteRequestStatus = "staging"
	PATCHEDWRITABLESITEREQUESTSTATUS_ACTIVE          PatchedWritableSiteRequestStatus = "active"
	PATCHEDWRITABLESITEREQUESTSTATUS_DECOMMISSIONING PatchedWritableSiteRequestStatus = "decommissioning"
	PATCHEDWRITABLESITEREQUESTSTATUS_RETIRED         PatchedWritableSiteRequestStatus = "retired"
)

// All allowed values of PatchedWritableSiteRequestStatus enum
var AllowedPatchedWritableSiteRequestStatusEnumValues = []PatchedWritableSiteRequestStatus{
	"planned",
	"staging",
	"active",
	"decommissioning",
	"retired",
}

func (v *PatchedWritableSiteRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableSiteRequestStatus(value)
	for _, existing := range AllowedPatchedWritableSiteRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableSiteRequestStatus", value)
}

// NewPatchedWritableSiteRequestStatusFromValue returns a pointer to a valid PatchedWritableSiteRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableSiteRequestStatusFromValue(v string) (*PatchedWritableSiteRequestStatus, error) {
	ev := PatchedWritableSiteRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableSiteRequestStatus: valid values are %v", v, AllowedPatchedWritableSiteRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableSiteRequestStatus) IsValid() bool {
	for _, existing := range AllowedPatchedWritableSiteRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableSiteRequest_status value
func (v PatchedWritableSiteRequestStatus) Ptr() *PatchedWritableSiteRequestStatus {
	return &v
}

type NullablePatchedWritableSiteRequestStatus struct {
	value *PatchedWritableSiteRequestStatus
	isSet bool
}

func (v NullablePatchedWritableSiteRequestStatus) Get() *PatchedWritableSiteRequestStatus {
	return v.value
}

func (v *NullablePatchedWritableSiteRequestStatus) Set(val *PatchedWritableSiteRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableSiteRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableSiteRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableSiteRequestStatus(val *PatchedWritableSiteRequestStatus) *NullablePatchedWritableSiteRequestStatus {
	return &NullablePatchedWritableSiteRequestStatus{value: val, isSet: true}
}

func (v NullablePatchedWritableSiteRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableSiteRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
