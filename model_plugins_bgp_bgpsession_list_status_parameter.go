/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PluginsBgpBgpsessionListStatusParameter the model 'PluginsBgpBgpsessionListStatusParameter'
type PluginsBgpBgpsessionListStatusParameter string

// List of plugins_bgp_bgpsession_list_status_parameter
const (
	PLUGINSBGPBGPSESSIONLISTSTATUSPARAMETER_ACTIVE  PluginsBgpBgpsessionListStatusParameter = "active"
	PLUGINSBGPBGPSESSIONLISTSTATUSPARAMETER_FAILED  PluginsBgpBgpsessionListStatusParameter = "failed"
	PLUGINSBGPBGPSESSIONLISTSTATUSPARAMETER_OFFLINE PluginsBgpBgpsessionListStatusParameter = "offline"
	PLUGINSBGPBGPSESSIONLISTSTATUSPARAMETER_PLANNED PluginsBgpBgpsessionListStatusParameter = "planned"
)

// All allowed values of PluginsBgpBgpsessionListStatusParameter enum
var AllowedPluginsBgpBgpsessionListStatusParameterEnumValues = []PluginsBgpBgpsessionListStatusParameter{
	"active",
	"failed",
	"offline",
	"planned",
}

func (v *PluginsBgpBgpsessionListStatusParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PluginsBgpBgpsessionListStatusParameter(value)
	for _, existing := range AllowedPluginsBgpBgpsessionListStatusParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PluginsBgpBgpsessionListStatusParameter", value)
}

// NewPluginsBgpBgpsessionListStatusParameterFromValue returns a pointer to a valid PluginsBgpBgpsessionListStatusParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPluginsBgpBgpsessionListStatusParameterFromValue(v string) (*PluginsBgpBgpsessionListStatusParameter, error) {
	ev := PluginsBgpBgpsessionListStatusParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PluginsBgpBgpsessionListStatusParameter: valid values are %v", v, AllowedPluginsBgpBgpsessionListStatusParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PluginsBgpBgpsessionListStatusParameter) IsValid() bool {
	for _, existing := range AllowedPluginsBgpBgpsessionListStatusParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to plugins_bgp_bgpsession_list_status_parameter value
func (v PluginsBgpBgpsessionListStatusParameter) Ptr() *PluginsBgpBgpsessionListStatusParameter {
	return &v
}

type NullablePluginsBgpBgpsessionListStatusParameter struct {
	value *PluginsBgpBgpsessionListStatusParameter
	isSet bool
}

func (v NullablePluginsBgpBgpsessionListStatusParameter) Get() *PluginsBgpBgpsessionListStatusParameter {
	return v.value
}

func (v *NullablePluginsBgpBgpsessionListStatusParameter) Set(val *PluginsBgpBgpsessionListStatusParameter) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginsBgpBgpsessionListStatusParameter) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginsBgpBgpsessionListStatusParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginsBgpBgpsessionListStatusParameter(val *PluginsBgpBgpsessionListStatusParameter) *NullablePluginsBgpBgpsessionListStatusParameter {
	return &NullablePluginsBgpBgpsessionListStatusParameter{value: val, isSet: true}
}

func (v NullablePluginsBgpBgpsessionListStatusParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginsBgpBgpsessionListStatusParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
