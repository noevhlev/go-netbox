/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PluginsBgpPrefixListListFamilyParameter the model 'PluginsBgpPrefixListListFamilyParameter'
type PluginsBgpPrefixListListFamilyParameter string

// List of plugins_bgp_prefix_list_list_family_parameter
const (
	PLUGINSBGPPREFIXLISTLISTFAMILYPARAMETER_IPV4 PluginsBgpPrefixListListFamilyParameter = "ipv4"
	PLUGINSBGPPREFIXLISTLISTFAMILYPARAMETER_IPV6 PluginsBgpPrefixListListFamilyParameter = "ipv6"
)

// All allowed values of PluginsBgpPrefixListListFamilyParameter enum
var AllowedPluginsBgpPrefixListListFamilyParameterEnumValues = []PluginsBgpPrefixListListFamilyParameter{
	"ipv4",
	"ipv6",
}

func (v *PluginsBgpPrefixListListFamilyParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PluginsBgpPrefixListListFamilyParameter(value)
	for _, existing := range AllowedPluginsBgpPrefixListListFamilyParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PluginsBgpPrefixListListFamilyParameter", value)
}

// NewPluginsBgpPrefixListListFamilyParameterFromValue returns a pointer to a valid PluginsBgpPrefixListListFamilyParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPluginsBgpPrefixListListFamilyParameterFromValue(v string) (*PluginsBgpPrefixListListFamilyParameter, error) {
	ev := PluginsBgpPrefixListListFamilyParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PluginsBgpPrefixListListFamilyParameter: valid values are %v", v, AllowedPluginsBgpPrefixListListFamilyParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PluginsBgpPrefixListListFamilyParameter) IsValid() bool {
	for _, existing := range AllowedPluginsBgpPrefixListListFamilyParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to plugins_bgp_prefix_list_list_family_parameter value
func (v PluginsBgpPrefixListListFamilyParameter) Ptr() *PluginsBgpPrefixListListFamilyParameter {
	return &v
}

type NullablePluginsBgpPrefixListListFamilyParameter struct {
	value *PluginsBgpPrefixListListFamilyParameter
	isSet bool
}

func (v NullablePluginsBgpPrefixListListFamilyParameter) Get() *PluginsBgpPrefixListListFamilyParameter {
	return v.value
}

func (v *NullablePluginsBgpPrefixListListFamilyParameter) Set(val *PluginsBgpPrefixListListFamilyParameter) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginsBgpPrefixListListFamilyParameter) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginsBgpPrefixListListFamilyParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginsBgpPrefixListListFamilyParameter(val *PluginsBgpPrefixListListFamilyParameter) *NullablePluginsBgpPrefixListListFamilyParameter {
	return &NullablePluginsBgpPrefixListListFamilyParameter{value: val, isSet: true}
}

func (v NullablePluginsBgpPrefixListListFamilyParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginsBgpPrefixListListFamilyParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
