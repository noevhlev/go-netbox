/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the PrefixList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrefixList{}

// PrefixList Adds support for custom fields and tags.
type PrefixList struct {
	Id                   int32                          `json:"id"`
	Url                  string                         `json:"url"`
	Name                 string                         `json:"name"`
	Display              string                         `json:"display"`
	Description          string                         `json:"description"`
	Family               PatchedPrefixListRequestFamily `json:"family"`
	Tags                 []NestedTag                    `json:"tags,omitempty"`
	CustomFields         map[string]interface{}         `json:"custom_fields,omitempty"`
	Comments             *string                        `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrefixList PrefixList

// NewPrefixList instantiates a new PrefixList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefixList(id int32, url string, name string, display string, description string, family PatchedPrefixListRequestFamily) *PrefixList {
	this := PrefixList{}
	this.Id = id
	this.Url = url
	this.Name = name
	this.Display = display
	this.Description = description
	this.Family = family
	return &this
}

// NewPrefixListWithDefaults instantiates a new PrefixList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefixListWithDefaults() *PrefixList {
	this := PrefixList{}
	return &this
}

// GetId returns the Id field value
func (o *PrefixList) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PrefixList) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PrefixList) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *PrefixList) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PrefixList) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PrefixList) SetUrl(v string) {
	o.Url = v
}

// GetName returns the Name field value
func (o *PrefixList) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PrefixList) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PrefixList) SetName(v string) {
	o.Name = v
}

// GetDisplay returns the Display field value
func (o *PrefixList) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *PrefixList) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *PrefixList) SetDisplay(v string) {
	o.Display = v
}

// GetDescription returns the Description field value
func (o *PrefixList) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PrefixList) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PrefixList) SetDescription(v string) {
	o.Description = v
}

// GetFamily returns the Family field value
func (o *PrefixList) GetFamily() PatchedPrefixListRequestFamily {
	if o == nil {
		var ret PatchedPrefixListRequestFamily
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *PrefixList) GetFamilyOk() (*PatchedPrefixListRequestFamily, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *PrefixList) SetFamily(v PatchedPrefixListRequestFamily) {
	o.Family = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PrefixList) GetTags() []NestedTag {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixList) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PrefixList) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *PrefixList) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *PrefixList) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixList) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *PrefixList) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *PrefixList) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *PrefixList) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixList) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *PrefixList) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *PrefixList) SetComments(v string) {
	o.Comments = &v
}

func (o PrefixList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrefixList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["name"] = o.Name
	toSerialize["display"] = o.Display
	toSerialize["description"] = o.Description
	toSerialize["family"] = o.Family
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrefixList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"name",
		"display",
		"description",
		"family",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrefixList := _PrefixList{}

	err = json.Unmarshal(data, &varPrefixList)

	if err != nil {
		return err
	}

	*o = PrefixList(varPrefixList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "display")
		delete(additionalProperties, "description")
		delete(additionalProperties, "family")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrefixList struct {
	value *PrefixList
	isSet bool
}

func (v NullablePrefixList) Get() *PrefixList {
	return v.value
}

func (v *NullablePrefixList) Set(val *PrefixList) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixList) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixList(val *PrefixList) *NullablePrefixList {
	return &NullablePrefixList{value: val, isSet: true}
}

func (v NullablePrefixList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
