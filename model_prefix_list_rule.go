/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PrefixListRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrefixListRule{}

// PrefixListRule Adds support for custom fields and tags.
type PrefixListRule struct {
	Id                   int32                   `json:"id"`
	Description          *string                 `json:"description,omitempty"`
	Tags                 []NestedTag             `json:"tags,omitempty"`
	CustomFields         map[string]interface{}  `json:"custom_fields,omitempty"`
	Display              string                  `json:"display"`
	PrefixList           BriefPrefixList         `json:"prefix_list"`
	Created              NullableTime            `json:"created"`
	LastUpdated          NullableTime            `json:"last_updated"`
	Index                int32                   `json:"index"`
	Action               CommunityListRuleAction `json:"action"`
	PrefixCustom         NullableString          `json:"prefix_custom,omitempty"`
	Ge                   NullableInt32           `json:"ge,omitempty"`
	Le                   NullableInt32           `json:"le,omitempty"`
	Prefix               NullableBriefPrefix     `json:"prefix,omitempty"`
	Comments             *string                 `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrefixListRule PrefixListRule

// NewPrefixListRule instantiates a new PrefixListRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefixListRule(id int32, display string, prefixList BriefPrefixList, created NullableTime, lastUpdated NullableTime, index int32, action CommunityListRuleAction) *PrefixListRule {
	this := PrefixListRule{}
	this.Id = id
	this.Display = display
	this.PrefixList = prefixList
	this.Created = created
	this.LastUpdated = lastUpdated
	this.Index = index
	this.Action = action
	return &this
}

// NewPrefixListRuleWithDefaults instantiates a new PrefixListRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefixListRuleWithDefaults() *PrefixListRule {
	this := PrefixListRule{}
	return &this
}

// GetId returns the Id field value
func (o *PrefixListRule) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PrefixListRule) SetId(v int32) {
	o.Id = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PrefixListRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PrefixListRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PrefixListRule) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PrefixListRule) GetTags() []NestedTag {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PrefixListRule) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *PrefixListRule) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *PrefixListRule) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *PrefixListRule) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *PrefixListRule) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetDisplay returns the Display field value
func (o *PrefixListRule) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *PrefixListRule) SetDisplay(v string) {
	o.Display = v
}

// GetPrefixList returns the PrefixList field value
func (o *PrefixListRule) GetPrefixList() BriefPrefixList {
	if o == nil {
		var ret BriefPrefixList
		return ret
	}

	return o.PrefixList
}

// GetPrefixListOk returns a tuple with the PrefixList field value
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetPrefixListOk() (*BriefPrefixList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixList, true
}

// SetPrefixList sets field value
func (o *PrefixListRule) SetPrefixList(v BriefPrefixList) {
	o.PrefixList = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PrefixListRule) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrefixListRule) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *PrefixListRule) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PrefixListRule) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrefixListRule) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *PrefixListRule) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetIndex returns the Index field value
func (o *PrefixListRule) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *PrefixListRule) SetIndex(v int32) {
	o.Index = v
}

// GetAction returns the Action field value
func (o *PrefixListRule) GetAction() CommunityListRuleAction {
	if o == nil {
		var ret CommunityListRuleAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetActionOk() (*CommunityListRuleAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PrefixListRule) SetAction(v CommunityListRuleAction) {
	o.Action = v
}

// GetPrefixCustom returns the PrefixCustom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrefixListRule) GetPrefixCustom() string {
	if o == nil || IsNil(o.PrefixCustom.Get()) {
		var ret string
		return ret
	}
	return *o.PrefixCustom.Get()
}

// GetPrefixCustomOk returns a tuple with the PrefixCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrefixListRule) GetPrefixCustomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrefixCustom.Get(), o.PrefixCustom.IsSet()
}

// HasPrefixCustom returns a boolean if a field has been set.
func (o *PrefixListRule) HasPrefixCustom() bool {
	if o != nil && o.PrefixCustom.IsSet() {
		return true
	}

	return false
}

// SetPrefixCustom gets a reference to the given NullableString and assigns it to the PrefixCustom field.
func (o *PrefixListRule) SetPrefixCustom(v string) {
	o.PrefixCustom.Set(&v)
}

// SetPrefixCustomNil sets the value for PrefixCustom to be an explicit nil
func (o *PrefixListRule) SetPrefixCustomNil() {
	o.PrefixCustom.Set(nil)
}

// UnsetPrefixCustom ensures that no value is present for PrefixCustom, not even an explicit nil
func (o *PrefixListRule) UnsetPrefixCustom() {
	o.PrefixCustom.Unset()
}

// GetGe returns the Ge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrefixListRule) GetGe() int32 {
	if o == nil || IsNil(o.Ge.Get()) {
		var ret int32
		return ret
	}
	return *o.Ge.Get()
}

// GetGeOk returns a tuple with the Ge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrefixListRule) GetGeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ge.Get(), o.Ge.IsSet()
}

// HasGe returns a boolean if a field has been set.
func (o *PrefixListRule) HasGe() bool {
	if o != nil && o.Ge.IsSet() {
		return true
	}

	return false
}

// SetGe gets a reference to the given NullableInt32 and assigns it to the Ge field.
func (o *PrefixListRule) SetGe(v int32) {
	o.Ge.Set(&v)
}

// SetGeNil sets the value for Ge to be an explicit nil
func (o *PrefixListRule) SetGeNil() {
	o.Ge.Set(nil)
}

// UnsetGe ensures that no value is present for Ge, not even an explicit nil
func (o *PrefixListRule) UnsetGe() {
	o.Ge.Unset()
}

// GetLe returns the Le field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrefixListRule) GetLe() int32 {
	if o == nil || IsNil(o.Le.Get()) {
		var ret int32
		return ret
	}
	return *o.Le.Get()
}

// GetLeOk returns a tuple with the Le field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrefixListRule) GetLeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Le.Get(), o.Le.IsSet()
}

// HasLe returns a boolean if a field has been set.
func (o *PrefixListRule) HasLe() bool {
	if o != nil && o.Le.IsSet() {
		return true
	}

	return false
}

// SetLe gets a reference to the given NullableInt32 and assigns it to the Le field.
func (o *PrefixListRule) SetLe(v int32) {
	o.Le.Set(&v)
}

// SetLeNil sets the value for Le to be an explicit nil
func (o *PrefixListRule) SetLeNil() {
	o.Le.Set(nil)
}

// UnsetLe ensures that no value is present for Le, not even an explicit nil
func (o *PrefixListRule) UnsetLe() {
	o.Le.Unset()
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrefixListRule) GetPrefix() BriefPrefix {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret BriefPrefix
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrefixListRule) GetPrefixOk() (*BriefPrefix, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *PrefixListRule) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableBriefPrefix and assigns it to the Prefix field.
func (o *PrefixListRule) SetPrefix(v BriefPrefix) {
	o.Prefix.Set(&v)
}

// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *PrefixListRule) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *PrefixListRule) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *PrefixListRule) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefixListRule) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *PrefixListRule) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *PrefixListRule) SetComments(v string) {
	o.Comments = &v
}

func (o PrefixListRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrefixListRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	toSerialize["display"] = o.Display
	toSerialize["prefix_list"] = o.PrefixList
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	toSerialize["index"] = o.Index
	toSerialize["action"] = o.Action
	if o.PrefixCustom.IsSet() {
		toSerialize["prefix_custom"] = o.PrefixCustom.Get()
	}
	if o.Ge.IsSet() {
		toSerialize["ge"] = o.Ge.Get()
	}
	if o.Le.IsSet() {
		toSerialize["le"] = o.Le.Get()
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrefixListRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"display",
		"prefix_list",
		"created",
		"last_updated",
		"index",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrefixListRule := _PrefixListRule{}

	err = json.Unmarshal(data, &varPrefixListRule)

	if err != nil {
		return err
	}

	*o = PrefixListRule(varPrefixListRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "display")
		delete(additionalProperties, "prefix_list")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "index")
		delete(additionalProperties, "action")
		delete(additionalProperties, "prefix_custom")
		delete(additionalProperties, "ge")
		delete(additionalProperties, "le")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrefixListRule struct {
	value *PrefixListRule
	isSet bool
}

func (v NullablePrefixListRule) Get() *PrefixListRule {
	return v.value
}

func (v *NullablePrefixListRule) Set(val *PrefixListRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixListRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixListRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixListRule(val *PrefixListRule) *NullablePrefixListRule {
	return &NullablePrefixListRule{value: val, isSet: true}
}

func (v NullablePrefixListRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixListRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
