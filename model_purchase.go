/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Purchase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Purchase{}

// Purchase Adds support for custom fields and tags.
type Purchase struct {
	Id       int32                `json:"id"`
	Url      string               `json:"url"`
	Display  string               `json:"display"`
	Supplier NestedSupplier       `json:"supplier"`
	Name     string               `json:"name"`
	Status   NestedPurchaseStatus `json:"status"`
	// Date when this purchase was made
	Date                 NullableString         `json:"date,omitempty"`
	Description          *string                `json:"description,omitempty"`
	Comments             *string                `json:"comments,omitempty"`
	Tags                 []NestedTag            `json:"tags,omitempty"`
	CustomFields         map[string]interface{} `json:"custom_fields,omitempty"`
	Created              NullableTime           `json:"created"`
	LastUpdated          NullableTime           `json:"last_updated"`
	AssetCount           int32                  `json:"asset_count"`
	DeliveryCount        int32                  `json:"delivery_count"`
	AdditionalProperties map[string]interface{}
}

type _Purchase Purchase

// NewPurchase instantiates a new Purchase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchase(id int32, url string, display string, supplier NestedSupplier, name string, status NestedPurchaseStatus, created NullableTime, lastUpdated NullableTime, assetCount int32, deliveryCount int32) *Purchase {
	this := Purchase{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.Supplier = supplier
	this.Name = name
	this.Status = status
	this.Created = created
	this.LastUpdated = lastUpdated
	this.AssetCount = assetCount
	this.DeliveryCount = deliveryCount
	return &this
}

// NewPurchaseWithDefaults instantiates a new Purchase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseWithDefaults() *Purchase {
	this := Purchase{}
	return &this
}

// GetId returns the Id field value
func (o *Purchase) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Purchase) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Purchase) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Purchase) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *Purchase) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Purchase) SetDisplay(v string) {
	o.Display = v
}

// GetSupplier returns the Supplier field value
func (o *Purchase) GetSupplier() NestedSupplier {
	if o == nil {
		var ret NestedSupplier
		return ret
	}

	return o.Supplier
}

// GetSupplierOk returns a tuple with the Supplier field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetSupplierOk() (*NestedSupplier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supplier, true
}

// SetSupplier sets field value
func (o *Purchase) SetSupplier(v NestedSupplier) {
	o.Supplier = v
}

// GetName returns the Name field value
func (o *Purchase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Purchase) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *Purchase) GetStatus() NestedPurchaseStatus {
	if o == nil {
		var ret NestedPurchaseStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetStatusOk() (*NestedPurchaseStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Purchase) SetStatus(v NestedPurchaseStatus) {
	o.Status = v
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Purchase) GetDate() string {
	if o == nil || IsNil(o.Date.Get()) {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Purchase) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *Purchase) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *Purchase) SetDate(v string) {
	o.Date.Set(&v)
}

// SetDateNil sets the value for Date to be an explicit nil
func (o *Purchase) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *Purchase) UnsetDate() {
	o.Date.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Purchase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Purchase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Purchase) SetDescription(v string) {
	o.Description = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Purchase) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Purchase) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *Purchase) SetComments(v string) {
	o.Comments = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Purchase) GetTags() []NestedTag {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Purchase) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *Purchase) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Purchase) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Purchase) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Purchase) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Purchase) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Purchase) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Purchase) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Purchase) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Purchase) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *Purchase) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetAssetCount returns the AssetCount field value
func (o *Purchase) GetAssetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetCount
}

// GetAssetCountOk returns a tuple with the AssetCount field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetAssetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetCount, true
}

// SetAssetCount sets field value
func (o *Purchase) SetAssetCount(v int32) {
	o.AssetCount = v
}

// GetDeliveryCount returns the DeliveryCount field value
func (o *Purchase) GetDeliveryCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeliveryCount
}

// GetDeliveryCountOk returns a tuple with the DeliveryCount field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetDeliveryCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryCount, true
}

// SetDeliveryCount sets field value
func (o *Purchase) SetDeliveryCount(v int32) {
	o.DeliveryCount = v
}

func (o Purchase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Purchase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["supplier"] = o.Supplier
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	toSerialize["asset_count"] = o.AssetCount
	toSerialize["delivery_count"] = o.DeliveryCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Purchase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"supplier",
		"name",
		"status",
		"created",
		"last_updated",
		"asset_count",
		"delivery_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurchase := _Purchase{}

	err = json.Unmarshal(data, &varPurchase)

	if err != nil {
		return err
	}

	*o = Purchase(varPurchase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "supplier")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "date")
		delete(additionalProperties, "description")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "asset_count")
		delete(additionalProperties, "delivery_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePurchase struct {
	value *Purchase
	isSet bool
}

func (v NullablePurchase) Get() *Purchase {
	return v.value
}

func (v *NullablePurchase) Set(val *Purchase) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchase) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchase(val *Purchase) *NullablePurchase {
	return &NullablePurchase{value: val, isSet: true}
}

func (v NullablePurchase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
