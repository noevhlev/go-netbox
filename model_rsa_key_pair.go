/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the RSAKeyPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RSAKeyPair{}

// RSAKeyPair struct for RSAKeyPair
type RSAKeyPair struct {
	PublicKey            string `json:"public_key"`
	PrivateKey           string `json:"private_key"`
	AdditionalProperties map[string]interface{}
}

type _RSAKeyPair RSAKeyPair

// NewRSAKeyPair instantiates a new RSAKeyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRSAKeyPair(publicKey string, privateKey string) *RSAKeyPair {
	this := RSAKeyPair{}
	this.PublicKey = publicKey
	this.PrivateKey = privateKey
	return &this
}

// NewRSAKeyPairWithDefaults instantiates a new RSAKeyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRSAKeyPairWithDefaults() *RSAKeyPair {
	this := RSAKeyPair{}
	return &this
}

// GetPublicKey returns the PublicKey field value
func (o *RSAKeyPair) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *RSAKeyPair) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *RSAKeyPair) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *RSAKeyPair) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *RSAKeyPair) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *RSAKeyPair) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o RSAKeyPair) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RSAKeyPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["public_key"] = o.PublicKey
	toSerialize["private_key"] = o.PrivateKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RSAKeyPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"public_key",
		"private_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRSAKeyPair := _RSAKeyPair{}

	err = json.Unmarshal(data, &varRSAKeyPair)

	if err != nil {
		return err
	}

	*o = RSAKeyPair(varRSAKeyPair)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "private_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRSAKeyPair struct {
	value *RSAKeyPair
	isSet bool
}

func (v NullableRSAKeyPair) Get() *RSAKeyPair {
	return v.value
}

func (v *NullableRSAKeyPair) Set(val *RSAKeyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableRSAKeyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableRSAKeyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRSAKeyPair(val *RSAKeyPair) *NullableRSAKeyPair {
	return &NullableRSAKeyPair{value: val, isSet: true}
}

func (v NullableRSAKeyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRSAKeyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
