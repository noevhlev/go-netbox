/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SessionKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionKey{}

// SessionKey struct for SessionKey
type SessionKey struct {
	Pk                   int32        `json:"pk"`
	Id                   int32        `json:"id"`
	Url                  string       `json:"url"`
	Display              string       `json:"display"`
	Userkey              BriefUserKey `json:"userkey"`
	SessionKey           string       `json:"session_key"`
	Created              time.Time    `json:"created"`
	AdditionalProperties map[string]interface{}
}

type _SessionKey SessionKey

// NewSessionKey instantiates a new SessionKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionKey(pk int32, id int32, url string, display string, userkey BriefUserKey, sessionKey string, created time.Time) *SessionKey {
	this := SessionKey{}
	this.Pk = pk
	this.Id = id
	this.Url = url
	this.Display = display
	this.Userkey = userkey
	this.SessionKey = sessionKey
	this.Created = created
	return &this
}

// NewSessionKeyWithDefaults instantiates a new SessionKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionKeyWithDefaults() *SessionKey {
	this := SessionKey{}
	return &this
}

// GetPk returns the Pk field value
func (o *SessionKey) GetPk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetPkOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *SessionKey) SetPk(v int32) {
	o.Pk = v
}

// GetId returns the Id field value
func (o *SessionKey) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SessionKey) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *SessionKey) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SessionKey) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *SessionKey) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *SessionKey) SetDisplay(v string) {
	o.Display = v
}

// GetUserkey returns the Userkey field value
func (o *SessionKey) GetUserkey() BriefUserKey {
	if o == nil {
		var ret BriefUserKey
		return ret
	}

	return o.Userkey
}

// GetUserkeyOk returns a tuple with the Userkey field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetUserkeyOk() (*BriefUserKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userkey, true
}

// SetUserkey sets field value
func (o *SessionKey) SetUserkey(v BriefUserKey) {
	o.Userkey = v
}

// GetSessionKey returns the SessionKey field value
func (o *SessionKey) GetSessionKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionKey
}

// GetSessionKeyOk returns a tuple with the SessionKey field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetSessionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionKey, true
}

// SetSessionKey sets field value
func (o *SessionKey) SetSessionKey(v string) {
	o.SessionKey = v
}

// GetCreated returns the Created field value
func (o *SessionKey) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *SessionKey) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *SessionKey) SetCreated(v time.Time) {
	o.Created = v
}

func (o SessionKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pk"] = o.Pk
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["userkey"] = o.Userkey
	toSerialize["session_key"] = o.SessionKey
	toSerialize["created"] = o.Created

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SessionKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pk",
		"id",
		"url",
		"display",
		"userkey",
		"session_key",
		"created",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionKey := _SessionKey{}

	err = json.Unmarshal(data, &varSessionKey)

	if err != nil {
		return err
	}

	*o = SessionKey(varSessionKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pk")
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "userkey")
		delete(additionalProperties, "session_key")
		delete(additionalProperties, "created")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSessionKey struct {
	value *SessionKey
	isSet bool
}

func (v NullableSessionKey) Get() *SessionKey {
	return v.value
}

func (v *NullableSessionKey) Set(val *SessionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionKey(val *SessionKey) *NullableSessionKey {
	return &NullableSessionKey{value: val, isSet: true}
}

func (v NullableSessionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
