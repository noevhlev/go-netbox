/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserKey{}

// UserKey struct for UserKey
type UserKey struct {
	Pk                   int32        `json:"pk"`
	Id                   int32        `json:"id"`
	Url                  string       `json:"url"`
	Display              string       `json:"display"`
	PublicKey            string       `json:"public_key"`
	Created              NullableTime `json:"created"`
	LastUpdated          NullableTime `json:"last_updated"`
	IsActive             bool         `json:"is_active"`
	IsFilled             bool         `json:"is_filled"`
	AdditionalProperties map[string]interface{}
}

type _UserKey UserKey

// NewUserKey instantiates a new UserKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserKey(pk int32, id int32, url string, display string, publicKey string, created NullableTime, lastUpdated NullableTime, isActive bool, isFilled bool) *UserKey {
	this := UserKey{}
	this.Pk = pk
	this.Id = id
	this.Url = url
	this.Display = display
	this.PublicKey = publicKey
	this.Created = created
	this.LastUpdated = lastUpdated
	this.IsActive = isActive
	this.IsFilled = isFilled
	return &this
}

// NewUserKeyWithDefaults instantiates a new UserKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserKeyWithDefaults() *UserKey {
	this := UserKey{}
	return &this
}

// GetPk returns the Pk field value
func (o *UserKey) GetPk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetPkOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *UserKey) SetPk(v int32) {
	o.Pk = v
}

// GetId returns the Id field value
func (o *UserKey) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserKey) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *UserKey) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *UserKey) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *UserKey) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *UserKey) SetDisplay(v string) {
	o.Display = v
}

// GetPublicKey returns the PublicKey field value
func (o *UserKey) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *UserKey) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *UserKey) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserKey) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *UserKey) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *UserKey) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserKey) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *UserKey) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetIsActive returns the IsActive field value
func (o *UserKey) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *UserKey) SetIsActive(v bool) {
	o.IsActive = v
}

// GetIsFilled returns the IsFilled field value
func (o *UserKey) GetIsFilled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFilled
}

// GetIsFilledOk returns a tuple with the IsFilled field value
// and a boolean to check if the value has been set.
func (o *UserKey) GetIsFilledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFilled, true
}

// SetIsFilled sets field value
func (o *UserKey) SetIsFilled(v bool) {
	o.IsFilled = v
}

func (o UserKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pk"] = o.Pk
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["public_key"] = o.PublicKey
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	toSerialize["is_active"] = o.IsActive
	toSerialize["is_filled"] = o.IsFilled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pk",
		"id",
		"url",
		"display",
		"public_key",
		"created",
		"last_updated",
		"is_active",
		"is_filled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserKey := _UserKey{}

	err = json.Unmarshal(data, &varUserKey)

	if err != nil {
		return err
	}

	*o = UserKey(varUserKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pk")
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_filled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserKey struct {
	value *UserKey
	isSet bool
}

func (v NullableUserKey) Get() *UserKey {
	return v.value
}

func (v *NullableUserKey) Set(val *UserKey) {
	v.value = val
	v.isSet = true
}

func (v NullableUserKey) IsSet() bool {
	return v.isSet
}

func (v *NullableUserKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserKey(val *UserKey) *NullableUserKey {
	return &NullableUserKey{value: val, isSet: true}
}

func (v NullableUserKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
