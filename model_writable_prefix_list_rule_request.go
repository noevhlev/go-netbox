/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.8 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the WritablePrefixListRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WritablePrefixListRuleRequest{}

// WritablePrefixListRuleRequest Adds support for custom fields and tags.
type WritablePrefixListRuleRequest struct {
	Tags                 []NestedTagRequest      `json:"tags,omitempty"`
	CustomFields         map[string]interface{}  `json:"custom_fields,omitempty"`
	PrefixList           int32                   `json:"prefix_list"`
	Index                int32                   `json:"index"`
	Action               CommunityListRuleAction `json:"action"`
	PrefixCustom         NullableString          `json:"prefix_custom,omitempty"`
	Ge                   NullableInt32           `json:"ge,omitempty"`
	Le                   NullableInt32           `json:"le,omitempty"`
	Prefix               NullableInt32           `json:"prefix,omitempty"`
	Comments             *string                 `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WritablePrefixListRuleRequest WritablePrefixListRuleRequest

// NewWritablePrefixListRuleRequest instantiates a new WritablePrefixListRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritablePrefixListRuleRequest(prefixList int32, index int32, action CommunityListRuleAction) *WritablePrefixListRuleRequest {
	this := WritablePrefixListRuleRequest{}
	this.PrefixList = prefixList
	this.Index = index
	this.Action = action
	return &this
}

// NewWritablePrefixListRuleRequestWithDefaults instantiates a new WritablePrefixListRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritablePrefixListRuleRequestWithDefaults() *WritablePrefixListRuleRequest {
	this := WritablePrefixListRuleRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WritablePrefixListRuleRequest) GetTags() []NestedTagRequest {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTagRequest
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePrefixListRuleRequest) GetTagsOk() ([]NestedTagRequest, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTagRequest and assigns it to the Tags field.
func (o *WritablePrefixListRuleRequest) SetTags(v []NestedTagRequest) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *WritablePrefixListRuleRequest) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePrefixListRuleRequest) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *WritablePrefixListRuleRequest) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetPrefixList returns the PrefixList field value
func (o *WritablePrefixListRuleRequest) GetPrefixList() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixList
}

// GetPrefixListOk returns a tuple with the PrefixList field value
// and a boolean to check if the value has been set.
func (o *WritablePrefixListRuleRequest) GetPrefixListOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixList, true
}

// SetPrefixList sets field value
func (o *WritablePrefixListRuleRequest) SetPrefixList(v int32) {
	o.PrefixList = v
}

// GetIndex returns the Index field value
func (o *WritablePrefixListRuleRequest) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *WritablePrefixListRuleRequest) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *WritablePrefixListRuleRequest) SetIndex(v int32) {
	o.Index = v
}

// GetAction returns the Action field value
func (o *WritablePrefixListRuleRequest) GetAction() CommunityListRuleAction {
	if o == nil {
		var ret CommunityListRuleAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *WritablePrefixListRuleRequest) GetActionOk() (*CommunityListRuleAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *WritablePrefixListRuleRequest) SetAction(v CommunityListRuleAction) {
	o.Action = v
}

// GetPrefixCustom returns the PrefixCustom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritablePrefixListRuleRequest) GetPrefixCustom() string {
	if o == nil || IsNil(o.PrefixCustom.Get()) {
		var ret string
		return ret
	}
	return *o.PrefixCustom.Get()
}

// GetPrefixCustomOk returns a tuple with the PrefixCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritablePrefixListRuleRequest) GetPrefixCustomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrefixCustom.Get(), o.PrefixCustom.IsSet()
}

// HasPrefixCustom returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasPrefixCustom() bool {
	if o != nil && o.PrefixCustom.IsSet() {
		return true
	}

	return false
}

// SetPrefixCustom gets a reference to the given NullableString and assigns it to the PrefixCustom field.
func (o *WritablePrefixListRuleRequest) SetPrefixCustom(v string) {
	o.PrefixCustom.Set(&v)
}

// SetPrefixCustomNil sets the value for PrefixCustom to be an explicit nil
func (o *WritablePrefixListRuleRequest) SetPrefixCustomNil() {
	o.PrefixCustom.Set(nil)
}

// UnsetPrefixCustom ensures that no value is present for PrefixCustom, not even an explicit nil
func (o *WritablePrefixListRuleRequest) UnsetPrefixCustom() {
	o.PrefixCustom.Unset()
}

// GetGe returns the Ge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritablePrefixListRuleRequest) GetGe() int32 {
	if o == nil || IsNil(o.Ge.Get()) {
		var ret int32
		return ret
	}
	return *o.Ge.Get()
}

// GetGeOk returns a tuple with the Ge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritablePrefixListRuleRequest) GetGeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ge.Get(), o.Ge.IsSet()
}

// HasGe returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasGe() bool {
	if o != nil && o.Ge.IsSet() {
		return true
	}

	return false
}

// SetGe gets a reference to the given NullableInt32 and assigns it to the Ge field.
func (o *WritablePrefixListRuleRequest) SetGe(v int32) {
	o.Ge.Set(&v)
}

// SetGeNil sets the value for Ge to be an explicit nil
func (o *WritablePrefixListRuleRequest) SetGeNil() {
	o.Ge.Set(nil)
}

// UnsetGe ensures that no value is present for Ge, not even an explicit nil
func (o *WritablePrefixListRuleRequest) UnsetGe() {
	o.Ge.Unset()
}

// GetLe returns the Le field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritablePrefixListRuleRequest) GetLe() int32 {
	if o == nil || IsNil(o.Le.Get()) {
		var ret int32
		return ret
	}
	return *o.Le.Get()
}

// GetLeOk returns a tuple with the Le field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritablePrefixListRuleRequest) GetLeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Le.Get(), o.Le.IsSet()
}

// HasLe returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasLe() bool {
	if o != nil && o.Le.IsSet() {
		return true
	}

	return false
}

// SetLe gets a reference to the given NullableInt32 and assigns it to the Le field.
func (o *WritablePrefixListRuleRequest) SetLe(v int32) {
	o.Le.Set(&v)
}

// SetLeNil sets the value for Le to be an explicit nil
func (o *WritablePrefixListRuleRequest) SetLeNil() {
	o.Le.Set(nil)
}

// UnsetLe ensures that no value is present for Le, not even an explicit nil
func (o *WritablePrefixListRuleRequest) UnsetLe() {
	o.Le.Unset()
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritablePrefixListRuleRequest) GetPrefix() int32 {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret int32
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritablePrefixListRuleRequest) GetPrefixOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableInt32 and assigns it to the Prefix field.
func (o *WritablePrefixListRuleRequest) SetPrefix(v int32) {
	o.Prefix.Set(&v)
}

// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *WritablePrefixListRuleRequest) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *WritablePrefixListRuleRequest) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *WritablePrefixListRuleRequest) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePrefixListRuleRequest) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *WritablePrefixListRuleRequest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *WritablePrefixListRuleRequest) SetComments(v string) {
	o.Comments = &v
}

func (o WritablePrefixListRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WritablePrefixListRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	toSerialize["prefix_list"] = o.PrefixList
	toSerialize["index"] = o.Index
	toSerialize["action"] = o.Action
	if o.PrefixCustom.IsSet() {
		toSerialize["prefix_custom"] = o.PrefixCustom.Get()
	}
	if o.Ge.IsSet() {
		toSerialize["ge"] = o.Ge.Get()
	}
	if o.Le.IsSet() {
		toSerialize["le"] = o.Le.Get()
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WritablePrefixListRuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefix_list",
		"index",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWritablePrefixListRuleRequest := _WritablePrefixListRuleRequest{}

	err = json.Unmarshal(data, &varWritablePrefixListRuleRequest)

	if err != nil {
		return err
	}

	*o = WritablePrefixListRuleRequest(varWritablePrefixListRuleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "prefix_list")
		delete(additionalProperties, "index")
		delete(additionalProperties, "action")
		delete(additionalProperties, "prefix_custom")
		delete(additionalProperties, "ge")
		delete(additionalProperties, "le")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWritablePrefixListRuleRequest struct {
	value *WritablePrefixListRuleRequest
	isSet bool
}

func (v NullableWritablePrefixListRuleRequest) Get() *WritablePrefixListRuleRequest {
	return v.value
}

func (v *NullableWritablePrefixListRuleRequest) Set(val *WritablePrefixListRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWritablePrefixListRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWritablePrefixListRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritablePrefixListRuleRequest(val *WritablePrefixListRuleRequest) *NullableWritablePrefixListRuleRequest {
	return &NullableWritablePrefixListRuleRequest{value: val, isSet: true}
}

func (v NullableWritablePrefixListRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritablePrefixListRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
